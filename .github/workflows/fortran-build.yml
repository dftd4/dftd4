name: CI

on: [push, pull_request]

env:
  BUILD_DIR: _build
  PIP_PACKAGES: >-
    meson==0.55.3
    ninja
    gcovr
  PIP_EXTRAS: >-
    pytest
    pytest-cov
    cffi
    numpy
    qcelemental
    ase
    tomlkit

jobs:
  gcc-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    env:
      FC: gfortran
      CC: gcc
      GCC_V: 9
      OMP_NUM_THREADS: 2,1
      PYTHON_V: 3.8

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: ${{ env.PYTHON_V }}

    - name: Install GCC (OSX)
      if: contains(matrix.os, 'macos')
      run: |
        ln -s /usr/local/bin/gfortran-${{ env.GCC_V }} /usr/local/bin/gfortran
        ln -s /usr/local/bin/gcc-${{ env.GCC_V }} /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-${{ env.GCC_V }} /usr/local/bin/g++

    - name: Install GCC (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: >-
        sudo update-alternatives
        --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_V }} 100
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ env.GCC_V }}
        --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ env.GCC_V }}

    - name: Install meson and test dependencies
      run: pip3 install ${{ env.PIP_PACKAGES }} ${{ env.PIP_EXTRAS }}

    - name: Configure build
      run: >-
        meson setup ${{ env.BUILD_DIR }}
        --buildtype=debug
        --prefix=$PWD/_dist
        --libdir=lib
        --warnlevel=0
        -Db_coverage=true
        -Dlapack=netlib
        -Dpython=true

    - name: Build library
      run: meson compile -C ${{ env.BUILD_DIR }}

    - name: Run unit tests
      run: |
         meson test -C ${{ env.BUILD_DIR }} --print-errorlogs --no-rebuild
         ninja -C ${{ env.BUILD_DIR }} coverage

    - name: Install project
      run: |
        meson install -C ${{ env.BUILD_DIR }} --no-rebuild
        echo "DFTD4_PREFIX=$PWD/_dist" >> $GITHUB_ENV

    - name: Test Python API
      run: pytest --pyargs dftd4 --cov=dftd4 -vv
      env:
        LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}:${{ env.DFTD4_PREFIX }}/lib
        PYTHONPATH: ${{ env.PYTHONPATH }}:${{ env.DFTD4_PREFIX }}/lib/python${{ env.PYTHON_V }}/site-packages

    - name: Upload coverage report
      uses: codecov/codecov-action@v1

    - name: Configure out-of-tree build
      run: >-
        meson setup ${{ env.BUILD_DIR }}
        --prefix=$PWD/_dist
        --libdir=lib
        --warnlevel=0
      working-directory: python
      env:
        PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}:${{ env.DFTD4_PREFIX }}/lib/pkgconfig

    - name: Build Python extension module
      run: meson compile -C ${{ env.BUILD_DIR }}
      working-directory: python

    - name: Install Python extension module
      run: meson install -C ${{ env.BUILD_DIR }} --no-rebuild
      working-directory: python

  # Test native MinGW Windows build
  mingw-build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64 },
        # { msystem: MINGW32, arch: i686   }
        ]
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup MSYS2 toolchain
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: false
        install: >-
          git
          mingw-w64-${{ matrix.arch }}-gcc-fortran
          mingw-w64-${{ matrix.arch }}-openblas
          mingw-w64-${{ matrix.arch }}-lapack
          mingw-w64-${{ matrix.arch }}-python
          mingw-w64-${{ matrix.arch }}-python-pip
          mingw-w64-${{ matrix.arch }}-ninja

    - name: Install meson
      run: pip3 install meson==0.55.3

    - name: Configure build
      run: meson setup ${{ env.BUILD_DIR }} -Dlapack=netlib --warnlevel=0
      env:
        FC: gfortran
        CC: gcc

    - name: Build project
      run: meson compile -C ${{ env.BUILD_DIR }}

    - name: Run unit tests
      run: meson test -C ${{ env.BUILD_DIR }} --print-errorlogs --no-rebuild
      env:
        OMP_NUM_THREADS: 2,1

  # Build with Intel toolchain
  intel-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        fc: [ifort]
        cc: [icc]

    env:
      FC: ${{ matrix.fc }}
      CC: ${{ matrix.cc }}
      APT_PACKAGES: >-
        intel-oneapi-compiler-fortran
        intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
        intel-oneapi-mkl-devel
        asciidoctor

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Add Intel repository
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update

    - name: Install Intel oneAPI compiler
      run: |
        sudo apt-get install ${{ env.APT_PACKAGES }}
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Install meson
      run: pip3 install meson==0.57.1 ninja

    - name: Configure meson build
      run: >-
        meson setup ${{ env.BUILD_DIR }}
        --prefix=/
        --libdir=lib
        --default-library=static
        -Dfortran_link_args="-static -qopenmp"

    - name: Build library
      run: meson compile -C ${{ env.BUILD_DIR }}

    - name: Run unit tests
      run: meson test -C ${{ env.BUILD_DIR }} --print-errorlogs --no-rebuild
      env:
        OMP_NUM_THREADS: 2,1

    - name: Install package
      run: meson install -C ${{ env.BUILD_DIR }} --no-rebuild
      env:
        DESTDIR: ${{ env.PWD }}/dftd4-bleed

    - name: Create package
      if: github.event_name == 'push'
      run: |
        tar cvf dftd4-bleed.tar dftd4-bleed
        xz --threads=0 dftd4-bleed.tar

    - name: Upload binary
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v2
      with:
        name: dftd4-bleed.tar.xz
        path: dftd4-bleed.tar.xz

  # Inspired from https://github.com/endless-sky/endless-sky
  continuous-delivery:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs:
      - intel-build

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_TAG: bleed
      OUTPUT_INTEL: dftd4-bleed.tar.xz

    steps:
    - uses: actions/checkout@v2

    - name: Install github-release
      run: |
        go get github.com/github-release/github-release
        echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Set environment variables
      run: |
        echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
        echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV

    - name: Move/Create continuous tag
      run: |
        git tag --force ${{ env.RELEASE_TAG }} ${{ github.sha }}
        git push --tags --force

    - name: Get Time
      run: echo "TIME=$(date -u '+%Y/%m/%d, %H:%M')" >> $GITHUB_ENV

    - name: Check continuous release status
      run: |
        if ! github-release info -t ${{ env.RELEASE_TAG }} > /dev/null 2>&1; then
          echo "RELEASE_COMMAND=release" >> $GITHUB_ENV
        else
          echo "RELEASE_COMMAND=edit" >> $GITHUB_ENV
        fi

    - name: Setup continuous release
      run: >-
        github-release ${{ env.RELEASE_COMMAND }}
        --tag ${{ env.RELEASE_TAG }}
        --name "Bleeding edge version"
        --description "$DESCRIPTION"
        --pre-release
      env:
        DESCRIPTION: |
          Created on ${{ env.TIME }} UTC by @${{ github.actor }} with commit ${{ github.sha }}.
          This is an automated distribution of the latest `dftd4` version. It contains the latest features and possibly also the newest bugs. Use with caution!
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        path: ${{ github.workspace }} # This will download all files

    - name: Create SHA256 checksum
      run: |
        cd ${{ env.OUTPUT_INTEL }}
        sha256sum ${{ env.OUTPUT_INTEL }} > sha256.txt

    - name: Add ${{ env.OUTPUT_INTEL }} to release tag
      run: >-
        github-release upload
        --tag ${{ env.RELEASE_TAG }}
        --replace
        --name ${{ env.OUTPUT_INTEL }}
        --file ${{ env.OUTPUT_INTEL }}/${{ env.OUTPUT_INTEL }}

    - name: Add SHA256 checksums to release tag
      run: >-
        github-release upload
        --tag ${{ env.RELEASE_TAG }}
        --replace
        --name sha256.txt
        --file ${{ env.OUTPUT_INTEL }}/sha256.txt
