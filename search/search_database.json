var tipuesearch = {"pages":[{"title":" DFT-D4 ","text":"DFT-D4 DFT-D4 project Generally Applicable Atomic-Charge Dependent London Dispersion Correction. Installing A statically linked binary distribution for Linux platforms is available at the latest release tag.\nBleeding edge releases of the latest source from this repository are available on the continuous release tag . Conda package This project is packaged for the conda package manager and available on the conda-forge channel.\nTo install the conda package manager we recommend the miniforge installer.\nIf the conda-forge channel is not yet enabled, add it to your channels with conda config --add channels conda-forge Once the conda-forge channel has been enabled, this project can be installed with: conda install dftd4 If you want to enable the Python API as well install conda install dftd4-python It is possible to list all of the versions available on your platform with: conda search dftd4 --channel conda-forge Now you are ready to use dftd4 . Spack package This project is available with spack in its develop version.\nYou can install and load dftd4 with spack install dftd4 spack load dftd4 The Python API can be enabled by adding +python to the command. FreeBSD Port A port for FreeBSD is available and can be installed using pkg install science/dftd4 In case no package is available build the port using cd /usr/ports/science/dftd4\nmake install clean For more information see the dftd4 port details . Building from Source To build this project from the source code in this repository you need to have\na Fortran compiler supporting Fortran 2008 and one of the supported build systems:\n- meson version 0.55 or newer, with\n  a build-system backend, i.e. ninja version 1.7 or newer\n- cmake version 3.14 or newer, with\n  a build-system backend, i.e. ninja version 1.10 or newer\n- fpm version 0.2.0 or newer Currently this project supports GCC and Intel compilers. Building with meson To compile this version of DFT-D4 with meson the following programs are needed\n(the number in parentheses specifies the tested versions). To build this project from the source code in this repository you need to have\n- a Fortran compiler supporting Fortran 2008\n- meson version 0.55 or newer\n- a build-system backend, i.e. ninja version 1.7 or newer\n- a LAPACK / BLAS provider, like MKL or OpenBLAS Optional dependencies are\n- asciidoctor to build the manual page\n- FORD to build the developer documentation\n- C compiler to test the C-API and compile the Python extension module\n- Python 3.6 or newer with the CFFI package installed to build the Python API Setup a build with meson setup _build You can select the Fortran compiler by the FC environment variable.\nTo compile and run the projects testsuite use meson test -C _build --print-errorlogs If the testsuite passes you can install with meson configure _build --prefix = /path/to/install\nmeson install -C _build This might require administrator access depending on the chosen install prefix. Building with CMake Alternatively, this project can be build with CMake (in this case ninja 1.10 or newer is required): cmake -B _build -G Ninja -DCMAKE_INSTALL_PREFIX=$HOME/.local To compile the project with CMake run cmake --build _build You can run the project testsuite with ctest --test-dir _build --parallel --output-on-failure Finally, you can install the project to the selected prefix cmake --install _build Note that the CMake build does not support to build the Python extension module as part of the main build. Building with fpm This project support the Fortran package manager (fpm).\nInvoke fpm in the project root with fpm build To run the testsuite use fpm test You can access the dftd4 program using the run subcommand fpm run -- --help To use dftd4 for testing include it as dependency in your package manifest [dependencies] dftd4 . git = \"https://github.com/dftd4/dftd4\" Note that the fpm build does not support exporting the C-API, it only provides access to the standalone binary. Usage DFT-D4 calculations can be performed with the dftd4 executable.\nTo calculate the dispersion correction for PBE0-D4 run: dftd4 --func pbe0 coord In case you want to access the DFT-D4 results from other programs, dump the results to JSON with\n(the --noedisp flag prevents the .EDISP file generation): dftd4 --func pbe0 --json --grad --noedisp struct.xyz Dispersion related properties can be calculated as well: dftd4 --property geo.gen To evaluate pairwise resolved dispersion energies use dftd4 --pair-resolved mol.xyz For an overview over all command line arguments use the --help argument or checkout the dftd4(1) manpage. Parameters DFT-D4 is parametrized for plenty of density functionals.\nThe available parameters are listed in the parameters.toml file or with the following command. dftd4 param --list While the functionals can be selected with their common names (e.g., PBE ), the libxc names can also be used (e.g., GGA_X_PBE:GGA_C_PBE ). dftd4 --func PBE coord\ndftd4 --func GGA_X_PBE:GGA_C_PBE coord The exchange and correlation functional must be separated by a colon.\nAll names are case-insensitive. Note on ωB97X-type functionals Since there has been some confusion concerning the different ωB97X functionals, we provide a detailed summary: \n\n- [ωB97X](https://doi.org/10.1063/1.2834918) (original functional, 2008, parameters: `wb97x-2008`)\n- [ωB97X-D](https://doi.org/10.1039/B810189B) (re-optimization of ωB97X to include dispersion correction, 2008, no D4 parameters)\n- [ωB97X-D3](https://doi.org/10.1021/ct300715s) (re-optimization of ωB97X-D with improved dispersion corrections, D3(0), 2013, no D4 parameters)\n- [ωB97X-V](https://doi.org/10.1039/C3CP54374A) (new functional, different from the above ωB97X's and not just a re-optimization for VV10 dispersion, 2013)\n- [ωB97X-D4](https://doi.org/10.1002/jcc.26411) (ωB97X-V with D4 dispersion instead of VV10 dispersion, parameters: `wb97x`)\n- [ωB97X-D4rev](https://doi.org/10.1063/5.0133026) (revised D4 parameters for ωB97X-V with D4 dispersion instead of VV10 dispersion, parameters: `wb97x-rev`)\n- [ωB97X-3c](https://doi.org/10.1063/5.0133026) (Composite \"3c\" method based on ωB97X-V, parameters: `wb97x-3c`)\n\nNote that the ωB97X parameters (`wb97x-2008`) cannot be used for the ωB97X-V functional (`wb97x`, `wb97x-rev`).\nWe recommend the revised D4 parameters for ωB97X-V (`wb97x-rev`). You can add new functionals using to the TOML file by adding a new subtable [parameter.name] reference . doi = [ \"<functional reference>\" ] d4 . bj-eeq-atm = { s8 = 1.0 , a1 = 0.4 , a2 = 5.0 , doi = \"<parameter reference>\" } Those parameters are currently only used as reference and not yet usable in the library or executable. API access The DFT-D4 project provides first class API support Fortran, C and Python.\nOther programming languages should try to interface with to DFT-D4 via one of those three APIs.\nTo provide first class API support for a new language the interface specification should be available as meson build files. The dftd4 binary provides with the --json option access to all quantities available from the APIs as well. Fortran API The recommended way to access the Fortran module API is by using dftd4 as a meson subproject.\nAlternatively, the project is accessible by the Fortran package manager ( fpm ). The complete API is available from dftd4 module, the individual modules are available to the user as well but are not part of the public API and therefore not guaranteed to remain stable.\nABI compatibility is only guaranteed for the same minor version. The communication with the Fortran API uses the error_type and structure_type of the modular computation tool chain library (mctc-lib) to handle errors and represent geometries, respectively. Building Vasp with support for D4 To use dftd4 in Vasp the compatibility layer for the 2.5.x API has to be enable with -Dapi_v2=true (meson) or -DWITH_API_V2=ON (CMake).\nIt is important to build dftd4 with the same Fortran compiler you build Vasp with. After you completed the installation of dftd4 , make sure it is findable by pkg-config , you can check by running: pkg-config --modversion dftd4 If your dftd4 installation is not findable, you have to update your environment variables.\nOne option is to provide a module file for your dftd4 installation.\nThe example module file below can be placed in your MODULEPATH to provide access to an installation in ~/opt/dftd4/3.7.0 .\nRetry the above comment after loading the dftd4 module and adjust the module file until pkg-config finds your installation. -- dftd4/3.7.0.lua local name = \"dftd4\" local version = \"3.7.0\" local prefix = pathJoin ( os.getenv ( \"HOME\" ), \"opt\" , name , version ) local libdir = \"lib\" -- or lib64 whatis ( \"Name        : \" .. name ) whatis ( \"Version     : \" .. version ) whatis ( \"Description : Generally applicable charge dependent London dispersion correction\" ) whatis ( \"URL         : https://github.com/dftd4/dftd4\" ) prepend_path ( \"PATH\" , pathJoin ( prefix , \"bin\" )) prepend_path ( \"MANPATH\" , pathJoin ( prefix , \"share\" , \"man\" )) prepend_path ( \"CPATH\" , pathJoin ( prefix , \"include\" )) prepend_path ( \"LIBRARY_PATH\" , pathJoin ( prefix , libdir )) prepend_path ( \"LD_LIBRARY_PATH\" , pathJoin ( prefix , libdir )) prepend_path ( \"PKG_CONFIG_PATH\" , pathJoin ( prefix , libdir , \"pkgconfig\" )) To enable support for D4 in Vasp add the following lines to the Makefile: CPP_OPTIONS += -DDFTD4 LLIBS += $( shell pkg-config --libs dftd4 ) INCS += $( shell pkg-config --cflags dftd4 ) Depending on how you built DFT-D4, DFT-D4’s dependencies might not be properly recognized during the VASP build. Try to explicitly add them to the link line. CPP_OPTIONS += -DDFTD4 LLIBS += $( shell pkg-config --libs dftd4 ) -lmulticharge -lmctc-lib -lmstore INCS += $( shell pkg-config --cflags dftd4 ) If you still run into issues, check out VASP-related issues on the dftd4 issue tracker. C API The C API provides access to the basic Fortran objects and their most important methods to interact with them.\nAll Fortran objects are available as opaque void* in C and can only be manipulated with the correct API calls.\nTo evaluate a dispersion correction in C four objects are available: the error handler: Simple error handler to carry runtime exceptions created by the library.\n   Exceptions can be handled and/or transfered to the downstream error handling system by this means. the molecular structure data: Provides a representation of the molecular structure with immutable number of atoms, atomic species, total charge and boundary conditions.\n   The object provides a way to update coordinates and lattice parameters, to update immutable quantities the object has to be recreated. the dispersion model: Instantiated for a given molecular structure type, it carries no information on the geometry but relies on the atomic species of the structure object.\n   Recreating a structure object requires to recreate the dispersion model as well. the damping parameters: Damping parameter object determining the short-range behaviour of the dispersion correction.\n   Standard damping parameters like the rational damping are independent of the molecular structure and can easily be reused for several structures or easily exchanged. The user is responsible for creating and deleting the objects to avoid memory leaks.\nFor convenience the type-generic macro dftd4_delete is available to free any memory allocation made in the library. Python API The Python API is disabled by default and can be built in-tree or out-of-tree.\nThe in-tree build is mainly meant for end users and packages.\nTo build the Python API with the normal project set the python option in the configuration step with meson setup _build -Dpython = true -Dpython_version = $( which python3 ) The Python version can be used to select a different Python version, it defaults to 'python3' .\nPython 2 is not supported with this project, the Python version key is meant to select between several local Python 3 versions. Proceed with the build as described before and install the projects to make the Python API available in the selected prefix. For the out-of-tree build see the instructions in the python directory. Citation Always cite: Eike Caldeweyher, Christoph Bannwarth and Stefan Grimme, J. Chem. Phys. , 2017 , 147, 034112.\nDOI: 10.1063/1.4993215 Eike Caldeweyher, Sebastian Ehlert, Andreas Hansen, Hagen Neugebauer, Sebastian Spicher, Christoph Bannwarth and Stefan Grimme, J. Chem Phys , 2019 , 150, 154122.\nDOI: 10.1063/1.5090222 chemrxiv: 10.26434/chemrxiv.7430216 Eike Caldeweyher, Jan-Michael Mewes, Sebastian Ehlert and Stefan Grimme, Phys. Chem. Chem. Phys. , 2020 , 22, 8499-8512.\nDOI: 10.1039/D0CP00502A chemrxiv: 10.26434/chemrxiv.10299428 In the range-separate hybrid context: Marvin Friede, Sebastian Ehlert, Stefan Grimme and Jan-Michael Mewes, J. Chem. Theory Comput. , 2023 , 19 (22), 8097-8107.\nDOI: 10.1021/acs.jctc.3c00717 Extension to Fr, Ra, and full Actinide series: Lukas Wittmann, Igor Gordiy, Marvin Friede, Benjamin Helmich-Paris, Stefan Grimme, Andreas Hansen and Markus Bursch, Phys. Chem. Chem. Phys. , 2024 , 26, 21379-21394.\nDOI: 10.1039/D4CP01514B Citations can also be viewed via dftd4 --citation or in the BibTeX file . License This project is free software: you can redistribute it and/or modify it under\nthe terms of the Lesser GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version. This project is distributed in the hope that it will be useful,\nbut without any warranty; without even the implied warranty of\nmerchantability or fitness for a particular purpose.  See the\nLesser GNU General Public License for more details. Unless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in this project by you, as defined in the\nLesser GNU General Public license, shall be licensed as above, without any\nadditional terms or conditions. Developer Info Grimme group Bonn","tags":"home","url":"index.html"},{"title":"rational_damping_param – DFT-D4 ","text":"type, public, extends( damping_param ) :: rational_damping_param Rational (Becke-Johnson) damping model Components Type Visibility Attributes Name Initial real(kind=wp), public :: a1 real(kind=wp), public :: a2 real(kind=wp), public :: alp = 16.0_wp real(kind=wp), public :: s6 = 1.0_wp real(kind=wp), public :: s8 real(kind=wp), public :: s9 = 1.0_wp Type-Bound Procedures procedure, public :: get_dispersion2 Evaluate pairwise dispersion energy expression private  subroutine get_dispersion2 (self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial procedure, public :: get_dispersion3 Evaluate ATM three-body dispersion energy expression private  subroutine get_dispersion3 (self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial procedure, public :: get_pairwise_dispersion2 Evaluate pairwise representation of additive dispersion energy private  subroutine get_pairwise_dispersion2 (self, mol, trans, cutoff, r4r2, c6, energy) Evaluation of the dispersion energy expression projected on atomic pairs Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:,:) Dispersion energy procedure, public :: get_pairwise_dispersion3 Evaluate pairwise representation of non-additive dispersion energy private  subroutine get_pairwise_dispersion3 (self, mol, trans, cutoff, r4r2, c6, energy) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:,:) Dispersion energy Source Code type , extends ( damping_param ) :: rational_damping_param real ( wp ) :: s6 = 1.0_wp real ( wp ) :: s8 real ( wp ) :: s9 = 1.0_wp real ( wp ) :: a1 real ( wp ) :: a2 real ( wp ) :: alp = 1 6.0_wp contains !> Evaluate pairwise dispersion energy expression procedure :: get_dispersion2 !> Evaluate ATM three-body dispersion energy expression procedure :: get_dispersion3 !> Evaluate pairwise representation of additive dispersion energy procedure :: get_pairwise_dispersion2 !> Evaluate pairwise representation of non-additive dispersion energy procedure :: get_pairwise_dispersion3 end type rational_damping_param","tags":"","url":"type/rational_damping_param.html"},{"title":"functional_group – DFT-D4 ","text":"type, public :: functional_group Group different spellings/names of functionals Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: names (:) Source Code type functional_group character ( len = :), allocatable :: names (:) end type functional_group","tags":"","url":"type/functional_group.html"},{"title":"dispersion_model – DFT-D4 ","text":"type, public, abstract :: dispersion_model Abstract base dispersion model to evaluate C6 coefficients Components Type Visibility Attributes Name Initial real(kind=wp), public, allocatable :: aiw (:,:,:) Reference dynamic polarizabilities real(kind=wp), public, allocatable :: c6 (:,:,:,:) Reference C6 coefficients real(kind=wp), public, allocatable :: cn (:,:) Reference coordination numbers real(kind=wp), public, allocatable :: en (:) Electronegativity real(kind=wp), public, allocatable :: eta (:) Chemical hardness real(kind=wp), public :: ga Charge scaling height real(kind=wp), public :: gc Charge scaling steepness integer, public :: ncoup Number of atoms coupled to by pairwise parameters integer, public, allocatable :: ngw (:,:) Number of Gaussian weights for each reference real(kind=wp), public, allocatable :: q (:,:) Reference partial charges real(kind=wp), public, allocatable :: r4r2 (:) Expectation values for C8 extrapolation real(kind=wp), public, allocatable :: rcov (:) Covalent radii for coordination number integer, public, allocatable :: ref (:) Number of reference systems real(kind=wp), public, allocatable :: zeff (:) Effective nuclear charges Type-Bound Procedures procedure( get_atomic_c6 ), public, deferred :: get_atomic_c6 Evaluate C6 coefficient subroutine get_atomic_c6(self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq) Prototype Calculate atomic dispersion coefficients and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( dispersion_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(out), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(out), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charge procedure( get_polarizabilities ), public, deferred :: get_polarizabilities Evaluate atomic polarizabilities subroutine get_polarizabilities(self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq) Prototype Calculate atomic polarizabilities and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( dispersion_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: alpha (:) Static polarizabilities for all atoms. real(kind=wp), intent(out), optional :: dadcn (:) Derivative of the polarizibility w.r.t. the coordination number real(kind=wp), intent(out), optional :: dadq (:) Derivative of the polarizibility w.r.t. the partial charge procedure( weight_references ), public, deferred :: weight_references Generate weights for all reference systems subroutine weight_references(self, mol, cn, q, gwvec, gwdcn, gwdq) Prototype Calculate the weights of the reference system and the derivatives w.r.t.\ncoordination number for later use. Arguments Type Intent Optional Attributes Name class( dispersion_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: cn (:) Coordination number of every atom: [nat] real(kind=wp), intent(in) :: q (:) Partial charge of every atom: [nat] real(kind=wp), intent(out) :: gwvec (:,:,:) weighting for the atomic reference systems: [nref, nat, ncoup] real(kind=wp), intent(out), optional :: gwdcn (:,:,:) derivative of the weighting function w.r.t. the coordination number: [nref, nat, ncoup] real(kind=wp), intent(out), optional :: gwdq (:,:,:) derivative of the weighting function w.r.t. the charge scaling: [nref, nat, ncoup] Source Code type , abstract :: dispersion_model !> Number of atoms coupled to by pairwise parameters integer :: ncoup !> Charge scaling height real ( wp ) :: ga !> Charge scaling steepness real ( wp ) :: gc !> Effective nuclear charges real ( wp ), allocatable :: zeff (:) !> Chemical hardness real ( wp ), allocatable :: eta (:) !> Electronegativity real ( wp ), allocatable :: en (:) !> Covalent radii for coordination number real ( wp ), allocatable :: rcov (:) !> Expectation values for C8 extrapolation real ( wp ), allocatable :: r4r2 (:) !> Number of reference systems integer , allocatable :: ref (:) !> Number of Gaussian weights for each reference integer , allocatable :: ngw (:, :) !> Reference coordination numbers real ( wp ), allocatable :: cn (:, :) !> Reference partial charges real ( wp ), allocatable :: q (:, :) !> Reference dynamic polarizabilities real ( wp ), allocatable :: aiw (:, :, :) !> Reference C6 coefficients real ( wp ), allocatable :: c6 (:, :, :, :) contains !> Generate weights for all reference systems procedure ( weight_references ), deferred :: weight_references !> Evaluate C6 coefficient procedure ( get_atomic_c6 ), deferred :: get_atomic_c6 !> Evaluate atomic polarizabilities procedure ( get_polarizabilities ), deferred :: get_polarizabilities end type dispersion_model","tags":"","url":"type/dispersion_model.html"},{"title":"enum_ref – DFT-D4 ","text":"type, private :: enum_ref Possible reference charges for D4 Components Type Visibility Attributes Name Initial integer, public :: eeq = 1 Electronegativity equilibration charges integer, public :: gfn2 = 2 GFN2-xTB Mulliken partial charges Source Code type :: enum_ref !> Electronegativity equilibration charges integer :: eeq = 1 !> GFN2-xTB Mulliken partial charges integer :: gfn2 = 2 end type enum_ref","tags":"","url":"type/enum_ref.html"},{"title":"d4_model – DFT-D4 ","text":"type, public, extends( dispersion_model ) :: d4_model D4 dispersion model to evaluate C6 coefficients Components Type Visibility Attributes Name Initial real(kind=wp), public, allocatable :: aiw (:,:,:) Reference dynamic polarizabilities real(kind=wp), public, allocatable :: c6 (:,:,:,:) Reference C6 coefficients real(kind=wp), public, allocatable :: cn (:,:) Reference coordination numbers real(kind=wp), public, allocatable :: en (:) Electronegativity real(kind=wp), public, allocatable :: eta (:) Chemical hardness real(kind=wp), public :: ga Charge scaling height real(kind=wp), public :: gc Charge scaling steepness integer, public :: ncoup Number of atoms coupled to by pairwise parameters integer, public, allocatable :: ngw (:,:) Number of Gaussian weights for each reference real(kind=wp), public, allocatable :: q (:,:) Reference partial charges real(kind=wp), public, allocatable :: r4r2 (:) Expectation values for C8 extrapolation real(kind=wp), public, allocatable :: rcov (:) Covalent radii for coordination number integer, public, allocatable :: ref (:) Number of reference systems real(kind=wp), public :: wf Weighting factor for CN interpolation real(kind=wp), public, allocatable :: zeff (:) Effective nuclear charges Type-Bound Procedures procedure, public :: get_atomic_c6 Evaluate C6 coefficient private  subroutine get_atomic_c6 (self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq) Calculate atomic dispersion coefficients and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( d4_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(out), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(out), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charge procedure, public :: get_polarizabilities Evaluate atomic polarizabilities private  subroutine get_polarizabilities (self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq) Calculate atomic polarizabilities and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( d4_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: alpha (:) Static polarizabilities for all atoms. real(kind=wp), intent(out), optional :: dadcn (:) Derivative of the polarizibility w.r.t. the coordination number real(kind=wp), intent(out), optional :: dadq (:) Derivative of the polarizibility w.r.t. the partial charge procedure, public :: weight_references Generate weights for all reference systems private  subroutine weight_references (self, mol, cn, q, gwvec, gwdcn, gwdq) Calculate the weights of the reference system and the derivatives w.r.t.\ncoordination number for later use. Arguments Type Intent Optional Attributes Name class( d4_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: cn (:) Coordination number of every atom real(kind=wp), intent(in) :: q (:) Partial charge of every atom real(kind=wp), intent(out) :: gwvec (:,:,:) weighting for the atomic reference systems real(kind=wp), intent(out), optional :: gwdcn (:,:,:) derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(out), optional :: gwdq (:,:,:) derivative of the weighting function w.r.t. the charge scaling Source Code type , extends ( dispersion_model ) :: d4_model !> Weighting factor for CN interpolation real ( wp ) :: wf contains !> Generate weights for all reference systems procedure :: weight_references !> Evaluate C6 coefficient procedure :: get_atomic_c6 !> Evaluate atomic polarizabilities procedure :: get_polarizabilities end type d4_model","tags":"","url":"type/d4_model.html"},{"title":"dftd_options – DFT-D4 ","text":"type, public :: dftd_options Components Type Visibility Attributes Name Initial real(kind=wp), public :: g_a real(kind=wp), public :: g_c logical, public :: lenergy logical, public :: lgradient logical, public :: lhessian integer, public :: lmbd = 3 logical, public :: lmolpol integer, public :: print_level integer, public :: refq = 5 real(kind=wp), public :: wf = 6.0_wp","tags":"","url":"type/dftd_options.html"},{"title":"dftd_parameter – DFT-D4 ","text":"type, public :: dftd_parameter Components Type Visibility Attributes Name Initial real(kind=wp), public :: a1 real(kind=wp), public :: a2 real(kind=wp), public :: alp = 16.0_wp real(kind=wp), public :: s6 real(kind=wp), public :: s8 real(kind=wp), public :: s9 = 1.0_wp","tags":"","url":"type/dftd_parameter.html"},{"title":"dftd_results – DFT-D4 ","text":"type, public :: dftd_results Components Type Visibility Attributes Name Initial real(kind=wp), public, allocatable :: energy real(kind=wp), public, allocatable :: gradient (:,:) real(kind=wp), public, allocatable :: lattice_gradient (:,:)","tags":"","url":"type/dftd_results.html"},{"title":"mctc_logger – DFT-D4 ","text":"type, public :: mctc_logger Components Type Visibility Attributes Name Initial logical, public :: sane = .true.","tags":"","url":"type/mctc_logger.html"},{"title":"molecule – DFT-D4 ","text":"type, public :: molecule Components Type Visibility Attributes Name Initial integer, public, allocatable :: at (:) real(kind=wp), public, allocatable :: cellpar (:) real(kind=wp), public, allocatable :: chrg real(kind=wp), public, allocatable :: lattice (:,:) integer, public, allocatable :: npbc logical, public, allocatable :: pbc real(kind=wp), public, allocatable :: rec_lat (:,:) real(kind=wp), public, allocatable :: volume type( ws_cell ), public :: wsc real(kind=wp), public, allocatable :: xyz (:,:) Type-Bound Procedures procedure, public :: allocate private  subroutine allocate (self, n, l) Arguments Type Intent Optional Attributes Name class( molecule ), intent(inout) :: self integer, intent(in) :: n logical, intent(in) :: l procedure, public :: calculate_distances private  subroutine calculate_distances (self) Arguments Type Intent Optional Attributes Name class( molecule ), intent(inout) :: self procedure, public :: wrap_back private  subroutine wrap_back (self) Arguments Type Intent Optional Attributes Name class( molecule ), intent(inout) :: self","tags":"","url":"type/molecule.html"},{"title":"ws_cell – DFT-D4 ","text":"type, public :: ws_cell","tags":"","url":"type/ws_cell.html"},{"title":"realspace_cutoff – DFT-D4 ","text":"type, public :: realspace_cutoff sequence Collection of real space cutoffs Components Type Visibility Attributes Name Initial real(kind=wp), public :: cn = cn_default Coordination number cutoff real(kind=wp), public :: disp2 = disp2_default Two-body interaction cutoff real(kind=wp), public :: disp3 = disp3_default Three-body interaction cutoff Source Code type :: realspace_cutoff sequence !> Coordination number cutoff real ( wp ) :: cn = cn_default !> Two-body interaction cutoff real ( wp ) :: disp2 = disp2_default !> Three-body interaction cutoff real ( wp ) :: disp3 = disp3_default end type realspace_cutoff","tags":"","url":"type/realspace_cutoff.html"},{"title":"damping_param – DFT-D4 ","text":"type, public, abstract :: damping_param Type-Bound Procedures procedure( dispersion_interface ), public, deferred :: get_dispersion2 subroutine dispersion_interface(self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Prototype Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial procedure( dispersion_interface ), public, deferred :: get_dispersion3 subroutine dispersion_interface(self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Prototype Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial procedure( pairwise_dispersion_interface ), public, deferred :: get_pairwise_dispersion2 subroutine pairwise_dispersion_interface(self, mol, trans, cutoff, r4r2, c6, energy) Prototype Evaluation of the pairwise representation of the dispersion energy Arguments Type Intent Optional Attributes Name class( damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:,:) Pairwise representation of the dispersion energy procedure( pairwise_dispersion_interface ), public, deferred :: get_pairwise_dispersion3 subroutine pairwise_dispersion_interface(self, mol, trans, cutoff, r4r2, c6, energy) Prototype Evaluation of the pairwise representation of the dispersion energy Arguments Type Intent Optional Attributes Name class( damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:,:) Pairwise representation of the dispersion energy Source Code type , abstract :: damping_param contains procedure ( dispersion_interface ), deferred :: get_dispersion2 procedure ( dispersion_interface ), deferred :: get_dispersion3 procedure ( pairwise_dispersion_interface ), deferred :: get_pairwise_dispersion2 procedure ( pairwise_dispersion_interface ), deferred :: get_pairwise_dispersion3 end type damping_param","tags":"","url":"type/damping_param.html"},{"title":"vp_error – DFT-D4 ","text":"type, public :: vp_error Void pointer to error handle Components Type Visibility Attributes Name Initial type(error_type), public, allocatable :: ptr Actual payload Source Code type :: vp_error !> Actual payload type ( error_type ), allocatable :: ptr end type vp_error","tags":"","url":"type/vp_error.html"},{"title":"vp_model – DFT-D4 ","text":"type, public :: vp_model Void pointer to dispersion model Components Type Visibility Attributes Name Initial class( dispersion_model ), public, allocatable :: ptr Actual payload Source Code type :: vp_model !> Actual payload class ( dispersion_model ), allocatable :: ptr end type vp_model","tags":"","url":"type/vp_model.html"},{"title":"vp_param – DFT-D4 ","text":"type, public :: vp_param Void pointer to damping parameters Components Type Visibility Attributes Name Initial class( damping_param ), public, allocatable :: ptr Actual payload Source Code type :: vp_param !> Actual payload class ( damping_param ), allocatable :: ptr end type vp_param","tags":"","url":"type/vp_param.html"},{"title":"vp_structure – DFT-D4 ","text":"type, public :: vp_structure Void pointer to molecular structure data Components Type Visibility Attributes Name Initial type(structure_type), public :: ptr Actual payload Source Code type :: vp_structure !> Actual payload type ( structure_type ) :: ptr end type vp_structure","tags":"","url":"type/vp_structure.html"},{"title":"d4s_model – DFT-D4 ","text":"type, public, extends( dispersion_model ) :: d4s_model D4S dispersion model to evaluate C6 coefficients Components Type Visibility Attributes Name Initial real(kind=wp), public, allocatable :: aiw (:,:,:) Reference dynamic polarizabilities real(kind=wp), public, allocatable :: c6 (:,:,:,:) Reference C6 coefficients real(kind=wp), public, allocatable :: cn (:,:) Reference coordination numbers real(kind=wp), public, allocatable :: en (:) Electronegativity real(kind=wp), public, allocatable :: eta (:) Chemical hardness real(kind=wp), public :: ga Charge scaling height real(kind=wp), public :: gc Charge scaling steepness integer, public :: ncoup Number of atoms coupled to by pairwise parameters integer, public, allocatable :: ngw (:,:) Number of Gaussian weights for each reference real(kind=wp), public, allocatable :: q (:,:) Reference partial charges real(kind=wp), public, allocatable :: r4r2 (:) Expectation values for C8 extrapolation real(kind=wp), public, allocatable :: rcov (:) Covalent radii for coordination number integer, public, allocatable :: ref (:) Number of reference systems real(kind=wp), public, allocatable :: wf (:,:) Weighting factors for CN interpolation real(kind=wp), public, allocatable :: zeff (:) Effective nuclear charges Type-Bound Procedures procedure, public :: get_atomic_c6 Evaluate C6 coefficient private  subroutine get_atomic_c6 (self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq) Calculate atomic dispersion coefficients and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( d4s_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Pairwise weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the pairwise weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the pairwise weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(out), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(out), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charge procedure, public :: get_polarizabilities Evaluate atomic polarizabilities private  subroutine get_polarizabilities (self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq) Calculate atomic polarizabilities and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( d4s_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Pairwise weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the pairwise weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the pairwise weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: alpha (:) Static polarizabilities for all atoms. real(kind=wp), intent(out), optional :: dadcn (:) Derivative of the polarizibility w.r.t. the coordination number real(kind=wp), intent(out), optional :: dadq (:) Derivative of the polarizibility w.r.t. the partial charge procedure, public :: weight_references Generate weights for all reference systems private  subroutine weight_references (self, mol, cn, q, gwvec, gwdcn, gwdq) Calculate the weights of the reference system and the derivatives w.r.t.\ncoordination number for later use. Arguments Type Intent Optional Attributes Name class( d4s_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: cn (:) Coordination number of every atom real(kind=wp), intent(in) :: q (:) Partial charge of every atom real(kind=wp), intent(out) :: gwvec (:,:,:) Pairwise weighting for the atomic reference systems real(kind=wp), intent(out), optional :: gwdcn (:,:,:) derivative of the pairwise weighting function w.r.t. the coordination number real(kind=wp), intent(out), optional :: gwdq (:,:,:) derivative of the pairwise weighting function w.r.t. the charge scaling Source Code type , extends ( dispersion_model ) :: d4s_model !> Weighting factors for CN interpolation real ( wp ), allocatable :: wf (:, :) contains !> Generate weights for all reference systems procedure :: weight_references !> Evaluate C6 coefficient procedure :: get_atomic_c6 !> Evaluate atomic polarizabilities procedure :: get_polarizabilities end type d4s_model","tags":"","url":"type/d4s_model.html"},{"title":"get_atomic_c6 – DFT-D4","text":"interface private  subroutine get_atomic_c6(self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq) Arguments Type Intent Optional Attributes Name class( dispersion_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(out), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(out), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charge Description Calculate atomic dispersion coefficients and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges.","tags":"","url":"interface/get_atomic_c6.html"},{"title":"get_polarizabilities – DFT-D4","text":"interface private  subroutine get_polarizabilities(self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq) Arguments Type Intent Optional Attributes Name class( dispersion_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: alpha (:) Static polarizabilities for all atoms. real(kind=wp), intent(out), optional :: dadcn (:) Derivative of the polarizibility w.r.t. the coordination number real(kind=wp), intent(out), optional :: dadq (:) Derivative of the polarizibility w.r.t. the partial charge Description Calculate atomic polarizabilities and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges.","tags":"","url":"interface/get_polarizabilities.html"},{"title":"weight_references – DFT-D4","text":"interface private  subroutine weight_references(self, mol, cn, q, gwvec, gwdcn, gwdq) Arguments Type Intent Optional Attributes Name class( dispersion_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: cn (:) Coordination number of every atom: [nat] real(kind=wp), intent(in) :: q (:) Partial charge of every atom: [nat] real(kind=wp), intent(out) :: gwvec (:,:,:) weighting for the atomic reference systems: [nref, nat, ncoup] real(kind=wp), intent(out), optional :: gwdcn (:,:,:) derivative of the weighting function w.r.t. the coordination number: [nref, nat, ncoup] real(kind=wp), intent(out), optional :: gwdq (:,:,:) derivative of the weighting function w.r.t. the charge scaling: [nref, nat, ncoup] Description Calculate the weights of the reference system and the derivatives w.r.t.\ncoordination number for later use.","tags":"","url":"interface/weight_references.html"},{"title":"dispersion_interface – DFT-D4","text":"interface public  subroutine dispersion_interface(self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Arguments Type Intent Optional Attributes Name class( damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial Description Evaluation of the dispersion energy expression","tags":"","url":"interface/dispersion_interface.html"},{"title":"pairwise_dispersion_interface – DFT-D4","text":"interface public  subroutine pairwise_dispersion_interface(self, mol, trans, cutoff, r4r2, c6, energy) Arguments Type Intent Optional Attributes Name class( damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:,:) Pairwise representation of the dispersion energy Description Evaluation of the pairwise representation of the dispersion energy","tags":"","url":"interface/pairwise_dispersion_interface.html"},{"title":"generate_wsc – DFT-D4","text":"subroutine generate_wsc(mol, wsc) Uses dftd4_compat Arguments Type Intent Optional Attributes Name type( molecule ), intent(inout) :: mol type( ws_cell ), intent(inout) :: wsc Source Code subroutine generate_wsc ( mol , wsc ) use dftd4_compat , only : molecule , ws_cell type ( molecule ), intent ( inout ) :: mol type ( ws_cell ), intent ( inout ) :: wsc end subroutine generate_wsc","tags":"","url":"proc/generate_wsc.html"},{"title":"get_electronegativity_num – DFT-D4","text":"private elemental function get_electronegativity_num(num) result(en) Get electronegativity for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Electronegativity Source Code elemental function get_electronegativity_num ( num ) result ( en ) !DEC$ ATTRIBUTES DLLEXPORT :: get_electronegativity_num !> Atomic number integer , intent ( in ) :: num !> Electronegativity real ( wp ) :: en if ( num > 0 . and . num <= size ( pauling_en )) then en = pauling_en ( num ) else en = 0.0_wp end if end function get_electronegativity_num","tags":"","url":"proc/get_electronegativity_num.html"},{"title":"get_electronegativity_sym – DFT-D4","text":"private elemental function get_electronegativity_sym(sym) result(en) Get electronegativity for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Electronegativity Source Code elemental function get_electronegativity_sym ( sym ) result ( en ) !DEC$ ATTRIBUTES DLLEXPORT :: get_electronegativity_sym !> Element symbol character ( len =* ), intent ( in ) :: sym !> Electronegativity real ( wp ) :: en en = get_electronegativity ( to_number ( sym )) end function get_electronegativity_sym","tags":"","url":"proc/get_electronegativity_sym.html"},{"title":"get_electronegativity – DFT-D4","text":"public interface get_electronegativity Module Procedures private elemental function get_electronegativity_num (num) result(en) Get electronegativity for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Electronegativity private elemental function get_electronegativity_sym (sym) result(en) Get electronegativity for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Electronegativity","tags":"","url":"interface/get_electronegativity.html"},{"title":"triple_scale – DFT-D4","text":"private elemental function triple_scale(ii, jj, kk) result(triple) Logic exercise to distribute a triple energy to atomwise energies. Arguments Type Intent Optional Attributes Name integer, intent(in) :: ii Atom indices integer, intent(in) :: jj Atom indices integer, intent(in) :: kk Atom indices Return Value real(kind=wp) Fraction of energy Source Code elemental function triple_scale ( ii , jj , kk ) result ( triple ) !> Atom indices integer , intent ( in ) :: ii , jj , kk !> Fraction of energy real ( wp ) :: triple if ( ii == jj ) then if ( ii == kk ) then ! ii'i\" -> 1/6 triple = 1.0_wp / 6.0_wp else ! ii'j -> 1/2 triple = 0.5_wp end if else if ( ii /= kk . and . jj /= kk ) then ! ijk -> 1 (full) triple = 1.0_wp else ! ijj' and iji' -> 1/2 triple = 0.5_wp end if end if end function triple_scale","tags":"","url":"proc/triple_scale.html"},{"title":"get_dispersion2 – DFT-D4","text":"private  subroutine get_dispersion2(self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Type Bound rational_damping_param Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial Source Code subroutine get_dispersion2 ( self , mol , trans , cutoff , r4r2 , c6 , dc6dcn , dc6dq , & & energy , dEdcn , dEdq , gradient , sigma ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dispersion2 !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ), optional :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ), optional :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ), optional :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ), optional :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ), optional :: sigma (:, :) logical :: grad if ( abs ( self % s6 ) < epsilon ( 1.0_wp ) . and . abs ( self % s8 ) < epsilon ( 1.0_wp )) return grad = present ( dc6dcn ) . and . present ( dEdcn ) . and . present ( dc6dq ) & & . and . present ( dEdq ) . and . present ( gradient ) . and . present ( sigma ) if ( grad ) then call get_dispersion_derivs ( self , mol , trans , cutoff , r4r2 , c6 , dc6dcn , dc6dq , & & energy , dEdcn , dEdq , gradient , sigma ) else call get_dispersion_energy ( self , mol , trans , cutoff , r4r2 , c6 , energy ) end if end subroutine get_dispersion2","tags":"","url":"proc/get_dispersion2.html"},{"title":"get_dispersion3 – DFT-D4","text":"private  subroutine get_dispersion3(self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Type Bound rational_damping_param Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial Source Code subroutine get_dispersion3 ( self , mol , trans , cutoff , r4r2 , c6 , dc6dcn , dc6dq , & & energy , dEdcn , dEdq , gradient , sigma ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dispersion3 !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ), optional :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ), optional :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ), optional :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ), optional :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ), optional :: sigma (:, :) call get_atm_dispersion ( mol , trans , cutoff , self % s9 , self % a1 , self % a2 , & & self % alp , r4r2 , c6 , dc6dcn , dc6dq , energy , dEdcn , dEdq , & & gradient , sigma ) end subroutine get_dispersion3","tags":"","url":"proc/get_dispersion3.html"},{"title":"get_dispersion_derivs – DFT-D4","text":"private  subroutine get_dispersion_derivs(self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in) :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in) :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout) :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout) :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout) :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout) :: sigma (:,:) Dispersion virial Source Code subroutine get_dispersion_derivs ( self , mol , trans , cutoff , r4r2 , c6 , dc6dcn , dc6dq , & & energy , dEdcn , dEdq , gradient , sigma ) !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ) :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ) :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ) :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ) :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ) :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ) :: sigma (:, :) integer :: iat , jat , izp , jzp , jtr real ( wp ) :: vec ( 3 ), r2 , cutoff2 , r0ij , rrij , c6ij , t6 , t8 , d6 , d8 , edisp , gdisp real ( wp ) :: dE , dG ( 3 ), dS ( 3 , 3 ) ! Thread-private arrays for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:) real ( wp ), allocatable :: dEdcn_local (:) real ( wp ), allocatable :: dEdq_local (:) real ( wp ), allocatable :: gradient_local (:, :) real ( wp ), allocatable :: sigma_local (:, :) cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, self, c6, dc6dcn, dc6dq, trans, cutoff2, r4r2) & !$omp private(iat, jat, izp, jzp, jtr, vec, r2, r0ij, rrij, c6ij, t6, t8, & !$omp& d6, d8, edisp, gdisp, dE, dG, dS) & !$omp shared(energy, gradient, sigma, dEdcn, dEdq) & !$omp private(energy_local, gradient_local, sigma_local, dEdcn_local, & !$omp& dEdq_local) allocate ( energy_local ( size ( energy , 1 )), source = 0.0_wp ) allocate ( dEdcn_local ( size ( dEdcn , 1 )), source = 0.0_wp ) allocate ( dEdq_local ( size ( dEdq , 1 )), source = 0.0_wp ) allocate ( gradient_local ( size ( gradient , 1 ), size ( gradient , 2 )), source = 0.0_wp ) allocate ( sigma_local ( size ( sigma , 1 ), size ( sigma , 2 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) rrij = 3 * r4r2 ( izp ) * r4r2 ( jzp ) r0ij = self % a1 * sqrt ( rrij ) + self % a2 c6ij = c6 ( jat , iat ) do jtr = 1 , size ( trans , 2 ) vec (:) = mol % xyz (:, iat ) - ( mol % xyz (:, jat ) + trans (:, jtr )) r2 = vec ( 1 ) * vec ( 1 ) + vec ( 2 ) * vec ( 2 ) + vec ( 3 ) * vec ( 3 ) if ( r2 > cutoff2 . or . r2 < epsilon ( 1.0_wp )) cycle t6 = 1.0_wp / ( r2 ** 3 + r0ij ** 6 ) t8 = 1.0_wp / ( r2 ** 4 + r0ij ** 8 ) d6 = - 6 * r2 ** 2 * t6 ** 2 d8 = - 8 * r2 ** 3 * t8 ** 2 edisp = self % s6 * t6 + self % s8 * rrij * t8 gdisp = self % s6 * d6 + self % s8 * rrij * d8 dE = - c6ij * edisp * 0.5_wp dG (:) = - c6ij * gdisp * vec dS (:, :) = spread ( dG , 1 , 3 ) * spread ( vec , 2 , 3 ) * 0.5_wp energy_local ( iat ) = energy_local ( iat ) + dE dEdcn_local ( iat ) = dEdcn_local ( iat ) - dc6dcn ( iat , jat ) * edisp dEdq_local ( iat ) = dEdq_local ( iat ) - dc6dq ( iat , jat ) * edisp sigma_local (:, :) = sigma_local + dS if ( iat /= jat ) then energy_local ( jat ) = energy_local ( jat ) + dE dEdcn_local ( jat ) = dEdcn_local ( jat ) - dc6dcn ( jat , iat ) * edisp dEdq_local ( jat ) = dEdq_local ( jat ) - dc6dq ( jat , iat ) * edisp gradient_local (:, iat ) = gradient_local (:, iat ) + dG gradient_local (:, jat ) = gradient_local (:, jat ) - dG sigma_local (:, :) = sigma_local + dS end if end do end do end do !$omp end do !$omp critical (get_dispersion_derivs_) energy (:) = energy (:) + energy_local (:) dEdcn (:) = dEdcn (:) + dEdcn_local (:) dEdq (:) = dEdq (:) + dEdq_local (:) gradient (:, :) = gradient (:, :) + gradient_local (:, :) sigma (:, :) = sigma (:, :) + sigma_local (:, :) !$omp end critical (get_dispersion_derivs_) deallocate ( energy_local ) deallocate ( dEdcn_local ) deallocate ( dEdq_local ) deallocate ( gradient_local ) deallocate ( sigma_local ) !$omp end parallel end subroutine get_dispersion_derivs","tags":"","url":"proc/get_dispersion_derivs.html"},{"title":"get_dispersion_energy – DFT-D4","text":"private  subroutine get_dispersion_energy(self, mol, trans, cutoff, r4r2, c6, energy) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:) Dispersion energy Source Code subroutine get_dispersion_energy ( self , mol , trans , cutoff , r4r2 , c6 , energy ) !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) integer :: iat , jat , izp , jzp , jtr real ( wp ) :: vec ( 3 ), r2 , cutoff2 , r0ij , rrij , c6ij , t6 , t8 , edisp , dE ! Thread-private array for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:) cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, self, c6, trans, cutoff2, r4r2) & !$omp private(iat, jat, izp, jzp, jtr, vec, r2, r0ij, rrij, c6ij, & !$omp& t6, t8, edisp, dE) & !$omp shared(energy) & !$omp private(energy_local) allocate ( energy_local ( size ( energy , 1 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) rrij = 3 * r4r2 ( izp ) * r4r2 ( jzp ) r0ij = self % a1 * sqrt ( rrij ) + self % a2 c6ij = c6 ( jat , iat ) do jtr = 1 , size ( trans , 2 ) vec (:) = mol % xyz (:, iat ) - ( mol % xyz (:, jat ) + trans (:, jtr )) r2 = vec ( 1 ) * vec ( 1 ) + vec ( 2 ) * vec ( 2 ) + vec ( 3 ) * vec ( 3 ) if ( r2 > cutoff2 . or . r2 < epsilon ( 1.0_wp )) cycle t6 = 1.0_wp / ( r2 ** 3 + r0ij ** 6 ) t8 = 1.0_wp / ( r2 ** 4 + r0ij ** 8 ) edisp = self % s6 * t6 + self % s8 * rrij * t8 dE = - c6ij * edisp * 0.5_wp energy_local ( iat ) = energy_local ( iat ) + dE if ( iat /= jat ) then energy_local ( jat ) = energy_local ( jat ) + dE end if end do end do end do !$omp end do !$omp critical (get_dispersion_energy_) energy (:) = energy (:) + energy_local (:) !$omp end critical (get_dispersion_energy_) deallocate ( energy_local ) !$omp end parallel end subroutine get_dispersion_energy","tags":"","url":"proc/get_dispersion_energy.html"},{"title":"get_pairwise_dispersion2 – DFT-D4","text":"private  subroutine get_pairwise_dispersion2(self, mol, trans, cutoff, r4r2, c6, energy) Evaluation of the dispersion energy expression projected on atomic pairs Type Bound rational_damping_param Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:,:) Dispersion energy Source Code subroutine get_pairwise_dispersion2 ( self , mol , trans , cutoff , r4r2 , c6 , energy ) !DEC$ ATTRIBUTES DLLEXPORT :: get_pairwise_dispersion2 !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:, :) integer :: iat , jat , izp , jzp , jtr real ( wp ) :: vec ( 3 ), r2 , cutoff2 , r0ij , rrij , c6ij , t6 , t8 , edisp , dE ! Thread-private array for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:, :) if ( abs ( self % s6 ) < epsilon ( 1.0_wp ) . and . abs ( self % s8 ) < epsilon ( 1.0_wp )) return cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, self, c6, trans, cutoff2, r4r2) & !$omp private(iat, jat, izp, jzp, jtr, vec, r2, r0ij, rrij, c6ij, & !$omp& t6, t8, edisp, dE) & !$omp shared(energy) & !$omp private(energy_local) allocate ( energy_local ( size ( energy , 1 ), size ( energy , 2 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) rrij = 3 * r4r2 ( izp ) * r4r2 ( jzp ) r0ij = self % a1 * sqrt ( rrij ) + self % a2 c6ij = c6 ( jat , iat ) do jtr = 1 , size ( trans , 2 ) vec (:) = mol % xyz (:, iat ) - ( mol % xyz (:, jat ) + trans (:, jtr )) r2 = vec ( 1 ) * vec ( 1 ) + vec ( 2 ) * vec ( 2 ) + vec ( 3 ) * vec ( 3 ) if ( r2 > cutoff2 . or . r2 < epsilon ( 1.0_wp )) cycle t6 = 1.0_wp / ( r2 ** 3 + r0ij ** 6 ) t8 = 1.0_wp / ( r2 ** 4 + r0ij ** 8 ) edisp = self % s6 * t6 + self % s8 * rrij * t8 dE = - c6ij * edisp * 0.5_wp energy_local ( jat , iat ) = energy_local ( jat , iat ) + dE if ( iat /= jat ) then energy_local ( iat , jat ) = energy_local ( iat , jat ) + dE end if end do end do end do !$omp end do !$omp critical (get_pairwise_dispersion2_) energy (:, :) = energy (:, :) + energy_local (:, :) !$omp end critical (get_pairwise_dispersion2_) deallocate ( energy_local ) !$omp end parallel end subroutine get_pairwise_dispersion2","tags":"","url":"proc/get_pairwise_dispersion2.html"},{"title":"get_pairwise_dispersion3 – DFT-D4","text":"private  subroutine get_pairwise_dispersion3(self, mol, trans, cutoff, r4r2, c6, energy) Evaluation of the dispersion energy expression Type Bound rational_damping_param Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:,:) Dispersion energy Source Code subroutine get_pairwise_dispersion3 ( self , mol , trans , cutoff , r4r2 , c6 , energy ) !DEC$ ATTRIBUTES DLLEXPORT :: get_pairwise_dispersion3 !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:, :) integer :: iat , jat , kat , izp , jzp , kzp , jtr , ktr real ( wp ) :: vij ( 3 ), vjk ( 3 ), vik ( 3 ), r2ij , r2jk , r2ik , c6ij , c6jk , c6ik , triple real ( wp ) :: r0ij , r0jk , r0ik , r0 , r1 , r2 , r3 , r5 , rr , fdmp , ang real ( wp ) :: cutoff2 , c9 , dE ! Thread-private arrays for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:, :) if ( abs ( self % s9 ) < epsilon ( 1.0_wp )) return cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, trans, c6, r4r2, cutoff2, self) & !$omp private(iat, jat, kat, izp, jzp, kzp, jtr, ktr, vij, vjk, vik, & !$omp& r2ij, r2jk, r2ik, c6ij, c6jk, c6ik, triple, r0ij, r0jk, r0ik, r0, & !$omp& r1, r2, r3, r5, rr, fdmp, ang, c9, dE) & !$omp shared(energy) & !$omp private(energy_local) allocate ( energy_local ( size ( energy , 1 ), size ( energy , 2 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) c6ij = c6 ( jat , iat ) r0ij = self % a1 * sqrt ( 3 * r4r2 ( jzp ) * r4r2 ( izp )) + self % a2 do jtr = 1 , size ( trans , 2 ) vij (:) = mol % xyz (:, jat ) + trans (:, jtr ) - mol % xyz (:, iat ) r2ij = vij ( 1 ) * vij ( 1 ) + vij ( 2 ) * vij ( 2 ) + vij ( 3 ) * vij ( 3 ) if ( r2ij > cutoff2 . or . r2ij < epsilon ( 1.0_wp )) cycle do kat = 1 , jat kzp = mol % id ( kat ) c6ik = c6 ( kat , iat ) c6jk = c6 ( kat , jat ) c9 = - self % s9 * sqrt ( abs ( c6ij * c6ik * c6jk )) r0ik = self % a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( izp )) + self % a2 r0jk = self % a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( jzp )) + self % a2 r0 = r0ij * r0ik * r0jk triple = triple_scale ( iat , jat , kat ) do ktr = 1 , size ( trans , 2 ) vik (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, iat ) r2ik = vik ( 1 ) * vik ( 1 ) + vik ( 2 ) * vik ( 2 ) + vik ( 3 ) * vik ( 3 ) if ( r2ik > cutoff2 . or . r2ik < epsilon ( 1.0_wp )) cycle vjk (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, jat ) & & - trans (:, jtr ) r2jk = vjk ( 1 ) * vjk ( 1 ) + vjk ( 2 ) * vjk ( 2 ) + vjk ( 3 ) * vjk ( 3 ) if ( r2jk > cutoff2 . or . r2jk < epsilon ( 1.0_wp )) cycle r2 = r2ij * r2ik * r2jk r1 = sqrt ( r2 ) r3 = r2 * r1 r5 = r3 * r2 fdmp = 1.0_wp / ( 1.0_wp + 6.0_wp * ( r0 / r1 ) ** ( self % alp / 3.0_wp )) ang = 0.375_wp * ( r2ij + r2jk - r2ik ) * ( r2ij - r2jk + r2ik )& & * ( - r2ij + r2jk + r2ik ) / r5 + 1.0_wp / r3 rr = ang * fdmp dE = rr * c9 * triple / 6 energy_local ( jat , iat ) = energy_local ( jat , iat ) - dE energy_local ( kat , iat ) = energy_local ( kat , iat ) - dE energy_local ( iat , jat ) = energy_local ( iat , jat ) - dE energy_local ( kat , jat ) = energy_local ( kat , jat ) - dE energy_local ( iat , kat ) = energy_local ( iat , kat ) - dE energy_local ( jat , kat ) = energy_local ( jat , kat ) - dE end do end do end do end do end do !$omp end do !$omp critical (get_pairwise_dispersion3_) energy (:, :) = energy (:, :) + energy_local (:, :) !$omp end critical (get_pairwise_dispersion3_) deallocate ( energy_local ) !$omp end parallel end subroutine get_pairwise_dispersion3","tags":"","url":"proc/get_pairwise_dispersion3.html"},{"title":"get_effective_charge_num – DFT-D4","text":"private elemental function get_effective_charge_num(num) result(zeff) Get effective nuclear charge for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Effective nuclear charge Source Code elemental function get_effective_charge_num ( num ) result ( zeff ) !> Atomic number integer , intent ( in ) :: num !> Effective nuclear charge real ( wp ) :: zeff if ( num > 0 . and . num <= size ( effective_nuclear_charge )) then zeff = effective_nuclear_charge ( num ) else zeff = 0.0_wp end if end function get_effective_charge_num","tags":"","url":"proc/get_effective_charge_num.html"},{"title":"get_effective_charge_sym – DFT-D4","text":"private elemental function get_effective_charge_sym(sym) result(zeff) Get effective nuclear charge for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Effective nuclear charge Source Code elemental function get_effective_charge_sym ( sym ) result ( zeff ) !> Element symbol character ( len =* ), intent ( in ) :: sym !> Effective nuclear charge real ( wp ) :: zeff zeff = get_effective_charge ( to_number ( sym )) end function get_effective_charge_sym","tags":"","url":"proc/get_effective_charge_sym.html"},{"title":"get_effective_charge – DFT-D4","text":"public interface get_effective_charge Module Procedures private elemental function get_effective_charge_num (num) result(zeff) Get effective nuclear charge for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Effective nuclear charge private elemental function get_effective_charge_sym (sym) result(zeff) Get effective nuclear charge for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Effective nuclear charge","tags":"","url":"interface/get_effective_charge.html"},{"title":"get_functional_id – DFT-D4","text":"public pure function get_functional_id(df) result(num) Get the unique identifier for most functionals, returns none if\nthe functional was not known at the time I implemented this mapping Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: df Return Value integer(kind=df_enum) Source Code pure function get_functional_id ( df ) result ( num ) integer ( df_enum ) :: num character ( len =* ), intent ( in ) :: df select case ( df ) case default num = p_invalid case ( 'hf' ) num = p_hf case ( 'am05' , 'gga_x_am05:gga_c_am05' ) num = p_am05 case ( 'b-lyp' , 'blyp' , 'gga_x_b88:gga_c_lyp' ) num = p_blyp case ( 'bpbe' , 'gga_x_b88:gga_c_pbe' ) num = p_bpbe case ( 'b-p' , 'bp86' , 'bp' , 'b-p86' , 'gga_x_b88:gga_c_p86' ) num = p_bp case ( 'bpw' , 'b-pw' , 'gga_x_b88:gga_c_pw91' ) num = p_bpw case ( 'lb94' , 'gga_x_lb' ) ! no gga_c_lb num = p_lb94 case ( 'mpwlyp' , 'mpw-lyp' , 'gga_x_mpw91:gga_c_lyp' ) num = p_mpwlyp case ( 'mpwpw' , 'mpw-pw' , 'mpwpw91' , 'gga_x_mpw91:gga_c_pw91' ) num = p_mpwpw case ( 'o-lyp' , 'olyp' , 'gga_x_optx:gga_c_lyp' ) num = p_olyp case ( 'opbe' , 'gga_x_optx:gga_c_pbe' ) num = p_opbe case ( 'pbe' , 'gga_x_pbe:gga_c_pbe' ) num = p_pbe case ( 'rpbe' , 'gga_x_rpbe:gga_c_pbe' ) num = p_rpbe case ( 'revpbe' , 'gga_x_pbe_r:gga_c_pbe' ) num = p_revpbe case ( 'pbesol' , 'gga_x_pbe_sol:gga_c_pbe_sol' ) num = p_pbesol case ( 'pw86pbe' , 'gga_x_pw86:gga_c_pbe' ) num = p_pw86pbe case ( 'rpw86pbe' , 'gga_x_rpw86:gga_c_pbe' ) num = p_rpw86pbe case ( 'pw91' , 'gga_x_pw91:gga_c_pw91' ) num = p_pw91 case ( 'pwp' , 'pw-p' , 'pw91p86' , 'gga_x_pw91:gga_c_p86' ) num = p_pwp case ( 'x-lyp' , 'xlyp' , 'gga_xc_xlyp' ) num = p_xlyp case ( 'b97' , 'hyb_gga_xc_b97' ) num = p_b97 case ( 'b97d' , 'gga_xc_b97_d' ) num = p_b97d case ( 'tpss' , 'mgga_c_tpss:mgga_x_tpss' ) num = p_tpss case ( 'revtpss' , 'mgga_c_revtpss:mgga_x_revtpss' ) num = p_revtpss case ( 'scan' , 'mgga_x_scan:mgga_c_scan' ) num = p_scan case ( 'rscan' , 'mgga_x_rscan:mgga_c_rscan' ) num = p_rscan case ( 'r2scan' , 'r²scan' , 'mgga_x_r2scan:mgga_c_r2scan' ) num = p_r2scan case ( 'r2scanh' , 'r²scanh' , 'hyb_mgga_xc_r2scanh' ) num = p_r2scanh case ( 'r2scan0' , 'r²scan0' , 'hyb_mgga_xc_r2scan0' ) num = p_r2scan0 case ( 'r2scan50' , 'r²scan50' , 'hyb_mgga_xc_r2scan50' ) num = p_r2scan50 case ( 'r2scan-3c' , 'r²scan-3c' , 'r2scan_3c' , 'r²scan_3c' , 'r2scan3c' ) num = p_r2scan_3c case ( 'b1lyp' , 'b1-lyp' , 'hyb_gga_xc_b1lyp' ) num = p_b1lyp case ( 'b3-lyp' , 'b3lyp' , 'hyb_gga_xc_b3lyp' , 'hyb_gga_xc_b3lyp3' , 'hyb_gga_xc_b3lyp5' ) num = p_b3lyp case ( 'bh-lyp' , 'bhlyp' , 'hyb_gga_xc_bhandh' , 'hyb_gga_xc_bhandhlyp' ) num = p_bhlyp case ( 'b1p' , 'b1-p' , 'b1p86' ) ! 0.75 b88 + 0.25 hf; p86 (nonloc) + pw81 (loc) num = p_b1p case ( 'b3p' , 'b3-p' , 'b3p86' , 'hyb_gga_xc_b3p86' , 'hyb_gga_xc_b3p86_nwchem' ) num = p_b3p case ( 'b1pw' , 'b1-pw' , 'b1pw91' , 'hyb_gga_xc_b1pw91' ) num = p_b1pw case ( 'b3pw' , 'b3-pw' , 'b3pw91' , 'hyb_gga_xc_b3pw91' ) num = p_b3pw case ( 'o3-lyp' , 'o3lyp' , 'hyb_gga_xc_o3lyp' ) num = p_o3lyp case ( 'revpbe0' ) ! no libxc num = p_revpbe0 case ( 'revpbe38' ) ! no libxc num = p_revpbe38 case ( 'pbe0' , 'hyb_gga_xc_pbeh' ) num = p_pbe0 case ( 'pwp1' ) ! no libxc num = p_pwp1 case ( 'pw1pw' , 'pw1-pw' ) ! no libxc num = p_pw1pw case ( 'mpw1pw' , 'mpw1-pw' , 'mpw1pw91' , 'hyb_gga_xc_mpw1pw' ) num = p_mpw1pw case ( 'mpw1lyp' , 'mpw1-lyp' , 'hyb_gga_xc_mpw1lyp' ) num = p_mpw1lyp case ( 'pw6b95' , 'hyb_mgga_xc_pw6b95' ) num = p_pw6b95 case ( 'tpssh' , 'hyb_mgga_xc_tpssh' ) num = p_tpssh case ( 'tpss0' , 'hyb_mgga_xc_tpss0' ) num = p_tpss0 case ( 'x3-lyp' , 'x3lyp' , 'hyb_gga_xc_x3lyp' ) num = p_x3lyp case ( 'm06' , 'mgga_x_m06:mgga_c_m06' ) num = p_m06 case ( 'm06l' , 'mgga_x_m06_l:mgga_c_m06_l' ) num = p_m06l case ( 'mn12sx' , 'mn12-sx' , 'mgga_c_mn12_sx:mgga_c_mn12_sx' ) num = p_mn12sx case ( 'cam-b3lyp' , 'camb3lyp' , 'hyb_gga_xc_cam_b3lyp' ) num = p_camb3lyp case ( 'cam-qtp01' , 'camqtp01' , 'camqtp(01)' , 'cam-qtp(01)' , & & 'hyb_gga_xc_cam_qtp_01' ) num = p_camqtp01 case ( 'lc-blyp' , 'lcblyp' , 'hyb_gga_xc_lc_blyp' ) num = p_lcblyp case ( 'lc-wpbe' , 'lcwpbe' , 'lc-ωpbe' , 'lcωpbe' , 'lc-omegapbe' , 'lcomegapbe' , & & 'hyb_gga_xc_lc_wpbe' , 'hyb_gga_xc_lc_wpbe08_whs' , & & 'hyb_gga_xc_lc_wpbe_whs' , 'hyb_gga_xc_lrc_wpbe' ) num = p_lcwpbe case ( 'lc-wpbeh' , 'lcwpbeh' , 'lc-ωpbeh' , 'lcωpbeh' , 'lc-omegapbeh' , & & 'lcomegapbeh' , 'hyb_gga_xc_lc_wpbeh_whs' , 'hyb_gga_xc_lrc_wpbeh' ) num = p_lcwpbeh case ( 'lh07tsvwn' , 'lh07t-svwn' ) ! no libxc num = p_lh07tsvwn case ( 'lh07ssvwn' , 'lh07s-svwn' ) ! no libxc num = p_lh07ssvwn case ( 'lh12ctssirpw92' , 'lh12ct-ssirpw92' ) ! no libxc num = p_lh12ctssirpw92 case ( 'lh12ctssifpw92' , 'lh12ct-ssifpw92' ) ! no libxc num = p_lh12ctssifpw92 case ( 'lh14tcalpbe' , 'lh14t-calpbe' ) ! no libxc num = p_lh14tcalpbe case ( 'lh20t' ) ! no libxc num = p_lh20t case ( 'b2plyp' , 'b2-plyp' , 'xc_hyb_gga_xc_b2plyp' ) ! only in code num = p_b2plyp case ( 'b2gpplyp' , 'b2gp-plyp' , 'xc_hyb_gga_xc_b2gpplyp' ) ! only in code num = p_b2gpplyp case ( 'mpw2plyp' ) ! no libxc num = p_mpw2plyp case ( 'pwpb95' ) ! no libxc num = p_pwpb95 case ( 'dsdblyp' , 'dsd-blyp' ) ! no libxc num = p_dsdblyp case ( 'dsdpbe' , 'dsd-pbe' ) ! no libxc num = p_dsdpbe case ( 'dsdpbeb95' , 'dsd-pbeb95' ) ! no libxc num = p_dsdpbeb95 case ( 'dsdpbep86' , 'dsd-pbep86' ) ! no libxc num = p_dsdpbep86 case ( 'dsdsvwn' , 'dsd-svwn' ) ! no libxc num = p_dsdsvwn case ( 'dodblyp' , 'dod-blyp' ) ! no libxc num = p_dodblyp case ( 'dodpbe' , 'dod-pbe' ) ! no libxc num = p_dodpbe case ( 'dodpbeb95' , 'dod-pbeb95' ) ! no libxc num = p_dodpbeb95 case ( 'dodpbep86' , 'dod-pbep86' ) ! no libxc num = p_dodpbep86 case ( 'dodsvwn' , 'dod-svwn' ) ! no libxc num = p_dodsvwn case ( 'pbe02' , 'pbe0-2' ) ! no libxc num = p_pbe0_2 case ( 'pbe0dh' , 'pbe0-dh' ) ! no libxc num = p_pbe0_dh case ( 'dftb3' , 'dftb(3ob)' ) ! no libxc num = p_dftb_3ob case ( 'dftb(mio)' ) ! no libxc num = p_dftb_mio case ( 'dftb(pbc)' ) ! no libxc num = p_dftb_pbc case ( 'dftb(matsci)' ) ! no libxc num = p_dftb_matsci case ( 'lc-dftb' , 'dftb(ob2)' ) ! no libxc num = p_dftb_ob2 case ( 'b1b95' , 'hyb_mgga_xc_b88b95' ) num = p_b1b95 case ( 'mpwb1k' , 'hyb_mgga_xc_mpwb1k' ) num = p_mpwb1k case ( 'mpw1b95' , 'hyb_mgga_xc_mpw1b95' ) num = p_mpw1b95 case ( 'hse03' , 'hyb_gga_xc_hse03' ) num = p_hse03 case ( 'hse06' , 'hyb_gga_xc_hse06' ) num = p_hse06 case ( 'hse12' , 'hyb_gga_xc_hse12' ) num = p_hse12 case ( 'hse12s' , 'hyb_gga_xc_hse12s' ) num = p_hse12s case ( 'hsesol' , 'hyb_gga_xc_hse_sol' ) num = p_hsesol case ( 'glyp' , 'g-lyp' , 'gga_x_g96:gga_c_lyp' ) num = p_glyp case ( 'revpbe0dh' , 'revpbe0-dh' ) ! no libxc num = p_revpbe0dh case ( 'revtpssh' , 'hyb_mgga_xc_revtpssh' ) num = p_revtpssh case ( 'revtpss0' ) ! no libxc num = p_revtpss0 case ( 'revdsd-pbep86' , 'revdsdpbep86' ) ! no libxc num = p_revdsdpbep86 case ( 'revdsd-pbe' , 'revdsd-pbepbe' , 'revdsdpbe' , 'revdsdpbepbe' ) ! no libxc num = p_revdsdpbe case ( 'revdsd-blyp' , 'revdsdblyp' ) ! no libxc num = p_revdsdblyp case ( 'revdod-pbep86' , 'revdodpbep86' ) ! no libxc num = p_revdodpbep86 case ( 'b97m' , 'mgga_xc_b97m_v' ) num = p_b97m case ( 'wb97m' , 'ωb97m' , 'omegab97m' , 'hyb_mgga_xc_wb97m_v' ) num = p_wb97m case ( 'wb97m-rev' , 'ωb97m-rev' , 'omegab97m-rev' , 'wb97m_rev' , 'ωb97m_rev' , & & 'omegab97m_rev' ) ! D4 re-parametrization num = p_wb97m_rev case ( 'wb97' , 'ωb97' , 'omegab97' , 'hyb_gga_xc_wb97' ) num = p_wb97 case ( 'wb97x-2008' , 'ωb97x-2008' , 'omegab97x-2008' , 'hyb_gga_xc_wb97x' , & & 'wb97x_2008' , 'ωb97x_2008' , 'omegab97x_2008' ) num = p_wb97x_2008 case ( 'wb97x' , 'ωb97x' , 'omegab97x' , 'hyb_gga_xc_wb97x_v' ) num = p_wb97x case ( 'wb97x-rev' , 'ωb97x-rev' , 'omegab97x-rev' , 'wb97x_rev' , 'ωb97x_rev' , & & 'omegab97x_rev' ) ! D4 re-parametrization num = p_wb97x_rev case ( 'wb97x-3c' , 'ωb97x-3c' , 'omegab97x-3c' , 'wb97x_3c' , 'ωb97x_3c' , & & 'omegab97x_3c' ) ! no libxc num = p_wb97x_3c case ( 'wr2scan' , 'wr²scan' ) ! no libxc num = p_wr2scan case ( 'r2scan0-dh' , 'r²scan0-dh' , 'r2scan0dh' , 'r²scan0dh' ) ! no libxc num = p_r2scan0_dh case ( 'r2scan-cidh' , 'r²scan-cidh' , 'r2scancidh' , 'r²scancidh' ) ! no libxc num = p_r2scan_cidh case ( 'r2scan-qidh' , 'r²scan-qidh' , 'r2scanqidh' , 'r²scanqidh' ) ! no libxc num = p_r2scan_qidh case ( 'r2scan0-2' , 'r²scan0-2' , 'r2scan02' , 'r²scan02' ) ! no libxc num = p_r2scan0_2 case ( 'pr2scan50' , 'pr²scan50' ) ! no libxc num = p_pr2scan50 case ( 'pr2scan69' , 'pr²scan69' ) ! no libxc num = p_pr2scan69 case ( 'kpr2scan50' , 'kpr²scan50' ) ! no libxc num = p_kpr2scan50 case ( 'wpr2scan50' , 'wpr²scan50' ) ! no libxc num = p_wpr2scan50 end select end function get_functional_id","tags":"","url":"proc/get_functional_id.html"},{"title":"new_funcgroup – DFT-D4","text":"private  function new_funcgroup(input_names) result(group) Create a new group of functional names Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: input_names (:) List of spellings/names of the functional Return Value type( functional_group ) Functional with possibly different spellings Source Code function new_funcgroup ( input_names ) result ( group ) !> List of spellings/names of the functional character ( len =* ), intent ( in ) :: input_names (:) !> Functional with possibly different spellings type ( functional_group ) :: group integer :: n , i , max_len n = size ( input_names ) ! Determine the length of the longest name max_len = 0 do i = 1 , n max_len = max ( max_len , len_trim ( input_names ( i ))) end do ! Allocate based on the longest name's length allocate ( character ( len = max_len ) :: group % names ( n )) do i = 1 , n group % names ( i ) = trim ( input_names ( i )) end do end function new_funcgroup","tags":"","url":"proc/new_funcgroup.html"},{"title":"get_d4eeq_bj_parameter – DFT-D4","text":"private  subroutine get_d4eeq_bj_parameter(dfnum, param, s9) Arguments Type Intent Optional Attributes Name integer(kind=df_enum), intent(in) :: dfnum class( damping_param ), intent(out), allocatable :: param real(kind=wp), intent(in), optional :: s9 Source Code subroutine get_d4eeq_bj_parameter ( dfnum , param , s9 ) integer ( df_enum ), intent ( in ) :: dfnum class ( damping_param ), allocatable , intent ( out ) :: param real ( wp ), intent ( in ), optional :: s9 select case ( dfnum ) case ( p_dftb_3ob ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 0.4727337_wp , a1 = 0.5467502_wp , a2 = 4.4955068_wp ) case ( p_dftb_matsci ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 2.7711819_wp , a1 = 0.4681712_wp , a2 = 5.2918629_wp ) case ( p_dftb_mio ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 1.1948145_wp , a1 = 0.6074567_wp , a2 = 4.9336133_wp ) case ( p_dftb_ob2 ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 2.7611320_wp , a1 = 0.6037249_wp , a2 = 5.3900004_wp ) case ( p_dftb_pbc ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 1.7303734_wp , a1 = 0.5546548_wp , a2 = 4.7973454_wp ) end select contains pure function dftd_param ( s6 , s8 , a1 , a2 , alp ) result ( par ) real ( wp ), intent ( in ) :: s8 , a1 , a2 real ( wp ), intent ( in ), optional :: s6 , alp type ( rational_damping_param ) :: par real ( wp ) :: s6_ , alp_ , s9_ s6_ = 1.0_wp if ( present ( s6 )) s6_ = s6 s9_ = 0.0_wp if ( present ( s9 )) s9_ = s9 alp_ = 1 6.0_wp if ( present ( alp )) alp_ = alp par = rational_damping_param (& & s6 = s6_ , & & s8 = s8 , a1 = a1 , a2 = a2 , & & s9 = s9_ , & & alp = alp_ ) end function dftd_param end subroutine get_d4eeq_bj_parameter","tags":"","url":"proc/get_d4eeq_bj_parameter.html"},{"title":"get_d4eeq_bjatm_parameter – DFT-D4","text":"private  subroutine get_d4eeq_bjatm_parameter(dfnum, param, s9) Arguments Type Intent Optional Attributes Name integer(kind=df_enum), intent(in) :: dfnum class( damping_param ), intent(out), allocatable :: param real(kind=wp), intent(in), optional :: s9 Source Code subroutine get_d4eeq_bjatm_parameter ( dfnum , param , s9 ) integer ( df_enum ), intent ( in ) :: dfnum class ( damping_param ), allocatable , intent ( out ) :: param real ( wp ), intent ( in ), optional :: s9 select case ( dfnum ) case ( p_b1b95 ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 1.27701162_wp , a1 = 0.40554715_wp , a2 = 4.63323074_wp ) !  Fitset: MD= 0.22852 MAD= 0.35189 RMSD= 0.46982 case ( p_b1lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.98553711_wp , a1 = 0.39309040_wp , a2 = 4.55465145_wp ) !  Fitset: MD= -0.04797 MAD= 0.25597 RMSD= 0.38778 case ( p_b1p ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.36115015_wp , a1 = 0.48665293_wp , a2 = 5.05219572_wp ) !  Fitset: MD= -0.01406 MAD= 0.27441 RMSD= 0.47328 case ( p_b1pw ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 3.02227550_wp , a1 = 0.47396846_wp , a2 = 4.49845309_wp ) !  Fitset: MD= 0.10485 MAD= 0.32175 RMSD= 0.48508 case ( p_b2gpplyp ) param = dftd_param ( & ! (SAW190107) & s6 = 0.5600_wp , s8 = 0.94633372_wp , a1 = 0.42907301_wp , a2 = 5.18802602_wp ) !  Fitset: MD= -0.05248 MAD= 0.18110 RMSD= 0.27365 case ( p_b2plyp ) param = dftd_param ( & ! (SAW190103) & s6 = 0.6400_wp , s8 = 1.16888646_wp , a1 = 0.44154604_wp , a2 = 4.73114642_wp ) !  Fitset: MD= -0.03761 MAD= 0.18247 RMSD= 0.27109 case ( p_b3lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.02929367_wp , a1 = 0.40868035_wp , a2 = 4.53807137_wp ) !  Fitset: MD= -0.05892 MAD= 0.26117 RMSD= 0.40531 case ( p_b3p ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.08822155_wp , a1 = 0.47324238_wp , a2 = 4.98682134_wp ) !  Fitset: MD= -0.02970 MAD= 0.26962 RMSD= 0.46761 case ( p_b3pw ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 2.88364295_wp , a1 = 0.46990860_wp , a2 = 4.51641422_wp ) !  Fitset: MD= 0.06643 MAD= 0.29151 RMSD= 0.45541 case ( p_b97 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.87854260_wp , a1 = 0.29319126_wp , a2 = 4.51647719_wp ) !  Fitset: MD= -0.13017 MAD= 0.24778 RMSD= 0.36116 case ( p_bhlyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.65281646_wp , a1 = 0.27263660_wp , a2 = 5.48634586_wp ) !  Fitset: MD= -0.15832 MAD= 0.34132 RMSD= 0.57342 case ( p_blyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.34076671_wp , a1 = 0.44488865_wp , a2 = 4.09330090_wp ) !  Fitset: MD= 0.04801 MAD= 0.28161 RMSD= 0.38321 case ( p_bpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.64405246_wp , a1 = 0.52905620_wp , a2 = 4.11311891_wp ) !  Fitset: MD= 0.19316 MAD= 0.41912 RMSD= 0.60452 case ( p_bp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.35497927_wp , a1 = 0.43645861_wp , a2 = 4.92406854_wp ) !  Fitset: MD= 0.08252 MAD= 0.32681 RMSD= 0.47063 case ( p_bpw ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.24571506_wp , a1 = 0.50050454_wp , a2 = 4.12346483_wp ) !  Fitset: MD= 0.20607 MAD= 0.41941 RMSD= 0.59589 case ( p_camb3lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.66041301_wp , a1 = 0.40267156_wp , a2 = 5.17432195_wp ) !  Fitset: MD= -0.19675 MAD= 0.34901 RMSD= 0.59087 case ( p_camqtp01 ) param = dftd_param ( & ! (10.1021/acs.jctc.3c00717) & s6 = 1.0000_wp , s8 = 1.156_wp , a1 = 0.461_wp , a2 = 6.375_wp ) case ( p_dodblyp ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4700_wp , s8 = 1.31146043_wp , a1 = 0.43407294_wp , a2 = 4.27914360_wp ) !  Fitset: MD= 0.03323 MAD= 0.13858 RMSD= 0.20861 case ( p_dodpbeb95 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.5600_wp , s8 = 0.01574635_wp , a1 = 0.43745720_wp , a2 = 3.69180763_wp ) !  Fitset: MD= 0.03704 MAD= 0.13343 RMSD= 0.18278 case ( p_dodpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4800_wp , s8 = 0.92051454_wp , a1 = 0.43037052_wp , a2 = 4.38067238_wp ) !  Fitset: MD= 0.01065 MAD= 0.13414 RMSD= 0.21424 case ( p_dodpbep86 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4600_wp , s8 = 0.71405681_wp , a1 = 0.42408665_wp , a2 = 4.52884439_wp ) !  Fitset: MD= -0.03740 MAD= 0.12467 RMSD= 0.18127 case ( p_dodsvwn ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4200_wp , s8 = 0.94500207_wp , a1 = 0.47449026_wp , a2 = 5.05316093_wp ) !  Fitset: MD= -0.07427 MAD= 0.16970 RMSD= 0.25286 case ( p_dsdblyp ) param = dftd_param ( & ! (SAW190103) & s6 = 0.5400_wp , s8 = 0.63018237_wp , a1 = 0.47591835_wp , a2 = 4.73713781_wp ) !  Fitset: MD= -0.01981 MAD= 0.14823 RMSD= 0.21530 case ( p_dsdpbeb95 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.5400_wp , s8 =- 0.14668670_wp , a1 = 0.46394587_wp , a2 = 3.64913860_wp ) !  Fitset: MD= 0.02996 MAD= 0.12414 RMSD= 0.16860 case ( p_dsdpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4500_wp , s8 = 0.70584116_wp , a1 = 0.45787085_wp , a2 = 4.44566742_wp ) !  Fitset: MD= 0.00866 MAD= 0.13406 RMSD= 0.21380 case ( p_dsdpbep86 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4700_wp , s8 = 0.37586675_wp , a1 = 0.53698768_wp , a2 = 5.13022435_wp ) !  Fitset: MD= -0.05273 MAD= 0.14259 RMSD= 0.21271 case ( p_dsdsvwn ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4100_wp , s8 = 0.72914436_wp , a1 = 0.51347412_wp , a2 = 5.11858541_wp ) !  Fitset: MD= -0.08974 MAD= 0.32285 RMSD= 0.43146 case ( p_glyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 4.23798924_wp , a1 = 0.38426465_wp , a2 = 4.38412863_wp ) !  Fitset: MD= 0.63466 MAD= 0.89568 RMSD= 1.11309 case ( p_hf ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.61679827_wp , a1 = 0.44959224_wp , a2 = 3.35743605_wp ) !  Fitset: MD= -0.02597 MAD= 0.34732 RMSD= 0.49719 case ( p_lb94 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.59538499_wp , a1 = 0.42088944_wp , a2 = 3.28193223_wp ) !  Fitset: MD= 0.31701 MAD= 0.53196 RMSD= 0.74553 case ( p_lcblyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.60344180_wp , a1 = 0.45769839_wp , a2 = 7.86924893_wp ) !  Fitset: MD= -0.39724 MAD= 0.72327 RMSD= 1.18218 case ( p_lcwpbe ) param = dftd_param ( & ! (10.1021/acs.jctc.3c00717) & s6 = 1.0000_wp , s8 = 1.170_wp , a1 = 0.378_wp , a2 = 4.816_wp ) case ( p_lcwpbeh ) param = dftd_param ( & ! (10.1021/acs.jctc.3c00717) & s6 = 1.0000_wp , s8 = 1.318_wp , a1 = 0.386_wp , a2 = 5.010_wp ) case ( p_lh07ssvwn ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.16675531_wp , a1 = 0.35965552_wp , a2 = 4.31947614_wp ) !  Fitset: MD= 0.32224 MAD= 0.59006 RMSD= 0.86272 case ( p_lh07tsvwn ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.09333001_wp , a1 = 0.35025189_wp , a2 = 4.34166515_wp ) !  Fitset: MD= 0.24243 MAD= 0.43497 RMSD= 0.61671 case ( p_lh12ctssifpw92 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.68467610_wp , a1 = 0.34190416_wp , a2 = 3.91039666_wp ) !  Fitset: MD= 0.55106 MAD= 0.80783 RMSD= 1.11048 case ( p_lh12ctssirpw92 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.48973402_wp , a1 = 0.34026075_wp , a2 = 3.96948081_wp ) !  Fitset: MD= 0.47785 MAD= 0.71188 RMSD= 0.98422 case ( p_lh14tcalpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.28130770_wp , a1 = 0.38822021_wp , a2 = 4.92501211_wp ) !  Fitset: MD= -0.02105 MAD= 0.22968 RMSD= 0.36045 case ( p_lh20t ) param = dftd_param ( & ! (10.1021/acs.jctc.0c00498) & s6 = 1.000_wp , s8 = 0.113_wp , a1 = 0.479_wp , a2 = 4.635_wp ) case ( p_m06 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.16366729_wp , a1 = 0.53456413_wp , a2 = 6.06192174_wp ) !  Fitset: MD= 0.01788 MAD= 0.24914 RMSD= 0.38604 case ( p_m06l ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.59493760_wp , a1 = 0.71422359_wp , a2 = 6.35314182_wp ) !  Fitset: MD= 0.08395 MAD= 0.24888 RMSD= 0.34879 case ( p_mn12sx ) param = dftd_param ( & ! (SAW211021) & s6 = 1.0000_wp , s8 = 0.85964873_wp , a1 = 0.62662681_wp , a2 = 5.62088906_wp ) !  Fitset: MD= 0.16131 MAD= 0.34142 RMSD= 0.47113 case ( p_mpw1b95 ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 0.50093024_wp , a1 = 0.41585097_wp , a2 = 4.99154869_wp ) !  Fitset: MD= 0.00585 MAD= 0.15695 RMSD= 0.21297 case ( p_mpw1lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.15591153_wp , a1 = 0.25603493_wp , a2 = 5.32083895_wp ) !  Fitset: MD= -0.26979 MAD= 0.41542 RMSD= 0.60678 case ( p_mpw1pw ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.80841716_wp , a1 = 0.42961819_wp , a2 = 4.68892341_wp ) !  Fitset: MD= -0.08840 MAD= 0.26815 RMSD= 0.45231 case ( p_mpw2plyp ) param = dftd_param ( & ! (SAW190107) & s6 = 0.7500_wp , s8 = 0.45788846_wp , a1 = 0.42997704_wp , a2 = 5.07650682_wp ) !  Fitset: MD= -0.18921 MAD= 0.30115 RMSD= 0.44049 case ( p_mpwb1k ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 0.57338313_wp , a1 = 0.44687975_wp , a2 = 5.21266777_wp ) !  Fitset: MD= -0.00870 MAD= 0.17226 RMSD= 0.23614 case ( p_mpwlyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.25842942_wp , a1 = 0.25773894_wp , a2 = 5.02319542_wp ) !  Fitset: MD= -0.24426 MAD= 0.39145 RMSD= 0.54503 case ( p_mpwpw ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.82596836_wp , a1 = 0.34526745_wp , a2 = 4.84620734_wp ) !  Fitset: MD= -0.06278 MAD= 0.27913 RMSD= 0.43988 case ( p_o3lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.75762508_wp , a1 = 0.10348980_wp , a2 = 6.16233282_wp ) !  Fitset: MD= -0.19268 MAD= 0.38577 RMSD= 0.62168 case ( p_olyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.74836820_wp , a1 = 0.60184498_wp , a2 = 2.53292167_wp ) !  Fitset: MD= 0.12352 MAD= 0.37113 RMSD= 0.58291 case ( p_opbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.06917417_wp , a1 = 0.68267534_wp , a2 = 2.22849018_wp ) !  Fitset: MD= 0.26699 MAD= 0.55308 RMSD= 0.85023 case ( p_pbe0_2 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.5000_wp , s8 = 0.64299082_wp , a1 = 0.76542115_wp , a2 = 5.78578675_wp ) !  Fitset: MD= -0.04260 MAD= 0.21186 RMSD= 0.34045 case ( p_pbe0 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.20065498_wp , a1 = 0.40085597_wp , a2 = 5.02928789_wp ) !  Fitset: MD= -0.17892 MAD= 0.30557 RMSD= 0.51050 case ( p_pbe0_dh ) param = dftd_param ( & ! (SAW190103) & s6 = 0.8750_wp , s8 = 0.96811578_wp , a1 = 0.47592488_wp , a2 = 5.08622873_wp ) !  Fitset: MD= -0.13857 MAD= 0.27919 RMSD= 0.47256 case ( p_pbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.95948085_wp , a1 = 0.38574991_wp , a2 = 4.80688534_wp ) !  Fitset: MD= -0.20544 MAD= 0.33635 RMSD= 0.51168 case ( p_pbesol ) param = dftd_param ( & ! (SAW211021) & s6 = 1.0000_wp , s8 = 1.71885698_wp , a1 = 0.47901421_wp , a2 = 5.96771589_wp ) !  Fitset: MD= -0.28899 MAD= 0.52215 RMSD= 0.93584 case ( p_am05 ) param = dftd_param ( & ! (SAW211021) & s6 = 1.0000_wp , s8 = 1.71885838_wp , a1 = 0.47901431_wp , a2 = 5.96771581_wp ) !  Fitset: MD= -0.28899 MAD= 0.52215 RMSD= 0.93584 case ( p_pw1pw ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.96850170_wp , a1 = 0.42427511_wp , a2 = 5.02060636_wp ) !  Fitset: MD= -0.27325 MAD= 0.42206 RMSD= 0.64119 case ( p_pw6b95 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 =- 0.31926054_wp , a1 = 0.04142919_wp , a2 = 5.84655608_wp ) !  Fitset: MD= -0.04767 MAD= 0.14330 RMSD= 0.18958 case ( p_pw86pbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.21362856_wp , a1 = 0.40510366_wp , a2 = 4.66737724_wp ) !  Fitset: MD= -0.11505 MAD= 0.24691 RMSD= 0.38101 case ( p_pw91 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.77283111_wp , a1 = 0.39581542_wp , a2 = 4.93405761_wp ) !  Fitset: MD= -0.33019 MAD= 0.48611 RMSD= 0.68110 case ( p_pwp1 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.60492565_wp , a1 = 0.46855837_wp , a2 = 5.76921413_wp ) !  Fitset: MD= -0.35321 MAD= 0.54026 RMSD= 0.86629 case ( p_pwpb95 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.8200_wp , s8 =- 0.34639127_wp , a1 = 0.41080636_wp , a2 = 3.83878274_wp ) !  Fitset: MD= 0.02143 MAD= 0.13040 RMSD= 0.17599 case ( p_pwp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.32801227_wp , a1 = 0.35874687_wp , a2 = 6.05861168_wp ) !  Fitset: MD= -0.42482 MAD= 0.62607 RMSD= 0.91840 case ( p_revpbe0 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.57185414_wp , a1 = 0.38705966_wp , a2 = 4.11028876_wp ) !  Fitset: MD= 0.02724 MAD= 0.21587 RMSD= 0.36040 case ( p_revpbe0dh ) param = dftd_param ( & ! (SAW190103) & s6 = 0.8750_wp , s8 = 1.24456037_wp , a1 = 0.36730560_wp , a2 = 4.71126482_wp ) !  Fitset: MD= -0.01089 MAD= 0.20910 RMSD= 0.33564 case ( p_revpbe38 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.66597472_wp , a1 = 0.39476833_wp , a2 = 4.39026628_wp ) !  Fitset: MD= -0.01326 MAD= 0.22598 RMSD= 0.36210 case ( p_revpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.74676530_wp , a1 = 0.53634900_wp , a2 = 3.07261485_wp ) !  Fitset: MD= 0.05649 MAD= 0.25212 RMSD= 0.40863 case ( p_revtpss0 ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 1.54664499_wp , a1 = 0.45890964_wp , a2 = 4.78426405_wp ) !  Fitset: MD= -0.05298 MAD= 0.19965 RMSD= 0.32081 case ( p_revtpss ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.53089454_wp , a1 = 0.44880597_wp , a2 = 4.64042317_wp ) !  Fitset: MD= -0.01904 MAD= 0.19568 RMSD= 0.29618 case ( p_revtpssh ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 1.52740307_wp , a1 = 0.45161957_wp , a2 = 4.70779483_wp ) !  Fitset: MD= -0.03731 MAD= 0.19133 RMSD= 0.29091 case ( p_rpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.31183787_wp , a1 = 0.46169493_wp , a2 = 3.15711757_wp ) !  Fitset: MD= -0.07156 MAD= 0.26348 RMSD= 0.38671 case ( p_rpw86pbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.12624034_wp , a1 = 0.38151218_wp , a2 = 4.75480472_wp ) !  Fitset: MD= -0.12740 MAD= 0.26294 RMSD= 0.40614 case ( p_scan ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.46126056_wp , a1 = 0.62930855_wp , a2 = 6.31284039_wp ) !  Fitset: MD= -0.13170 MAD= 0.28640 RMSD= 0.51183 case ( p_rscan ) param = dftd_param ( & ! (10.1063/5.0041008) & s6 = 1.0000_wp , s8 = 0.87728975_wp , a1 = 0.49116966_wp , a2 = 5.75859346_wp ) case ( p_r2scan ) param = dftd_param ( & ! (10.1063/5.0041008) & s6 = 1.0000_wp , s8 = 0.60187490_wp , a1 = 0.51559235_wp , a2 = 5.77342911_wp ) case ( p_r2scanh ) param = dftd_param ( & ! (10.1063/5.0086040) & s6 = 1.0_wp , s8 = 0.8324_wp , a1 = 0.4944_wp , a2 = 5.9019_wp ) case ( p_r2scan0 ) param = dftd_param ( & ! (10.1063/5.0086040) & s6 = 1.0_wp , s8 = 0.8992_wp , a1 = 0.4778_wp , a2 = 5.8779_wp ) case ( p_r2scan50 ) param = dftd_param ( & ! (10.1063/5.0086040) & s6 = 1.0_wp , s8 = 1.0471_wp , a1 = 0.4574_wp , a2 = 5.8969_wp ) case ( p_r2scan_3c ) param = dftd_param ( & ! (10.1063/5.0040021) & s6 = 1.0_wp , s8 = 0.00_wp , a1 = 0.42_wp , a2 = 5.65_wp ) case ( p_tpss0 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.62438102_wp , a1 = 0.40329022_wp , a2 = 4.80537871_wp ) !  Fitset: MD= -0.09569 MAD= 0.26733 RMSD= 0.44767 case ( p_tpss ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.76596355_wp , a1 = 0.42822303_wp , a2 = 4.54257102_wp ) !  Fitset: MD= -0.09296 MAD= 0.27505 RMSD= 0.42537 case ( p_tpssh ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.85897750_wp , a1 = 0.44286966_wp , a2 = 4.60230534_wp ) !  Fitset: MD=  0.02238 MAD= 0.16042 RMSD= 0.33519 case ( p_b97d ) param = dftd_param ( & ! (SAW201029) & s6 = 1.0000_wp , s8 = 1.69460052_wp , a1 = 0.28904684_wp , a2 = 4.13407323_wp ) !  Fitset: MD= -0.09858 MAD= 0.26757 RMSD= 0.42380 case ( p_wb97 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 6.55792598_wp , a1 = 0.76666802_wp , a2 = 8.36027334_wp ) !  Fitset: MD= -0.12779 MAD= 0.36152 RMSD= 0.49991 case ( p_wb97x_2008 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 =- 0.07519516_wp , a1 = 0.45094893_wp , a2 = 6.78425255_wp ) !  S22x5: MD= 0.05 MAD= 0.16 RMSD= 0.22 !  S66x8: MD= 0.06 MAD= 0.16 RMSD= 0.21 !  NCI10: MD= 0.08 MAD= 0.15 RMSD= 0.25 case ( p_wb97x ) param = dftd_param ( & ! (10.1002/jcc.26411) & s6 = 1.0000_wp , s8 = 0.5093_wp , a1 = 0.0662_wp , a2 = 5.4487_wp ) case ( p_wb97x_rev ) param = dftd_param ( & ! (10.1063/5.0133026) & s6 = 1.0000_wp , s8 = 0.4485_wp , a1 = 0.3306_wp , a2 = 4.279_wp ) case ( p_wb97x_3c ) param = dftd_param ( & ! (10.1063/5.0133026) & s6 = 1.0000_wp , s8 = 0.0_wp , a1 = 0.2464_wp , a2 = 4.737_wp ) case ( p_b97m ) param = dftd_param ( & ! (10.1002/jcc.26411) & s6 = 1.0000_wp , s8 = 0.6633_wp , a1 = 0.4288_wp , a2 = 3.9935_wp ) !  S22x5: MD= 0.03 MAD= 0.12 RMSD= 0.18 !  S66x8: MD= 0.09 MAD= 0.17 RMSD= 0.22 !  NCI10: MD= 0.09 MAD= 0.15 RMSD= 0.32 case ( p_wb97m ) param = dftd_param ( & ! (10.1002/jcc.26411) & s6 = 1.0000_wp , s8 = 0.7761_wp , a1 = 0.7514_wp , a2 = 2.7099_wp ) !  Fitset: MD= -0.20216 MAD= 0.34696 RMSD= 0.53641 case ( p_wb97m_rev ) param = dftd_param ( & ! (10.1021/acs.jctc.3c00717) & s6 = 1.0000_wp , s8 = 0.842_wp , a1 = 0.359_wp , a2 = 4.668_wp ) case ( p_x3lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.54701429_wp , a1 = 0.20318443_wp , a2 = 5.61852648_wp ) !  Fitset: MD= -0.15607 MAD= 0.31342 RMSD= 0.49546 case ( p_xlyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.62972054_wp , a1 = 0.11268673_wp , a2 = 5.40786417_wp ) !  Fitset: MD= -0.03900 MAD= 0.27562 RMSD= 0.38491 case ( p_revdsdpbep86 ) param = dftd_param ( & ! (WTMAD2) & s6 = 0.5132_wp , s8 = 0.00000000_wp , a1 = 0.44000000_wp , a2 = 3.60000000_wp ) case ( p_revdsdpbe ) param = dftd_param ( & ! (WTMAD2) & s6 = 0.6706_wp , s8 = 0.00000000_wp , a1 = 0.40000000_wp , a2 = 3.60000000_wp ) case ( p_revdsdblyp ) param = dftd_param ( & !(WTMAD2) & s6 = 0.6141_wp , s8 = 0.00000000_wp , a1 = 0.38000000_wp , a2 = 3.52000000_wp ) case ( p_revdodpbep86 ) param = dftd_param ( & !(WTMAD2) & s6 = 0.5552_wp , s8 = 0.00000000_wp , a1 = 0.44000000_wp , a2 = 3.60000000_wp ) case ( p_dftb_3ob ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 0.6635015_wp , a1 = 0.5523240_wp , a2 = 4.3537076_wp ) case ( p_dftb_matsci ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 3.3157614_wp , a1 = 0.4826330_wp , a2 = 5.3811976_wp ) case ( p_dftb_mio ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 1.2916225_wp , a1 = 0.5965326_wp , a2 = 4.8778602_wp ) case ( p_dftb_ob2 ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 2.9692689_wp , a1 = 0.6068916_wp , a2 = 5.4476789_wp ) case ( p_dftb_pbc ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 2.1667394_wp , a1 = 0.5646391_wp , a2 = 4.9576353_wp ) case ( p_hse03 ) param = dftd_param ( & ! (SAW211107) & s6 = 1.0_wp , s8 = 1.19812280_wp , a1 = 0.38662939_wp , a2 = 5.22925796_wp ) case ( p_hse06 ) param = dftd_param ( & ! (SAW211107) & s6 = 1.0_wp , s8 = 1.19528249_wp , a1 = 0.38663183_wp , a2 = 5.19133469_wp ) case ( p_hse12 ) param = dftd_param ( & ! (SAW211107) & s6 = 1.0_wp , s8 = 1.23500792_wp , a1 = 0.39226921_wp , a2 = 5.22036266_wp ) case ( p_hse12s ) param = dftd_param ( & ! (SAW211107) & s6 = 1.0_wp , s8 = 1.23767762_wp , a1 = 0.39989137_wp , a2 = 5.34809245_wp ) case ( p_hsesol ) param = dftd_param ( & ! (SAW211107) & s6 = 1.0_wp , s8 = 1.82207807_wp , a1 = 0.45646268_wp , a2 = 5.59662251_wp ) case ( p_wr2scan ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 1.0_wp , s8 = 1.0_wp , a1 = 0.3834_wp , a2 = 5.7889_wp ) case ( p_r2scan0_dh ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.9424_wp , s8 = 0.3856_wp , a1 = 0.4271_wp , a2 = 5.8565_wp ) case ( p_r2scan_cidh ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.8666_wp , s8 = 0.5336_wp , a1 = 0.4171_wp , a2 = 5.9125_wp ) case ( p_r2scan_qidh ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.7867_wp , s8 = 0.2955_wp , a1 = 0.4001_wp , a2 = 5.8300_wp ) case ( p_r2scan0_2 ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.7386_wp , s8 = 0.0000_wp , a1 = 0.4030_wp , a2 = 5.5142_wp ) case ( p_pr2scan50 ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.7964_wp , s8 = 0.3421_wp , a1 = 0.4663_wp , a2 = 5.7916_wp ) case ( p_pr2scan69 ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.7167_wp , s8 = 0.0000_wp , a1 = 0.4644_wp , a2 = 5.2563_wp ) case ( p_kpr2scan50 ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.8402_wp , s8 = 0.1212_wp , a1 = 0.4382_wp , a2 = 5.8232_wp ) case ( p_wpr2scan50 ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.8143_wp , s8 = 0.3842_wp , a1 = 0.4135_wp , a2 = 5.8773_wp ) end select contains pure function dftd_param ( s6 , s8 , a1 , a2 , alp ) result ( par ) real ( wp ), intent ( in ) :: s8 , a1 , a2 real ( wp ), intent ( in ), optional :: s6 , alp type ( rational_damping_param ) :: par real ( wp ) :: s6_ , alp_ , s9_ s6_ = 1.0_wp if ( present ( s6 )) s6_ = s6 s9_ = 1.0_wp if ( present ( s9 )) s9_ = s9 alp_ = 1 6.0_wp if ( present ( alp )) alp_ = alp par = rational_damping_param (& & s6 = s6_ , & & s8 = s8 , a1 = a1 , a2 = a2 , & & s9 = s9_ , & & alp = alp_ ) end function dftd_param end subroutine get_d4eeq_bjatm_parameter","tags":"","url":"proc/get_d4eeq_bjatm_parameter.html"},{"title":"get_functionals – DFT-D4","text":"public  subroutine get_functionals(funcs) Collect all supported functionals Arguments Type Intent Optional Attributes Name type( functional_group ), intent(out), allocatable :: funcs (:) Collection of functionals with possibly different spellings/names Source Code subroutine get_functionals ( funcs ) !DEC$ ATTRIBUTES DLLEXPORT :: get_functionals !> Collection of functionals with possibly different spellings/names type ( functional_group ), allocatable , intent ( out ) :: funcs (:) allocate ( funcs ( p_last - 1 )) funcs ( p_hf ) = new_funcgroup ([ character ( len = 20 ) :: 'hf' ]) funcs ( p_am05 ) = new_funcgroup ([ character ( len = 20 ) :: 'am05' ]) funcs ( p_blyp ) = new_funcgroup ([ character ( len = 20 ) :: 'b-lyp' , 'blyp' ]) funcs ( p_bpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'bpbe' ]) funcs ( p_bp ) = new_funcgroup ([ character ( len = 20 ) :: 'b-p' , 'bp86' , 'bp' , 'b-p86' ]) funcs ( p_bpw ) = new_funcgroup ([ character ( len = 20 ) :: 'bpw' , 'b-pw' ]) funcs ( p_lb94 ) = new_funcgroup ([ character ( len = 20 ) :: 'lb94' ]) funcs ( p_mpwlyp ) = new_funcgroup ([ character ( len = 20 ) :: 'mpwlyp' , 'mpw-lyp' ]) funcs ( p_mpwpw ) = new_funcgroup ([ character ( len = 20 ) :: 'mpwpw' , 'mpw-pw' , 'mpwpw91' ]) funcs ( p_olyp ) = new_funcgroup ([ character ( len = 20 ) :: 'o-lyp' , 'olyp' ]) funcs ( p_opbe ) = new_funcgroup ([ character ( len = 20 ) :: 'opbe' ]) funcs ( p_pbe ) = new_funcgroup ([ character ( len = 20 ) :: 'pbe' ]) funcs ( p_rpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'rpbe' ]) funcs ( p_revpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'revpbe' ]) funcs ( p_pw86pbe ) = new_funcgroup ([ character ( len = 20 ) :: 'pw86pbe' ]) funcs ( p_rpw86pbe ) = new_funcgroup ([ character ( len = 20 ) :: 'rpw86pbe' ]) funcs ( p_pw91 ) = new_funcgroup ([ character ( len = 20 ) :: 'pw91' ]) funcs ( p_pwp ) = new_funcgroup ([ character ( len = 20 ) :: 'pwp' , 'pw-p' , 'pw91p86' ]) funcs ( p_xlyp ) = new_funcgroup ([ character ( len = 20 ) :: 'x-lyp' , 'xlyp' ]) funcs ( p_b97 ) = new_funcgroup ([ character ( len = 20 ) :: 'b97' ]) funcs ( p_tpss ) = new_funcgroup ([ character ( len = 20 ) :: 'tpss' ]) funcs ( p_revtpss ) = new_funcgroup ([ character ( len = 20 ) :: 'revtpss' ]) funcs ( p_scan ) = new_funcgroup ([ character ( len = 20 ) :: 'scan' ]) funcs ( p_rscan ) = new_funcgroup ([ character ( len = 20 ) :: 'rscan' ]) funcs ( p_r2scan ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan' , 'r²scan' ]) funcs ( p_r2scanh ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scanh' , 'r²scanh' ]) funcs ( p_r2scan0 ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan0' , 'r²scan0' ]) funcs ( p_r2scan50 ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan50' , 'r²scan50' ]) funcs ( p_r2scan_3c ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan-3c' , & & 'r²scan-3c' , 'r2scan_3c' , 'r²scan_3c' , 'r2scan3c' ]) funcs ( p_wr2scan ) = new_funcgroup ([ character ( len = 20 ) :: 'wr2scan' , 'wr²scan' ]) funcs ( p_r2scan0_dh ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan0-dh' , & & 'r²scan0-dh' , 'r2scan0dh' , 'r²scan0dh' ]) funcs ( p_r2scan_cidh ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan-cidh' , & & 'r²scan-cidh' , 'r2scancidh' , 'r²scancidh' ]) funcs ( p_r2scan_qidh ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan-qidh' , & & 'r²scan-qidh' , 'r2scanqidh' , 'r²scanqidh' ]) funcs ( p_r2scan0_2 ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan0-2' , & & 'r²scan0-2' , 'r2scan02' , 'r²scan02' ]) funcs ( p_pr2scan50 ) = new_funcgroup ([ character ( len = 20 ) :: 'pr2scan50' , & & 'pr²scan50' , 'pr2scan50' , 'pr²scan50' ]) funcs ( p_pr2scan69 ) = new_funcgroup ([ character ( len = 20 ) :: 'pr2scan69' , & & 'pr²scan69' , 'pr2scan69' , 'pr²scan69' ]) funcs ( p_kpr2scan50 ) = new_funcgroup ([ character ( len = 20 ) :: 'kpr2scan50' , & & 'kpr²scan50' , 'kpr2scan50' , 'kpr²scan50' ]) funcs ( p_wpr2scan50 ) = new_funcgroup ([ character ( len = 20 ) :: 'wpr2scan50' , & & 'wpr²scan50' , 'wpr2scan50' , 'wpr²scan50' ]) funcs ( p_b1lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'b1lyp' , 'b1-lyp' ]) funcs ( p_b3lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'b3-lyp' , 'b3lyp' ]) funcs ( p_bhlyp ) = new_funcgroup ([ character ( len = 20 ) :: 'bh-lyp' , 'bhlyp' ]) funcs ( p_b1p ) = new_funcgroup ([ character ( len = 20 ) :: 'b1p' , 'b1-p' , 'b1p86' ]) funcs ( p_b3p ) = new_funcgroup ([ character ( len = 20 ) :: 'b3p' , 'b3-p' , 'b3p86' ]) funcs ( p_b1pw ) = new_funcgroup ([ character ( len = 20 ) :: 'b1pw' , 'b1-pw' , 'b1pw91' ]) funcs ( p_b3pw ) = new_funcgroup ([ character ( len = 20 ) :: 'b3pw' , 'b3-pw' , 'b3pw91' ]) funcs ( p_o3lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'o3-lyp' , 'o3lyp' ]) funcs ( p_revpbe0 ) = new_funcgroup ([ character ( len = 20 ) :: 'revpbe0' ]) funcs ( p_revpbe38 ) = new_funcgroup ([ character ( len = 20 ) :: 'revpbe38' ]) funcs ( p_pbe0 ) = new_funcgroup ([ character ( len = 20 ) :: 'pbe0' ]) funcs ( p_pwp1 ) = new_funcgroup ([ character ( len = 20 ) :: 'pwp1' ]) funcs ( p_pw1pw ) = new_funcgroup ([ character ( len = 20 ) :: 'pw1pw' , 'pw1-pw' ]) funcs ( p_mpw1pw ) = new_funcgroup ([ character ( len = 20 ) :: 'mpw1pw' , 'mpw1-pw' , 'mpw1pw91' ]) funcs ( p_mpw1lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'mpw1lyp' , 'mpw1-lyp' ]) funcs ( p_pw6b95 ) = new_funcgroup ([ character ( len = 20 ) :: 'pw6b95' ]) funcs ( p_tpssh ) = new_funcgroup ([ character ( len = 20 ) :: 'tpssh' ]) funcs ( p_tpss0 ) = new_funcgroup ([ character ( len = 20 ) :: 'tpss0' ]) funcs ( p_x3lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'x3-lyp' , 'x3lyp' ]) funcs ( p_m06 ) = new_funcgroup ([ character ( len = 20 ) :: 'm06' ]) funcs ( p_m06l ) = new_funcgroup ([ character ( len = 20 ) :: 'm06l' ]) funcs ( p_mn12sx ) = new_funcgroup ([ character ( len = 20 ) :: 'mn12sx' , 'mn12-sx' ]) funcs ( p_b97d ) = new_funcgroup ([ character ( len = 20 ) :: 'b97d' ]) funcs ( p_lh07tsvwn ) = new_funcgroup ([ character ( len = 20 ) :: 'lh07tsvwn' , 'lh07t-svwn' ]) funcs ( p_lh07ssvwn ) = new_funcgroup ([ character ( len = 20 ) :: 'lh07ssvwn' , 'lh07s-svwn' ]) funcs ( p_lh12ctssirpw92 ) = new_funcgroup ([ character ( len = 20 ) :: 'lh12ctssirpw92' , 'lh12ct-ssirpw92' ]) funcs ( p_lh12ctssifpw92 ) = new_funcgroup ([ character ( len = 20 ) :: 'lh12ctssifpw92' , 'lh12ct-ssifpw92' ]) funcs ( p_lh14tcalpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'lh14tcalpbe' , 'lh14t-calpbe' ]) funcs ( p_lh20t ) = new_funcgroup ([ character ( len = 20 ) :: 'lh20t' ]) funcs ( p_b2plyp ) = new_funcgroup ([ character ( len = 20 ) :: 'b2plyp' , 'b2-plyp' ]) funcs ( p_b2gpplyp ) = new_funcgroup ([ character ( len = 20 ) :: 'b2gpplyp' , 'b2gp-plyp' ]) funcs ( p_mpw2plyp ) = new_funcgroup ([ character ( len = 20 ) :: 'mpw2plyp' ]) funcs ( p_pwpb95 ) = new_funcgroup ([ character ( len = 20 ) :: 'pwpb95' ]) funcs ( p_dsdblyp ) = new_funcgroup ([ character ( len = 20 ) :: 'dsdblyp' , 'dsd-blyp' ]) funcs ( p_dsdpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'dsdpbe' , 'dsd-pbe' ]) funcs ( p_dsdpbeb95 ) = new_funcgroup ([ character ( len = 20 ) :: 'dsdpbeb95' , 'dsd-pbeb95' ]) funcs ( p_dsdpbep86 ) = new_funcgroup ([ character ( len = 20 ) :: 'dsdpbep86' , 'dsd-pbep86' ]) funcs ( p_dsdsvwn ) = new_funcgroup ([ character ( len = 20 ) :: 'dsdsvwn' , 'dsd-svwn' ]) funcs ( p_dodblyp ) = new_funcgroup ([ character ( len = 20 ) :: 'dodblyp' , 'dod-blyp' ]) funcs ( p_dodpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'dodpbe' , 'dod-pbe' ]) funcs ( p_dodpbeb95 ) = new_funcgroup ([ character ( len = 20 ) :: 'dodpbeb95' , 'dod-pbeb95' ]) funcs ( p_dodpbep86 ) = new_funcgroup ([ character ( len = 20 ) :: 'dodpbep86' , 'dod-pbep86' ]) funcs ( p_dodsvwn ) = new_funcgroup ([ character ( len = 20 ) :: 'dodsvwn' , 'dod-svwn' ]) funcs ( p_pbe0_2 ) = new_funcgroup ([ character ( len = 20 ) :: 'pbe02' , 'pbe0-2' ]) funcs ( p_pbe0_dh ) = new_funcgroup ([ character ( len = 20 ) :: 'pbe0dh' , 'pbe0-dh' ]) funcs ( p_dftb_3ob ) = new_funcgroup ([ character ( len = 20 ) :: 'dftb3' , 'dftb(3ob)' ]) funcs ( p_dftb_mio ) = new_funcgroup ([ character ( len = 20 ) :: 'dftb(mio)' ]) funcs ( p_dftb_pbc ) = new_funcgroup ([ character ( len = 20 ) :: 'dftb(pbc)' ]) funcs ( p_dftb_matsci ) = new_funcgroup ([ character ( len = 20 ) :: 'dftb(matsci)' ]) funcs ( p_dftb_ob2 ) = new_funcgroup ([ character ( len = 20 ) :: 'lc-dftb' , 'dftb(ob2)' ]) funcs ( p_b1b95 ) = new_funcgroup ([ character ( len = 20 ) :: 'b1b95' ]) funcs ( p_pbesol ) = new_funcgroup ([ character ( len = 20 ) :: 'pbesol' ]) funcs ( p_mpwb1k ) = new_funcgroup ([ character ( len = 20 ) :: 'mpwb1k' ]) funcs ( p_mpw1b95 ) = new_funcgroup ([ character ( len = 20 ) :: 'mpw1b95' ]) funcs ( p_hse03 ) = new_funcgroup ([ character ( len = 20 ) :: 'hse03' ]) funcs ( p_hse06 ) = new_funcgroup ([ character ( len = 20 ) :: 'hse06' ]) funcs ( p_hse12 ) = new_funcgroup ([ character ( len = 20 ) :: 'hse12' ]) funcs ( p_hse12s ) = new_funcgroup ([ character ( len = 20 ) :: 'hse12s' ]) funcs ( p_hsesol ) = new_funcgroup ([ character ( len = 20 ) :: 'hsesol' ]) funcs ( p_revtpssh ) = new_funcgroup ([ character ( len = 20 ) :: 'revtpssh' ]) funcs ( p_glyp ) = new_funcgroup ([ character ( len = 20 ) :: 'glyp' , 'g-lyp' ]) funcs ( p_revpbe0dh ) = new_funcgroup ([ character ( len = 20 ) :: 'revpbe0dh' , 'revpbe0-dh' ]) funcs ( p_revtpss0 ) = new_funcgroup ([ character ( len = 20 ) :: 'revtpss0' ]) funcs ( p_revdsdpbep86 ) = new_funcgroup ([ character ( len = 20 ) :: 'revdsd-pbep86' , 'revdsdpbep86' ]) funcs ( p_revdsdpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'revdsd-pbe' , 'revdsd-pbepbe' , 'revdsdpbe' , 'revdsdpbepbe' ]) funcs ( p_revdsdblyp ) = new_funcgroup ([ character ( len = 20 ) :: 'revdsd-blyp' , 'revdsdblyp' ]) funcs ( p_revdodpbep86 ) = new_funcgroup ([ character ( len = 20 ) :: 'revdod-pbep86' , 'revdodpbep86' ]) funcs ( p_b97m ) = new_funcgroup ([ character ( len = 20 ) :: 'b97m' ]) funcs ( p_wb97m ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97m' , 'ωb97m' , 'omegab97m' ]) funcs ( p_wb97m_rev ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97m-rev' , & & 'ωb97m-rev' , 'omegab97m-rev' , 'wb97m_rev' , 'ωb97m_rev' , 'omegab97m_rev' ]) funcs ( p_wb97 ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97' , 'ωb97' , 'omegab97' ]) funcs ( p_wb97x_2008 ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97x_2008' , & & 'ωb97x_2008' , 'omegab97x_2008' , 'wb97x-2008' , 'ωb97x-2008' , & & 'omegab97x-2008' ]) funcs ( p_wb97x ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97x' , 'ωb97x' , & & 'omegab97x' ]) funcs ( p_wb97x_rev ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97x-rev' , & & 'ωb97x-rev' , 'omegab97x-rev' , 'wb97x_rev' , 'ωb97x_rev' , 'omegab97x_rev' ]) funcs ( p_wb97x_3c ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97x-3c' , & & 'ωb97x-3c' , 'omegab97x-3c' , 'wb97x_3c' , 'ωb97x_3c' , 'omegab97x_3c' ]) funcs ( p_camb3lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'cam-b3lyp' , 'camb3lyp' ]) funcs ( p_camqtp01 ) = new_funcgroup ([ character ( len = 20 ) :: 'cam-qtp01' , & & 'camqtp01' , 'camqtp(01)' , 'cam-qtp(01)' ]) funcs ( p_lcblyp ) = new_funcgroup ([ character ( len = 20 ) :: 'lc-blyp' , 'lcblyp' ]) funcs ( p_lcwpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'lc-wpbe' , & & 'lcwpbe' , 'lc-ωpbe' , 'lcωpbe' , 'lc-omegapbe' , 'lcomegapbe' ]) funcs ( p_lcwpbeh ) = new_funcgroup ([ character ( len = 20 ) :: 'lc-wpbeh' , & & 'lcwpbeh' , 'lc-ωpbeh' , 'lcωpbeh' , 'lc-omegapbeh' , 'lcomegapbeh' ]) end subroutine get_functionals","tags":"","url":"proc/get_functionals.html"},{"title":"get_rational_damping_id – DFT-D4","text":"private  subroutine get_rational_damping_id(id, param, s9) Retrieve rational damping parameters from functional ID Arguments Type Intent Optional Attributes Name integer, intent(in) :: id Functional ID for which to retrieve the damping parameters class( damping_param ), intent(out), allocatable :: param Damping parameters for the functional real(kind=wp), intent(in), optional :: s9 Scaling factor for the three-body term Source Code subroutine get_rational_damping_id ( id , param , s9 ) !DEC$ ATTRIBUTES DLLEXPORT :: get_rational_damping_id !> Functional ID for which to retrieve the damping parameters integer , intent ( in ) :: id !> Damping parameters for the functional class ( damping_param ), allocatable , intent ( out ) :: param !> Scaling factor for the three-body term real ( wp ), intent ( in ), optional :: s9 logical :: mbd mbd = . true . if ( present ( s9 )) mbd = abs ( s9 ) > epsilon ( s9 ) if ( mbd ) then call get_d4eeq_bjatm_parameter ( id , param , s9 ) if (. not . allocated ( param )) then call get_d4eeq_bj_parameter ( id , param , s9 ) end if else call get_d4eeq_bj_parameter ( id , param , s9 ) if (. not . allocated ( param )) then call get_d4eeq_bjatm_parameter ( id , param , s9 ) end if end if end subroutine get_rational_damping_id","tags":"","url":"proc/get_rational_damping_id.html"},{"title":"get_rational_damping_name – DFT-D4","text":"private  subroutine get_rational_damping_name(functional, param, s9) Retrieve rational damping parameters from functional name Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: functional Functional name for which to retrieve the damping parameters class( damping_param ), intent(out), allocatable :: param Damping parameters for the functional real(kind=wp), intent(in), optional :: s9 Scaling factor for the three-body term Source Code subroutine get_rational_damping_name ( functional , param , s9 ) !DEC$ ATTRIBUTES DLLEXPORT :: get_rational_damping_name !> Functional name for which to retrieve the damping parameters character ( len =* ), intent ( in ) :: functional !> Damping parameters for the functional class ( damping_param ), allocatable , intent ( out ) :: param !> Scaling factor for the three-body term real ( wp ), intent ( in ), optional :: s9 character ( len = :), allocatable :: fname integer :: is , id is = index ( functional , '/' ) if ( is == 0 ) is = len_trim ( functional ) + 1 fname = lowercase ( functional (: is - 1 )) id = get_functional_id ( fname ) call get_rational_damping_id ( id , param , s9 = s9 ) end subroutine get_rational_damping_name","tags":"","url":"proc/get_rational_damping_name.html"},{"title":"get_rational_damping – DFT-D4","text":"public interface get_rational_damping Retrieve rational damping parameters from functional name or ID Module Procedures private  subroutine get_rational_damping_name (functional, param, s9) Retrieve rational damping parameters from functional name Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: functional Functional name for which to retrieve the damping parameters class( damping_param ), intent(out), allocatable :: param Damping parameters for the functional real(kind=wp), intent(in), optional :: s9 Scaling factor for the three-body term private  subroutine get_rational_damping_id (id, param, s9) Retrieve rational damping parameters from functional ID Arguments Type Intent Optional Attributes Name integer, intent(in) :: id Functional ID for which to retrieve the damping parameters class( damping_param ), intent(out), allocatable :: param Damping parameters for the functional real(kind=wp), intent(in), optional :: s9 Scaling factor for the three-body term","tags":"","url":"interface/get_rational_damping.html"},{"title":"add_coordination_number_derivs – DFT-D4","text":"public  subroutine add_coordination_number_derivs(mol, trans, cutoff, rcov, en, dEdcn, gradient, sigma) Arguments Type Intent Optional Attributes Name type(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: rcov (:) Covalent radius real(kind=wp), intent(in) :: en (:) Electronegativity real(kind=wp), intent(in) :: dEdcn (:) Derivative of expression with respect to the coordination number real(kind=wp), intent(inout) :: gradient (:,:) Derivative of the CN with respect to the Cartesian coordinates real(kind=wp), intent(inout) :: sigma (:,:) Derivative of the CN with respect to strain deformations Source Code subroutine add_coordination_number_derivs ( mol , trans , cutoff , rcov , en , dEdcn , gradient , sigma ) !> Molecular structure data type ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Covalent radius real ( wp ), intent ( in ) :: rcov (:) !> Electronegativity real ( wp ), intent ( in ) :: en (:) !> Derivative of expression with respect to the coordination number real ( wp ), intent ( in ) :: dEdcn (:) !> Derivative of the CN with respect to the Cartesian coordinates real ( wp ), intent ( inout ) :: gradient (:, :) !> Derivative of the CN with respect to strain deformations real ( wp ), intent ( inout ) :: sigma (:, :) class ( ncoord_type ), allocatable :: ncoord type ( error_type ), allocatable :: error call new_ncoord ( ncoord , mol , cn_count % dftd4 , & & kcn = default_kcn , cutoff = cutoff , rcov = rcov , en = en , error = error ) if ( allocated ( error )) then write ( error_unit , '(\"[Error]:\", 1x, a)' ) error % message error stop end if call ncoord % add_coordination_number_derivs ( mol , trans , dEdcn , gradient , sigma ) end subroutine add_coordination_number_derivs","tags":"","url":"proc/add_coordination_number_derivs.html"},{"title":"get_coordination_number – DFT-D4","text":"public  subroutine get_coordination_number(mol, trans, cutoff, rcov, en, cn, dcndr, dcndL) Geometric fractional coordination number, supports error function counting. Arguments Type Intent Optional Attributes Name type(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: rcov (:) Covalent radius real(kind=wp), intent(in) :: en (:) Electronegativity real(kind=wp), intent(out) :: cn (:) Error function coordination number. real(kind=wp), intent(out), optional :: dcndr (:,:,:) Derivative of the CN with respect to the Cartesian coordinates. real(kind=wp), intent(out), optional :: dcndL (:,:,:) Derivative of the CN with respect to strain deformations. Source Code subroutine get_coordination_number ( mol , trans , cutoff , rcov , en , cn , dcndr , dcndL ) !DEC$ ATTRIBUTES DLLEXPORT :: get_coordination_number !> Molecular structure data type ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Covalent radius real ( wp ), intent ( in ) :: rcov (:) !> Electronegativity real ( wp ), intent ( in ) :: en (:) !> Error function coordination number. real ( wp ), intent ( out ) :: cn (:) !> Derivative of the CN with respect to the Cartesian coordinates. real ( wp ), intent ( out ), optional :: dcndr (:, :, :) !> Derivative of the CN with respect to strain deformations. real ( wp ), intent ( out ), optional :: dcndL (:, :, :) class ( ncoord_type ), allocatable :: ncoord type ( error_type ), allocatable :: error call new_ncoord ( ncoord , mol , cn_count % dftd4 , & & kcn = default_kcn , cutoff = cutoff , rcov = rcov , en = en , error = error ) if ( allocated ( error )) then write ( error_unit , '(\"[Error]:\", 1x, a)' ) error % message error stop end if call ncoord % get_coordination_number ( mol , trans , cn , dcndr , dcndL ) end subroutine get_coordination_number","tags":"","url":"proc/get_coordination_number.html"},{"title":"triple_scale – DFT-D4","text":"public elemental function triple_scale(ii, jj, kk) result(triple) Logic exercise to distribute a triple energy to atomwise energies. Arguments Type Intent Optional Attributes Name integer, intent(in) :: ii Atom indices integer, intent(in) :: jj Atom indices integer, intent(in) :: kk Atom indices Return Value real(kind=wp) Fraction of energy Source Code elemental function triple_scale ( ii , jj , kk ) result ( triple ) !> Atom indices integer , intent ( in ) :: ii , jj , kk !> Fraction of energy real ( wp ) :: triple if ( ii == jj ) then if ( ii == kk ) then ! ii'i\" -> 1/6 triple = 1.0_wp / 6.0_wp else ! ii'j -> 1/2 triple = 0.5_wp end if else if ( ii /= kk . and . jj /= kk ) then ! ijk -> 1 (full) triple = 1.0_wp else ! ijj' and iji' -> 1/2 triple = 0.5_wp end if end if end function triple_scale","tags":"","url":"proc/triple_scale~2.html"},{"title":"get_atm_dispersion – DFT-D4","text":"public  subroutine get_atm_dispersion(mol, trans, cutoff, s9, a1, a2, alp, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: s9 Scaling for dispersion coefficients real(kind=wp), intent(in) :: a1 Scaling parameter for critical radius real(kind=wp), intent(in) :: a2 Offset parameter for critical radius real(kind=wp), intent(in) :: alp Exponent of zero damping function real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial Source Code subroutine get_atm_dispersion ( mol , trans , cutoff , s9 , a1 , a2 , alp , r4r2 , & & c6 , dc6dcn , dc6dq , energy , dEdcn , dEdq , gradient , sigma ) !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Scaling for dispersion coefficients real ( wp ), intent ( in ) :: s9 !> Scaling parameter for critical radius real ( wp ), intent ( in ) :: a1 !> Offset parameter for critical radius real ( wp ), intent ( in ) :: a2 !> Exponent of zero damping function real ( wp ), intent ( in ) :: alp !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ), optional :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ), optional :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ), optional :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ), optional :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ), optional :: sigma (:, :) logical :: grad if ( abs ( s9 ) < epsilon ( 1.0_wp )) return grad = present ( dc6dcn ) . and . present ( dEdcn ) . and . present ( dc6dq ) & & . and . present ( dEdq ) . and . present ( gradient ) . and . present ( sigma ) if ( grad ) then call get_atm_dispersion_derivs ( mol , trans , cutoff , s9 , a1 , a2 , alp , r4r2 , & & c6 , dc6dcn , dc6dq , energy , dEdcn , dEdq , gradient , sigma ) else call get_atm_dispersion_energy ( mol , trans , cutoff , s9 , a1 , a2 , alp , r4r2 , & & c6 , energy ) end if end subroutine get_atm_dispersion","tags":"","url":"proc/get_atm_dispersion.html"},{"title":"get_atm_dispersion_derivs – DFT-D4","text":"public  subroutine get_atm_dispersion_derivs(mol, trans, cutoff, s9, a1, a2, alp, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: s9 Scaling for dispersion coefficients real(kind=wp), intent(in) :: a1 Scaling parameter for critical radius real(kind=wp), intent(in) :: a2 Offset parameter for critical radius real(kind=wp), intent(in) :: alp Exponent of zero damping function real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in) :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in) :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout) :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout) :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout) :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout) :: sigma (:,:) Dispersion virial Source Code subroutine get_atm_dispersion_derivs ( mol , trans , cutoff , s9 , a1 , a2 , alp , r4r2 , & & c6 , dc6dcn , dc6dq , energy , dEdcn , dEdq , gradient , sigma ) !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Scaling for dispersion coefficients real ( wp ), intent ( in ) :: s9 !> Scaling parameter for critical radius real ( wp ), intent ( in ) :: a1 !> Offset parameter for critical radius real ( wp ), intent ( in ) :: a2 !> Exponent of zero damping function real ( wp ), intent ( in ) :: alp !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ) :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ) :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ) :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ) :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ) :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ) :: sigma (:, :) integer :: iat , jat , kat , izp , jzp , kzp , jtr , ktr real ( wp ) :: vij ( 3 ), vjk ( 3 ), vik ( 3 ), r2ij , r2jk , r2ik , c6ij , c6jk , c6ik , triple real ( wp ) :: r0ij , r0jk , r0ik , r0 , r1 , r2 , r3 , r5 , rr , fdmp , dfdmp , ang , dang real ( wp ) :: cutoff2 , c9 , dE , dGij ( 3 ), dGjk ( 3 ), dGik ( 3 ), dS ( 3 , 3 ) ! Thread-private arrays for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:) real ( wp ), allocatable :: dEdcn_local (:) real ( wp ), allocatable :: dEdq_local (:) real ( wp ), allocatable :: gradient_local (:, :) real ( wp ), allocatable :: sigma_local (:, :) cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, trans, c6, s9, a1, a2, alp, r4r2, cutoff2, dc6dcn, dc6dq) & !$omp private(iat, jat, kat, izp, jzp, kzp, jtr, ktr, vij, vjk, vik, & !$omp& r2ij, r2jk, r2ik, c6ij, c6jk, c6ik, triple, r0ij, r0jk, r0ik, r0, & !$omp& r1, r2, r3, r5, rr, fdmp, dfdmp, ang, dang, c9, dE, dGij, dGjk, & !$omp& dGik, dS) & !$omp shared(energy, gradient, sigma, dEdcn, dEdq) & !$omp private(energy_local, gradient_local, sigma_local, dEdcn_local, & !$omp& dEdq_local) allocate ( energy_local ( size ( energy , 1 )), source = 0.0_wp ) allocate ( dEdcn_local ( size ( dEdcn , 1 )), source = 0.0_wp ) allocate ( dEdq_local ( size ( dEdq , 1 )), source = 0.0_wp ) allocate ( gradient_local ( size ( gradient , 1 ), size ( gradient , 2 )), source = 0.0_wp ) allocate ( sigma_local ( size ( sigma , 1 ), size ( sigma , 2 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) c6ij = c6 ( jat , iat ) r0ij = a1 * sqrt ( 3 * r4r2 ( jzp ) * r4r2 ( izp )) + a2 do jtr = 1 , size ( trans , 2 ) vij (:) = mol % xyz (:, jat ) + trans (:, jtr ) - mol % xyz (:, iat ) r2ij = vij ( 1 ) * vij ( 1 ) + vij ( 2 ) * vij ( 2 ) + vij ( 3 ) * vij ( 3 ) if ( r2ij > cutoff2 . or . r2ij < epsilon ( 1.0_wp )) cycle do kat = 1 , jat kzp = mol % id ( kat ) c6ik = c6 ( kat , iat ) c6jk = c6 ( kat , jat ) c9 = - s9 * sqrt ( abs ( c6ij * c6ik * c6jk )) r0ik = a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( izp )) + a2 r0jk = a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( jzp )) + a2 r0 = r0ij * r0ik * r0jk triple = triple_scale ( iat , jat , kat ) do ktr = 1 , size ( trans , 2 ) vik (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, iat ) r2ik = vik ( 1 ) * vik ( 1 ) + vik ( 2 ) * vik ( 2 ) + vik ( 3 ) * vik ( 3 ) if ( r2ik > cutoff2 . or . r2ik < epsilon ( 1.0_wp )) cycle vjk (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, jat ) & & - trans (:, jtr ) r2jk = vjk ( 1 ) * vjk ( 1 ) + vjk ( 2 ) * vjk ( 2 ) + vjk ( 3 ) * vjk ( 3 ) if ( r2jk > cutoff2 . or . r2jk < epsilon ( 1.0_wp )) cycle r2 = r2ij * r2ik * r2jk r1 = sqrt ( r2 ) r3 = r2 * r1 r5 = r3 * r2 fdmp = 1.0_wp / ( 1.0_wp + 6.0_wp * ( r0 / r1 ) ** ( alp / 3.0_wp )) ang = 0.375_wp * ( r2ij + r2jk - r2ik ) * ( r2ij - r2jk + r2ik )& & * ( - r2ij + r2jk + r2ik ) / r5 + 1.0_wp / r3 rr = ang * fdmp dfdmp = - 2.0_wp * alp * ( r0 / r1 ) ** ( alp / 3.0_wp ) * fdmp ** 2 ! d/drij dang = - 0.375_wp * ( r2ij ** 3 + r2ij ** 2 * ( r2jk + r2ik )& & + r2ij * ( 3.0_wp * r2jk ** 2 + 2.0_wp * r2jk * r2ik & & + 3.0_wp * r2ik ** 2 )& & - 5.0_wp * ( r2jk - r2ik ) ** 2 * ( r2jk + r2ik )) / r5 dGij (:) = c9 * ( - dang * fdmp + ang * dfdmp ) / r2ij * vij ! d/drik dang = - 0.375_wp * ( r2ik ** 3 + r2ik ** 2 * ( r2jk + r2ij )& & + r2ik * ( 3.0_wp * r2jk ** 2 + 2.0_wp * r2jk * r2ij & & + 3.0_wp * r2ij ** 2 )& & - 5.0_wp * ( r2jk - r2ij ) ** 2 * ( r2jk + r2ij )) / r5 dGik (:) = c9 * ( - dang * fdmp + ang * dfdmp ) / r2ik * vik ! d/drjk dang = - 0.375_wp * ( r2jk ** 3 + r2jk ** 2 * ( r2ik + r2ij )& & + r2jk * ( 3.0_wp * r2ik ** 2 + 2.0_wp * r2ik * r2ij & & + 3.0_wp * r2ij ** 2 )& & - 5.0_wp * ( r2ik - r2ij ) ** 2 * ( r2ik + r2ij )) / r5 dGjk (:) = c9 * ( - dang * fdmp + ang * dfdmp ) / r2jk * vjk dE = rr * c9 * triple energy_local ( iat ) = energy_local ( iat ) - dE / 3 energy_local ( jat ) = energy_local ( jat ) - dE / 3 energy_local ( kat ) = energy_local ( kat ) - dE / 3 gradient_local (:, iat ) = gradient_local (:, iat ) - dGij - dGik gradient_local (:, jat ) = gradient_local (:, jat ) + dGij - dGjk gradient_local (:, kat ) = gradient_local (:, kat ) + dGik + dGjk dS (:, :) = spread ( dGij , 1 , 3 ) * spread ( vij , 2 , 3 )& & + spread ( dGik , 1 , 3 ) * spread ( vik , 2 , 3 )& & + spread ( dGjk , 1 , 3 ) * spread ( vjk , 2 , 3 ) sigma_local (:, :) = sigma_local + dS * triple dEdcn_local ( iat ) = dEdcn_local ( iat ) - dE * 0.5_wp & & * ( dc6dcn ( iat , jat ) / c6ij + dc6dcn ( iat , kat ) / c6ik ) dEdcn_local ( jat ) = dEdcn_local ( jat ) - dE * 0.5_wp & & * ( dc6dcn ( jat , iat ) / c6ij + dc6dcn ( jat , kat ) / c6jk ) dEdcn_local ( kat ) = dEdcn_local ( kat ) - dE * 0.5_wp & & * ( dc6dcn ( kat , iat ) / c6ik + dc6dcn ( kat , jat ) / c6jk ) dEdq_local ( iat ) = dEdq_local ( iat ) - dE * 0.5_wp & & * ( dc6dq ( iat , jat ) / c6ij + dc6dq ( iat , kat ) / c6ik ) dEdq_local ( jat ) = dEdq_local ( jat ) - dE * 0.5_wp & & * ( dc6dq ( jat , iat ) / c6ij + dc6dq ( jat , kat ) / c6jk ) dEdq_local ( kat ) = dEdq_local ( kat ) - dE * 0.5_wp & & * ( dc6dq ( kat , iat ) / c6ik + dc6dq ( kat , jat ) / c6jk ) end do end do end do end do end do !$omp end do !$omp critical (get_atm_dispersion_derivs_) energy (:) = energy (:) + energy_local (:) dEdcn (:) = dEdcn (:) + dEdcn_local (:) dEdq (:) = dEdq (:) + dEdq_local (:) gradient (:, :) = gradient (:, :) + gradient_local (:, :) sigma (:, :) = sigma (:, :) + sigma_local (:, :) !$omp end critical (get_atm_dispersion_derivs_) deallocate ( energy_local ) deallocate ( dEdcn_local ) deallocate ( dEdq_local ) deallocate ( gradient_local ) deallocate ( sigma_local ) !$omp end parallel end subroutine get_atm_dispersion_derivs","tags":"","url":"proc/get_atm_dispersion_derivs.html"},{"title":"get_atm_dispersion_energy – DFT-D4","text":"public  subroutine get_atm_dispersion_energy(mol, trans, cutoff, s9, a1, a2, alp, r4r2, c6, energy) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: s9 Scaling for dispersion coefficients real(kind=wp), intent(in) :: a1 Scaling parameter for critical radius real(kind=wp), intent(in) :: a2 Offset parameter for critical radius real(kind=wp), intent(in) :: alp Exponent of zero damping function real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:) Dispersion energy Source Code subroutine get_atm_dispersion_energy ( mol , trans , cutoff , s9 , a1 , a2 , alp , r4r2 , & & c6 , energy ) !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Scaling for dispersion coefficients real ( wp ), intent ( in ) :: s9 !> Scaling parameter for critical radius real ( wp ), intent ( in ) :: a1 !> Offset parameter for critical radius real ( wp ), intent ( in ) :: a2 !> Exponent of zero damping function real ( wp ), intent ( in ) :: alp !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) integer :: iat , jat , kat , izp , jzp , kzp , jtr , ktr real ( wp ) :: vij ( 3 ), vjk ( 3 ), vik ( 3 ), r2ij , r2jk , r2ik , c6ij , c6jk , c6ik , triple real ( wp ) :: r0ij , r0jk , r0ik , r0 , r1 , r2 , r3 , r5 , rr , fdmp , ang real ( wp ) :: cutoff2 , c9 , dE ! Thread-private arrays for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:) cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, trans, c6, s9, a1, a2, alp, r4r2, cutoff2) & !$omp private(iat, jat, kat, izp, jzp, kzp, jtr, ktr, vij, vjk, vik, & !$omp& r2ij, r2jk, r2ik, c6ij, c6jk, c6ik, triple, r0ij, r0jk, r0ik, r0, & !$omp& r1, r2, r3, r5, rr, fdmp, ang, c9, dE) & !$omp shared(energy) & !$omp private(energy_local) allocate ( energy_local ( size ( energy , 1 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) c6ij = c6 ( jat , iat ) r0ij = a1 * sqrt ( 3 * r4r2 ( jzp ) * r4r2 ( izp )) + a2 do jtr = 1 , size ( trans , 2 ) vij (:) = mol % xyz (:, jat ) + trans (:, jtr ) - mol % xyz (:, iat ) r2ij = vij ( 1 ) * vij ( 1 ) + vij ( 2 ) * vij ( 2 ) + vij ( 3 ) * vij ( 3 ) if ( r2ij > cutoff2 . or . r2ij < epsilon ( 1.0_wp )) cycle do kat = 1 , jat kzp = mol % id ( kat ) c6ik = c6 ( kat , iat ) c6jk = c6 ( kat , jat ) c9 = - s9 * sqrt ( abs ( c6ij * c6ik * c6jk )) r0ik = a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( izp )) + a2 r0jk = a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( jzp )) + a2 r0 = r0ij * r0ik * r0jk triple = triple_scale ( iat , jat , kat ) do ktr = 1 , size ( trans , 2 ) vik (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, iat ) r2ik = vik ( 1 ) * vik ( 1 ) + vik ( 2 ) * vik ( 2 ) + vik ( 3 ) * vik ( 3 ) if ( r2ik > cutoff2 . or . r2ik < epsilon ( 1.0_wp )) cycle vjk (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, jat ) & & - trans (:, jtr ) r2jk = vjk ( 1 ) * vjk ( 1 ) + vjk ( 2 ) * vjk ( 2 ) + vjk ( 3 ) * vjk ( 3 ) if ( r2jk > cutoff2 . or . r2jk < epsilon ( 1.0_wp )) cycle r2 = r2ij * r2ik * r2jk r1 = sqrt ( r2 ) r3 = r2 * r1 r5 = r3 * r2 fdmp = 1.0_wp / ( 1.0_wp + 6.0_wp * ( r0 / r1 ) ** ( alp / 3.0_wp )) ang = 0.375_wp * ( r2ij + r2jk - r2ik ) * ( r2ij - r2jk + r2ik )& & * ( - r2ij + r2jk + r2ik ) / r5 + 1.0_wp / r3 rr = ang * fdmp dE = rr * c9 * triple energy_local ( iat ) = energy_local ( iat ) - dE / 3 energy_local ( jat ) = energy_local ( jat ) - dE / 3 energy_local ( kat ) = energy_local ( kat ) - dE / 3 end do end do end do end do end do !$omp end do !$omp critical (get_atm_dispersion_energy_) energy (:) = energy (:) + energy_local (:) !$omp end critical (get_atm_dispersion_energy_) deallocate ( energy_local ) !$omp end parallel end subroutine get_atm_dispersion_energy","tags":"","url":"proc/get_atm_dispersion_energy.html"},{"title":"d4_dgemv – DFT-D4","text":"private pure subroutine d4_dgemv(amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: amat (:,:) real(kind=dp), intent(in) :: xvec (:) real(kind=dp), intent(inout) :: yvec (:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans Source Code pure subroutine d4_dgemv ( amat , xvec , yvec , alpha , beta , trans ) real ( dp ), intent ( in ) :: amat (:, :) real ( dp ), intent ( in ) :: xvec (:) real ( dp ), intent ( inout ) :: yvec (:) real ( dp ), intent ( in ), optional :: alpha real ( dp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( dp ) :: a , b character ( len = 1 ) :: tra integer ( ik ) :: incx , incy , m , n , lda if ( present ( alpha )) then a = alpha else a = 1.0_dp end if if ( present ( beta )) then b = beta else b = 0 end if if ( present ( trans )) then tra = trans else tra = 'n' end if incx = 1 incy = 1 lda = max ( 1 , size ( amat , 1 )) m = size ( amat , 1 ) n = size ( amat , 2 ) call blas_gemv ( tra , m , n , a , amat , lda , xvec , incx , b , yvec , incy ) end subroutine d4_dgemv","tags":"","url":"proc/d4_dgemv.html"},{"title":"d4_dgemv312 – DFT-D4","text":"private  subroutine d4_dgemv312(amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), contiguous, target :: amat (:,:,:) real(kind=dp), intent(in) :: xvec (:) real(kind=dp), intent(inout), contiguous, target :: yvec (:,:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans Source Code subroutine d4_dgemv312 ( amat , xvec , yvec , alpha , beta , trans ) real ( dp ), intent ( in ), contiguous , target :: amat (:, :, :) real ( dp ), intent ( in ) :: xvec (:) real ( dp ), intent ( inout ), contiguous , target :: yvec (:, :) real ( dp ), intent ( in ), optional :: alpha real ( dp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( dp ), pointer :: aptr (:, :), yptr (:) character ( len = 1 ) :: tra if ( present ( trans )) then tra = trans else tra = 'n' end if if ( any ( tra == [ 'n' , 'N' ])) then aptr ( 1 : size ( amat , 1 ) * size ( amat , 2 ), 1 : size ( amat , 3 )) => amat yptr ( 1 : size ( yvec , 1 ) * size ( yvec , 2 )) => yvec else aptr ( 1 : size ( amat , 1 ), 1 : size ( amat , 2 ) * size ( amat , 3 )) => amat yptr ( 1 : size ( yvec , 1 ) * size ( yvec , 2 )) => yvec end if call d4_gemv ( aptr , xvec , yptr , alpha , beta , tra ) end subroutine d4_dgemv312","tags":"","url":"proc/d4_dgemv312.html"},{"title":"d4_dgemv321 – DFT-D4","text":"private  subroutine d4_dgemv321(amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), contiguous, target :: amat (:,:,:) real(kind=dp), intent(in), contiguous, target :: xvec (:,:) real(kind=dp), intent(inout) :: yvec (:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans Source Code subroutine d4_dgemv321 ( amat , xvec , yvec , alpha , beta , trans ) real ( dp ), intent ( in ), contiguous , target :: amat (:, :, :) real ( dp ), intent ( in ), contiguous , target :: xvec (:, :) real ( dp ), intent ( inout ) :: yvec (:) real ( dp ), intent ( in ), optional :: alpha real ( dp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( dp ), pointer :: aptr (:, :), xptr (:) character ( len = 1 ) :: tra if ( present ( trans )) then tra = trans else tra = 'n' end if if ( any ( tra == [ 'n' , 'N' ])) then aptr ( 1 : size ( amat , 1 ), 1 : size ( amat , 2 ) * size ( amat , 3 )) => amat xptr ( 1 : size ( xvec , 1 ) * size ( xvec , 2 )) => xvec else aptr ( 1 : size ( amat , 1 ) * size ( amat , 2 ), 1 : size ( amat , 3 )) => amat xptr ( 1 : size ( xvec , 1 ) * size ( xvec , 2 )) => xvec end if call d4_gemv ( aptr , xptr , yvec , alpha , beta , tra ) end subroutine d4_dgemv321","tags":"","url":"proc/d4_dgemv321.html"},{"title":"d4_sgemv – DFT-D4","text":"private pure subroutine d4_sgemv(amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: amat (:,:) real(kind=sp), intent(in) :: xvec (:) real(kind=sp), intent(inout) :: yvec (:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans Source Code pure subroutine d4_sgemv ( amat , xvec , yvec , alpha , beta , trans ) real ( sp ), intent ( in ) :: amat (:, :) real ( sp ), intent ( in ) :: xvec (:) real ( sp ), intent ( inout ) :: yvec (:) real ( sp ), intent ( in ), optional :: alpha real ( sp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( sp ) :: a , b character ( len = 1 ) :: tra integer ( ik ) :: incx , incy , m , n , lda if ( present ( alpha )) then a = alpha else a = 1.0_sp end if if ( present ( beta )) then b = beta else b = 0 end if if ( present ( trans )) then tra = trans else tra = 'n' end if incx = 1 incy = 1 lda = max ( 1 , size ( amat , 1 )) m = size ( amat , 1 ) n = size ( amat , 2 ) call blas_gemv ( tra , m , n , a , amat , lda , xvec , incx , b , yvec , incy ) end subroutine d4_sgemv","tags":"","url":"proc/d4_sgemv.html"},{"title":"d4_sgemv312 – DFT-D4","text":"private  subroutine d4_sgemv312(amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), contiguous, target :: amat (:,:,:) real(kind=sp), intent(in) :: xvec (:) real(kind=sp), intent(inout), contiguous, target :: yvec (:,:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans Source Code subroutine d4_sgemv312 ( amat , xvec , yvec , alpha , beta , trans ) real ( sp ), intent ( in ), contiguous , target :: amat (:, :, :) real ( sp ), intent ( in ) :: xvec (:) real ( sp ), intent ( inout ), contiguous , target :: yvec (:, :) real ( sp ), intent ( in ), optional :: alpha real ( sp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( sp ), pointer :: aptr (:, :), yptr (:) character ( len = 1 ) :: tra if ( present ( trans )) then tra = trans else tra = 'n' end if if ( any ( tra == [ 'n' , 'N' ])) then aptr ( 1 : size ( amat , 1 ) * size ( amat , 2 ), 1 : size ( amat , 3 )) => amat yptr ( 1 : size ( yvec , 1 ) * size ( yvec , 2 )) => yvec else aptr ( 1 : size ( amat , 1 ), 1 : size ( amat , 2 ) * size ( amat , 3 )) => amat yptr ( 1 : size ( yvec , 1 ) * size ( yvec , 2 )) => yvec end if call d4_gemv ( aptr , xvec , yptr , alpha , beta , tra ) end subroutine d4_sgemv312","tags":"","url":"proc/d4_sgemv312.html"},{"title":"d4_sgemv321 – DFT-D4","text":"private  subroutine d4_sgemv321(amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), contiguous, target :: amat (:,:,:) real(kind=sp), intent(in), contiguous, target :: xvec (:,:) real(kind=sp), intent(inout) :: yvec (:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans Source Code subroutine d4_sgemv321 ( amat , xvec , yvec , alpha , beta , trans ) real ( sp ), intent ( in ), contiguous , target :: amat (:, :, :) real ( sp ), intent ( in ), contiguous , target :: xvec (:, :) real ( sp ), intent ( inout ) :: yvec (:) real ( sp ), intent ( in ), optional :: alpha real ( sp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( sp ), pointer :: aptr (:, :), xptr (:) character ( len = 1 ) :: tra if ( present ( trans )) then tra = trans else tra = 'n' end if if ( any ( tra == [ 'n' , 'N' ])) then aptr ( 1 : size ( amat , 1 ), 1 : size ( amat , 2 ) * size ( amat , 3 )) => amat xptr ( 1 : size ( xvec , 1 ) * size ( xvec , 2 )) => xvec else aptr ( 1 : size ( amat , 1 ) * size ( amat , 2 ), 1 : size ( amat , 3 )) => amat xptr ( 1 : size ( xvec , 1 ) * size ( xvec , 2 )) => xvec end if call d4_gemv ( aptr , xptr , yvec , alpha , beta , tra ) end subroutine d4_sgemv321","tags":"","url":"proc/d4_sgemv321.html"},{"title":"blas_gemv – DFT-D4","text":"public interface blas_gemv Performs one of the matrix-vector operations y := alpha A x + beta y,   or   y := alpha A T x + beta y, where alpha and beta are scalars, x and y are vectors and A is an\nm by n matrix. Subroutines private pure subroutine dgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: n real(kind=dp), intent(in) :: alpha real(kind=dp), intent(in) :: a (lda,*) integer(kind=ik), intent(in) :: lda real(kind=dp), intent(in) :: x (*) integer(kind=ik), intent(in) :: incx real(kind=dp), intent(in) :: beta real(kind=dp), intent(inout) :: y (*) integer(kind=ik), intent(in) :: incy private pure subroutine sgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: n real(kind=sp), intent(in) :: alpha real(kind=sp), intent(in) :: a (lda,*) integer(kind=ik), intent(in) :: lda real(kind=sp), intent(in) :: x (*) integer(kind=ik), intent(in) :: incx real(kind=sp), intent(in) :: beta real(kind=sp), intent(inout) :: y (*) integer(kind=ik), intent(in) :: incy","tags":"","url":"interface/blas_gemv.html"},{"title":"d4_gemv – DFT-D4","text":"public interface d4_gemv Performs one of the matrix-vector operations y := alpha A x + beta y,   or   y := alpha A T x + beta y, where alpha and beta are scalars, x and y are vectors and A is an\nm by n matrix. Module Procedures private pure subroutine d4_sgemv (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: amat (:,:) real(kind=sp), intent(in) :: xvec (:) real(kind=sp), intent(inout) :: yvec (:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private pure subroutine d4_dgemv (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: amat (:,:) real(kind=dp), intent(in) :: xvec (:) real(kind=dp), intent(inout) :: yvec (:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_sgemv312 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), contiguous, target :: amat (:,:,:) real(kind=sp), intent(in) :: xvec (:) real(kind=sp), intent(inout), contiguous, target :: yvec (:,:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_sgemv321 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), contiguous, target :: amat (:,:,:) real(kind=sp), intent(in), contiguous, target :: xvec (:,:) real(kind=sp), intent(inout) :: yvec (:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_dgemv312 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), contiguous, target :: amat (:,:,:) real(kind=dp), intent(in) :: xvec (:) real(kind=dp), intent(inout), contiguous, target :: yvec (:,:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_dgemv321 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), contiguous, target :: amat (:,:,:) real(kind=dp), intent(in), contiguous, target :: xvec (:,:) real(kind=dp), intent(inout) :: yvec (:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans","tags":"","url":"interface/d4_gemv.html"},{"title":"get_dispersion – DFT-D4","text":"public  subroutine get_dispersion(mol, disp, param, cutoff, energy, gradient, sigma) Wrapper to handle the evaluation of dispersion energy and derivatives Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model class( damping_param ), intent(in) :: param Damping parameters type( realspace_cutoff ), intent(in) :: cutoff Realspace cutoffs real(kind=wp), intent(out) :: energy Dispersion energy real(kind=wp), intent(out), optional, contiguous :: gradient (:,:) Dispersion gradient real(kind=wp), intent(out), optional, contiguous :: sigma (:,:) Dispersion virial Source Code subroutine get_dispersion ( mol , disp , param , cutoff , energy , gradient , sigma ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dispersion !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp !> Damping parameters class ( damping_param ), intent ( in ) :: param !> Realspace cutoffs type ( realspace_cutoff ), intent ( in ) :: cutoff !> Dispersion energy real ( wp ), intent ( out ) :: energy !> Dispersion gradient real ( wp ), intent ( out ), contiguous , optional :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( out ), contiguous , optional :: sigma (:, :) logical :: grad integer :: mref real ( wp ), allocatable :: cn (:) real ( wp ), allocatable :: q (:), dqdr (:, :, :), dqdL (:, :, :) real ( wp ), allocatable :: gwvec (:, :, :), gwdcn (:, :, :), gwdq (:, :, :) real ( wp ), allocatable :: c6 (:, :), dc6dcn (:, :), dc6dq (:, :) real ( wp ), allocatable :: dEdcn (:), dEdq (:), energies (:) real ( wp ), allocatable :: lattr (:, :) mref = maxval ( disp % ref ) grad = present ( gradient ). or . present ( sigma ) allocate ( cn ( mol % nat )) call get_lattice_points ( mol % periodic , mol % lattice , cutoff % cn , lattr ) call get_coordination_number ( mol , lattr , cutoff % cn , disp % rcov , disp % en , cn ) allocate ( q ( mol % nat )) if ( grad ) allocate ( dqdr ( 3 , mol % nat , mol % nat ), dqdL ( 3 , 3 , mol % nat )) call get_charges ( mol , q , dqdr , dqdL ) allocate ( gwvec ( mref , mol % nat , disp % ncoup )) if ( grad ) allocate ( gwdcn ( mref , mol % nat , disp % ncoup ), gwdq ( mref , mol % nat , disp % ncoup )) call disp % weight_references ( mol , cn , q , gwvec , gwdcn , gwdq ) allocate ( c6 ( mol % nat , mol % nat )) if ( grad ) allocate ( dc6dcn ( mol % nat , mol % nat ), dc6dq ( mol % nat , mol % nat )) call disp % get_atomic_c6 ( mol , gwvec , gwdcn , gwdq , c6 , dc6dcn , dc6dq ) allocate ( energies ( mol % nat )) energies (:) = 0.0_wp if ( grad ) then allocate ( dEdcn ( mol % nat ), dEdq ( mol % nat )) dEdcn (:) = 0.0_wp dEdq (:) = 0.0_wp gradient (:, :) = 0.0_wp sigma (:, :) = 0.0_wp end if call get_lattice_points ( mol % periodic , mol % lattice , cutoff % disp2 , lattr ) call param % get_dispersion2 ( mol , lattr , cutoff % disp2 , disp % r4r2 , & & c6 , dc6dcn , dc6dq , energies , dEdcn , dEdq , gradient , sigma ) if ( grad ) then call d4_gemv ( dqdr , dEdq , gradient , beta = 1.0_wp ) call d4_gemv ( dqdL , dEdq , sigma , beta = 1.0_wp ) end if q (:) = 0.0_wp call disp % weight_references ( mol , cn , q , gwvec , gwdcn , gwdq ) call disp % get_atomic_c6 ( mol , gwvec , gwdcn , gwdq , c6 , dc6dcn , dc6dq ) call get_lattice_points ( mol % periodic , mol % lattice , cutoff % disp3 , lattr ) call param % get_dispersion3 ( mol , lattr , cutoff % disp3 , disp % r4r2 , & & c6 , dc6dcn , dc6dq , energies , dEdcn , dEdq , gradient , sigma ) if ( grad ) then call add_coordination_number_derivs ( mol , lattr , cutoff % cn , & & disp % rcov , disp % en , dEdcn , gradient , sigma ) end if energy = sum ( energies ) end subroutine get_dispersion","tags":"","url":"proc/get_dispersion.html"},{"title":"get_pairwise_dispersion – DFT-D4","text":"public  subroutine get_pairwise_dispersion(mol, disp, param, cutoff, energy2, energy3) Wrapper to handle the evaluation of pairwise representation of the dispersion energy Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model class( damping_param ), intent(in) :: param Damping parameters type( realspace_cutoff ), intent(in) :: cutoff Realspace cutoffs real(kind=wp), intent(out) :: energy2 (:,:) Pairwise representation of additive dispersion energy real(kind=wp), intent(out) :: energy3 (:,:) Pairwise representation of non-additive dispersion energy Source Code subroutine get_pairwise_dispersion ( mol , disp , param , cutoff , energy2 , energy3 ) !DEC$ ATTRIBUTES DLLEXPORT :: get_pairwise_dispersion !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp !> Damping parameters class ( damping_param ), intent ( in ) :: param !> Realspace cutoffs type ( realspace_cutoff ), intent ( in ) :: cutoff !> Pairwise representation of additive dispersion energy real ( wp ), intent ( out ) :: energy2 (:, :) !> Pairwise representation of non-additive dispersion energy real ( wp ), intent ( out ) :: energy3 (:, :) integer :: mref real ( wp ), allocatable :: cn (:), q (:), gwvec (:, :, :), c6 (:, :), lattr (:, :) mref = maxval ( disp % ref ) allocate ( cn ( mol % nat )) call get_lattice_points ( mol % periodic , mol % lattice , cutoff % cn , lattr ) call get_coordination_number ( mol , lattr , cutoff % cn , disp % rcov , disp % en , cn ) allocate ( q ( mol % nat )) call get_charges ( mol , q ) allocate ( gwvec ( mref , mol % nat , disp % ncoup )) call disp % weight_references ( mol , cn , q , gwvec ) allocate ( c6 ( mol % nat , mol % nat )) call disp % get_atomic_c6 ( mol , gwvec , c6 = c6 ) energy2 (:, :) = 0.0_wp energy3 (:, :) = 0.0_wp call get_lattice_points ( mol % periodic , mol % lattice , cutoff % disp2 , lattr ) call param % get_pairwise_dispersion2 ( mol , lattr , cutoff % disp2 , disp % r4r2 , & & c6 , energy2 ) q (:) = 0.0_wp call disp % weight_references ( mol , cn , q , gwvec ) call disp % get_atomic_c6 ( mol , gwvec , c6 = c6 ) call get_lattice_points ( mol % periodic , mol % lattice , cutoff % disp3 , lattr ) call param % get_pairwise_dispersion3 ( mol , lattr , cutoff % disp3 , disp % r4r2 , & & c6 , energy3 ) end subroutine get_pairwise_dispersion","tags":"","url":"proc/get_pairwise_dispersion.html"},{"title":"get_properties – DFT-D4","text":"public  subroutine get_properties(mol, disp, cutoff, cn, q, c6, alpha) Wrapper to handle the evaluation of properties related to this dispersion model Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model type( realspace_cutoff ), intent(in) :: cutoff Realspace cutoffs real(kind=wp), intent(out) :: cn (:) Coordination number real(kind=wp), intent(out), contiguous :: q (:) Atomic partial charges real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients real(kind=wp), intent(out) :: alpha (:) Static polarizabilities Source Code subroutine get_properties ( mol , disp , cutoff , cn , q , c6 , alpha ) !DEC$ ATTRIBUTES DLLEXPORT :: get_properties !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp !> Realspace cutoffs type ( realspace_cutoff ), intent ( in ) :: cutoff !> Coordination number real ( wp ), intent ( out ) :: cn (:) !> Atomic partial charges real ( wp ), intent ( out ), contiguous :: q (:) !> C6 coefficients real ( wp ), intent ( out ) :: c6 (:, :) !> Static polarizabilities real ( wp ), intent ( out ) :: alpha (:) integer :: mref real ( wp ), allocatable :: gwvec (:, :, :), lattr (:, :) mref = maxval ( disp % ref ) call get_lattice_points ( mol % periodic , mol % lattice , cutoff % cn , lattr ) call get_coordination_number ( mol , lattr , cutoff % cn , disp % rcov , disp % en , cn ) call get_charges ( mol , q ) allocate ( gwvec ( mref , mol % nat , disp % ncoup )) call disp % weight_references ( mol , cn , q , gwvec ) call disp % get_atomic_c6 ( mol , gwvec , c6 = c6 ) call disp % get_polarizabilities ( mol , gwvec , alpha = alpha ) end subroutine get_properties","tags":"","url":"proc/get_properties.html"},{"title":"new_dispersion_model – DFT-D4","text":"public  subroutine new_dispersion_model(error, d4, mol, model, ga, gc, wf) Wrapper for creating a new dispersion model (D4 or D4S) from molecular \nstructure input using a given model string. Defaults to D4 if no model\nis specified. Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error Error handling class( dispersion_model ), intent(out), allocatable :: d4 Dispersion model to be returned type(structure_type), intent(in) :: mol Molecular structure data character(len=*), intent(in), optional :: model Dispersion model to be used real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness real(kind=wp), intent(in), optional :: wf Weighting factor for coordination number interpolation Source Code subroutine new_dispersion_model ( error , d4 , mol , model , ga , gc , wf ) !> Error handling type ( error_type ), allocatable , intent ( out ) :: error !> Dispersion model to be returned class ( dispersion_model ), allocatable , intent ( out ) :: d4 !> Molecular structure data type ( structure_type ), intent ( in ) :: mol !> Dispersion model to be used character ( len =* ), intent ( in ), optional :: model !> Charge scaling height real ( wp ), intent ( in ), optional :: ga !> Charge scaling steepness real ( wp ), intent ( in ), optional :: gc !> Weighting factor for coordination number interpolation real ( wp ), intent ( in ), optional :: wf character ( len = :), allocatable :: mdl if ( present ( model )) then mdl = lowercase ( trim ( model )) else mdl = \"d4\" end if if ( mdl == \"d4\" ) then block type ( d4_model ), allocatable :: tmp allocate ( tmp ) call new_d4_model ( error , tmp , mol , ga = ga , gc = gc , wf = wf ) call move_alloc ( tmp , d4 ) end block else if ( mdl == \"d4s\" ) then block type ( d4s_model ), allocatable :: tmp allocate ( tmp ) call new_d4s_model ( error , tmp , mol , ga = ga , gc = gc ) call move_alloc ( tmp , d4 ) end block else call fatal_error ( error , \"Unknown model selected\" ) end if end subroutine new_dispersion_model","tags":"","url":"proc/new_dispersion_model.html"},{"title":"get_atomic_c6 – DFT-D4","text":"private  subroutine get_atomic_c6(self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq) Calculate atomic dispersion coefficients and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Type Bound d4_model Arguments Type Intent Optional Attributes Name class( d4_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(out), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(out), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charge Source Code subroutine get_atomic_c6 ( self , mol , gwvec , gwdcn , gwdq , c6 , dc6dcn , dc6dq ) !DEC$ ATTRIBUTES DLLEXPORT :: get_atomic_c6 !> Instance of the dispersion model class ( d4_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Weighting function for the atomic reference systems real ( wp ), intent ( in ) :: gwvec (:, :, :) !> Derivative of the weighting function w.r.t. the coordination number real ( wp ), intent ( in ), optional :: gwdcn (:, :, :) !> Derivative of the weighting function w.r.t. the partial charge real ( wp ), intent ( in ), optional :: gwdq (:, :, :) !> C6 coefficients for all atom pairs. real ( wp ), intent ( out ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( out ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charge real ( wp ), intent ( out ), optional :: dc6dq (:, :) integer :: iat , jat , izp , jzp , iref , jref real ( wp ) :: refc6 , dc6 , dc6dcni , dc6dcnj , dc6dqi , dc6dqj if ( present ( gwdcn ). and . present ( dc6dcn ) & & . and . present ( gwdq ). and . present ( dc6dq )) then c6 (:, :) = 0.0_wp dc6dcn (:, :) = 0.0_wp dc6dq (:, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(c6, dc6dcn, dc6dq, mol, self, gwvec, gwdcn, gwdq) & !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6, dc6dqi, dc6dqj, & !$omp& dc6dcni, dc6dcnj) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) dc6 = 0.0_wp dc6dcni = 0.0_wp dc6dcnj = 0.0_wp dc6dqi = 0.0_wp dc6dqj = 0.0_wp do iref = 1 , self % ref ( izp ) do jref = 1 , self % ref ( jzp ) refc6 = self % c6 ( iref , jref , izp , jzp ) dc6 = dc6 + gwvec ( iref , iat , 1 ) * gwvec ( jref , jat , 1 ) * refc6 dc6dcni = dc6dcni + gwdcn ( iref , iat , 1 ) * gwvec ( jref , jat , 1 ) * refc6 dc6dcnj = dc6dcnj + gwvec ( iref , iat , 1 ) * gwdcn ( jref , jat , 1 ) * refc6 dc6dqi = dc6dqi + gwdq ( iref , iat , 1 ) * gwvec ( jref , jat , 1 ) * refc6 dc6dqj = dc6dqj + gwvec ( iref , iat , 1 ) * gwdq ( jref , jat , 1 ) * refc6 end do end do c6 ( iat , jat ) = dc6 c6 ( jat , iat ) = dc6 dc6dcn ( iat , jat ) = dc6dcni dc6dcn ( jat , iat ) = dc6dcnj dc6dq ( iat , jat ) = dc6dqi dc6dq ( jat , iat ) = dc6dqj end do end do else c6 (:, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(c6, mol, self, gwvec) & !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) dc6 = 0.0_wp do iref = 1 , self % ref ( izp ) do jref = 1 , self % ref ( jzp ) refc6 = self % c6 ( iref , jref , izp , jzp ) dc6 = dc6 + gwvec ( iref , iat , 1 ) * gwvec ( jref , jat , 1 ) * refc6 end do end do c6 ( iat , jat ) = dc6 c6 ( jat , iat ) = dc6 end do end do end if end subroutine get_atomic_c6","tags":"","url":"proc/get_atomic_c6.html"},{"title":"get_polarizabilities – DFT-D4","text":"private  subroutine get_polarizabilities(self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq) Calculate atomic polarizabilities and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Type Bound d4_model Arguments Type Intent Optional Attributes Name class( d4_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: alpha (:) Static polarizabilities for all atoms. real(kind=wp), intent(out), optional :: dadcn (:) Derivative of the polarizibility w.r.t. the coordination number real(kind=wp), intent(out), optional :: dadq (:) Derivative of the polarizibility w.r.t. the partial charge Source Code subroutine get_polarizabilities ( self , mol , gwvec , gwdcn , gwdq , alpha , dadcn , dadq ) !DEC$ ATTRIBUTES DLLEXPORT :: get_polarizabilities !> Instance of the dispersion model class ( d4_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Weighting function for the atomic reference systems real ( wp ), intent ( in ) :: gwvec (:, :, :) !> Derivative of the weighting function w.r.t. the coordination number real ( wp ), intent ( in ), optional :: gwdcn (:, :, :) !> Derivative of the weighting function w.r.t. the partial charge real ( wp ), intent ( in ), optional :: gwdq (:, :, :) !> Static polarizabilities for all atoms. real ( wp ), intent ( out ) :: alpha (:) !> Derivative of the polarizibility w.r.t. the coordination number real ( wp ), intent ( out ), optional :: dadcn (:) !> Derivative of the polarizibility w.r.t. the partial charge real ( wp ), intent ( out ), optional :: dadq (:) integer :: iat , izp , iref real ( wp ) :: refa , da , dadcni , dadqi if ( present ( gwdcn ). and . present ( dadcn ) & & . and . present ( gwdq ). and . present ( dadq )) then alpha (:) = 0.0_wp dadcn (:) = 0.0_wp dadq (:) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(alpha, dadcn, dadq, mol, self, gwvec, gwdcn, gwdq) & !$omp private(iat, izp, iref, refa, da, dadqi, dadcni) do iat = 1 , mol % nat izp = mol % id ( iat ) da = 0.0_wp dadcni = 0.0_wp dadqi = 0.0_wp do iref = 1 , self % ref ( izp ) refa = self % aiw ( 1 , iref , izp ) da = da + gwvec ( iref , iat , 1 ) * refa dadcni = dadcni + gwdcn ( iref , iat , 1 ) * refa dadqi = dadqi + gwdq ( iref , iat , 1 ) * refa end do alpha ( iat ) = da dadcn ( iat ) = dadcni dadq ( iat ) = dadqi end do else alpha (:) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(alpha, mol, self, gwvec) private(iat, izp, iref, refa, da) do iat = 1 , mol % nat izp = mol % id ( iat ) da = 0.0_wp do iref = 1 , self % ref ( izp ) da = da + gwvec ( iref , iat , 1 ) * self % aiw ( 1 , iref , izp ) end do alpha ( iat ) = da end do end if end subroutine get_polarizabilities","tags":"","url":"proc/get_polarizabilities.html"},{"title":"new_d4_model_no_checks – DFT-D4","text":"private  subroutine new_d4_model_no_checks(d4, mol, ga, gc, wf, ref) Create new dispersion model from molecular structure input without\nchecking for supported elements (old/compatibility version) Arguments Type Intent Optional Attributes Name type( d4_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness real(kind=wp), intent(in), optional :: wf Weighting factor for coordination number interpolation integer, intent(in), optional :: ref Reference charge selection Source Code subroutine new_d4_model_no_checks ( d4 , mol , ga , gc , wf , ref ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_no_checks !> Instance of the dispersion model type ( d4_model ), intent ( out ) :: d4 !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Charge scaling height real ( wp ), intent ( in ), optional :: ga !> Charge scaling steepness real ( wp ), intent ( in ), optional :: gc !> Weighting factor for coordination number interpolation real ( wp ), intent ( in ), optional :: wf !> Reference charge selection integer , intent ( in ), optional :: ref integer :: isp , izp , iref , jsp , jzp , jref integer :: mref , ref_charge real ( wp ) :: aiw ( 23 ), c6 real ( wp ), parameter :: thopi = 3.0_wp / pi d4 % ncoup = 1 if ( present ( ref )) then ref_charge = ref else ref_charge = d4_ref % eeq end if if ( present ( ga )) then d4 % ga = ga else d4 % ga = ga_default end if if ( present ( gc )) then d4 % gc = gc else d4 % gc = gc_default end if if ( present ( wf )) then d4 % wf = wf else d4 % wf = wf_default end if allocate ( d4 % rcov ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % rcov ( isp ) = get_covalent_rad ( izp ) end do allocate ( d4 % en ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % en ( isp ) = get_electronegativity ( izp ) end do allocate ( d4 % zeff ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % zeff ( isp ) = get_effective_charge ( izp ) end do allocate ( d4 % eta ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % eta ( isp ) = get_hardness ( izp ) end do allocate ( d4 % r4r2 ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % r4r2 ( isp ) = get_r4r2_val ( izp ) end do allocate ( d4 % ref ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % ref ( isp ) = get_nref ( izp ) end do mref = maxval ( d4 % ref ) allocate ( d4 % cn ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refcn ( d4 % cn (:, isp ), izp ) end do allocate ( d4 % q ( mref , mol % nid )) allocate ( d4 % aiw ( 23 , mref , mol % nid )) if ( ref_charge == d4_ref % gfn2 ) then do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_gfn2 ( d4 % q (:, isp ), izp ) call set_refalpha_gfn2 ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do else if ( ref_charge /= d4_ref % eeq ) then write ( output_unit , '(a)' ) \"[Info] Unsupported option for reference charge. Defaulting to EEQ charges.\" end if do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_eeq ( d4 % q (:, isp ), izp ) call set_refalpha_eeq ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do end if allocate ( d4 % ngw ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refgw ( d4 % ngw (:, isp ), izp ) end do allocate ( d4 % c6 ( mref , mref , mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , isp jzp = mol % num ( jsp ) do iref = 1 , d4 % ref ( isp ) do jref = 1 , d4 % ref ( jsp ) aiw (:) = d4 % aiw (:, iref , isp ) * d4 % aiw (:, jref , jsp ) c6 = thopi * trapzd ( aiw ) d4 % c6 ( jref , iref , jsp , isp ) = c6 d4 % c6 ( iref , jref , isp , jsp ) = c6 end do end do end do end do end subroutine new_d4_model_no_checks","tags":"","url":"proc/new_d4_model_no_checks.html"},{"title":"new_d4_model_with_checks – DFT-D4","text":"private  subroutine new_d4_model_with_checks(error, d4, mol, ga, gc, wf, ref) Create new D4 dispersion model from molecular structure input Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error Error handling type( d4_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness real(kind=wp), intent(in), optional :: wf Weighting factor for coordination number interpolation integer, intent(in), optional :: ref Reference charge selection Source Code subroutine new_d4_model_with_checks ( error , d4 , mol , ga , gc , wf , ref ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_with_checks !> Instance of the dispersion model type ( d4_model ), intent ( out ) :: d4 !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Error handling type ( error_type ), allocatable , intent ( out ) :: error !> Charge scaling height real ( wp ), intent ( in ), optional :: ga !> Charge scaling steepness real ( wp ), intent ( in ), optional :: gc !> Weighting factor for coordination number interpolation real ( wp ), intent ( in ), optional :: wf !> Reference charge selection integer , intent ( in ), optional :: ref integer :: isp , izp , iref , jsp , jzp , jref integer :: mref , ref_charge real ( wp ) :: aiw ( 23 ), c6 real ( wp ), parameter :: thopi = 3.0_wp / pi ! check for unsupported elements (104 (Rf) - 111 (Rg)) do isp = 1 , mol % nid if ( mol % num ( isp ) > 103 . and . mol % num ( isp ) < 112 ) then call fatal_error ( error , \"Structure contains unsupported element '\" // trim ( mol % sym ( isp )) // \"'\" ) return end if end do d4 % ncoup = 1 if ( present ( ref )) then ref_charge = ref else ref_charge = d4_ref % eeq end if if ( present ( ga )) then d4 % ga = ga else d4 % ga = ga_default end if if ( present ( gc )) then d4 % gc = gc else d4 % gc = gc_default end if if ( present ( wf )) then d4 % wf = wf else d4 % wf = wf_default end if allocate ( d4 % rcov ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % rcov ( isp ) = get_covalent_rad ( izp ) end do allocate ( d4 % en ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % en ( isp ) = get_electronegativity ( izp ) end do allocate ( d4 % zeff ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % zeff ( isp ) = get_effective_charge ( izp ) end do allocate ( d4 % eta ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % eta ( isp ) = get_hardness ( izp ) end do allocate ( d4 % r4r2 ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % r4r2 ( isp ) = get_r4r2_val ( izp ) end do allocate ( d4 % ref ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % ref ( isp ) = get_nref ( izp ) end do mref = maxval ( d4 % ref ) allocate ( d4 % cn ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refcn ( d4 % cn (:, isp ), izp ) end do allocate ( d4 % q ( mref , mol % nid )) allocate ( d4 % aiw ( 23 , mref , mol % nid )) select case ( ref_charge ) case default call fatal_error ( error , \"Unsupported option for reference charges\" ) return case ( d4_ref % eeq ) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_eeq ( d4 % q (:, isp ), izp ) call set_refalpha_eeq ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do case ( d4_ref % gfn2 ) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_gfn2 ( d4 % q (:, isp ), izp ) call set_refalpha_gfn2 ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do end select allocate ( d4 % ngw ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refgw ( d4 % ngw (:, isp ), izp ) end do allocate ( d4 % c6 ( mref , mref , mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , isp jzp = mol % num ( jsp ) do iref = 1 , d4 % ref ( isp ) do jref = 1 , d4 % ref ( jsp ) aiw (:) = d4 % aiw (:, iref , isp ) * d4 % aiw (:, jref , jsp ) c6 = thopi * trapzd ( aiw ) d4 % c6 ( jref , iref , jsp , isp ) = c6 d4 % c6 ( iref , jref , isp , jsp ) = c6 end do end do end do end do end subroutine new_d4_model_with_checks","tags":"","url":"proc/new_d4_model_with_checks.html"},{"title":"weight_references – DFT-D4","text":"private  subroutine weight_references(self, mol, cn, q, gwvec, gwdcn, gwdq) Calculate the weights of the reference system and the derivatives w.r.t.\ncoordination number for later use. Type Bound d4_model Arguments Type Intent Optional Attributes Name class( d4_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: cn (:) Coordination number of every atom real(kind=wp), intent(in) :: q (:) Partial charge of every atom real(kind=wp), intent(out) :: gwvec (:,:,:) weighting for the atomic reference systems real(kind=wp), intent(out), optional :: gwdcn (:,:,:) derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(out), optional :: gwdq (:,:,:) derivative of the weighting function w.r.t. the charge scaling Source Code subroutine weight_references ( self , mol , cn , q , gwvec , gwdcn , gwdq ) !DEC$ ATTRIBUTES DLLEXPORT :: weight_references !> Instance of the dispersion model class ( d4_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Coordination number of every atom real ( wp ), intent ( in ) :: cn (:) !> Partial charge of every atom real ( wp ), intent ( in ) :: q (:) !> weighting for the atomic reference systems real ( wp ), intent ( out ) :: gwvec (:, :, :) !> derivative of the weighting function w.r.t. the coordination number real ( wp ), intent ( out ), optional :: gwdcn (:, :, :) !> derivative of the weighting function w.r.t. the charge scaling real ( wp ), intent ( out ), optional :: gwdq (:, :, :) integer :: iat , izp , iref , igw real ( wp ) :: norm , dnorm , gw , expw , expd , gwk , dgwk , wf , zi , gi , maxcn if ( present ( gwdcn ) . and . present ( gwdq )) then gwvec (:, :, :) = 0.0_wp gwdcn (:, :, :) = 0.0_wp gwdq (:, :, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(gwvec, gwdcn, gwdq, mol, self, cn, q) private(iat, izp, iref, & !$omp& igw, norm, dnorm, gw, expw, expd, gwk, dgwk, wf, zi, gi, maxcn) do iat = 1 , mol % nat izp = mol % id ( iat ) zi = self % zeff ( izp ) gi = self % eta ( izp ) * self % gc norm = 0.0_wp dnorm = 0.0_wp do iref = 1 , self % ref ( izp ) do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf gw = weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) norm = norm + gw dnorm = dnorm + 2 * wf * ( self % cn ( iref , izp ) - cn ( iat )) * gw end do end do norm = 1.0_wp / norm do iref = 1 , self % ref ( izp ) expw = 0.0_wp expd = 0.0_wp do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf gw = weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) expw = expw + gw expd = expd + 2 * wf * ( self % cn ( iref , izp ) - cn ( iat )) * gw end do gwk = expw * norm if ( is_exceptional ( gwk )) then maxcn = maxval ( self % cn (: self % ref ( izp ), izp )) if ( abs ( maxcn - self % cn ( iref , izp )) < 1e-12_wp ) then gwk = 1.0_wp else gwk = 0.0_wp end if end if gwvec ( iref , iat , 1 ) = gwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) gwdq ( iref , iat , 1 ) = gwk * dzeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) dgwk = norm * ( expd - expw * dnorm * norm ) if ( is_exceptional ( dgwk )) then dgwk = 0.0_wp end if gwdcn ( iref , iat , 1 ) = dgwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) end do end do else gwvec (:, :, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(gwvec, mol, self, cn, q) & !$omp private(iat, izp, iref, igw, norm, gw, expw, gwk, wf, zi, gi, maxcn) do iat = 1 , mol % nat izp = mol % id ( iat ) zi = self % zeff ( izp ) gi = self % eta ( izp ) * self % gc norm = 0.0_wp do iref = 1 , self % ref ( izp ) do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf norm = norm + weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) end do end do norm = 1.0_wp / norm do iref = 1 , self % ref ( izp ) expw = 0.0_wp do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf expw = expw + weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) end do gwk = expw * norm if ( is_exceptional ( gwk )) then maxcn = maxval ( self % cn (: self % ref ( izp ), izp )) if ( abs ( maxcn - self % cn ( iref , izp )) < 1e-12_wp ) then gwk = 1.0_wp else gwk = 0.0_wp end if end if gwvec ( iref , iat , 1 ) = gwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) end do end do end if end subroutine weight_references","tags":"","url":"proc/weight_references.html"},{"title":"new_d4_model – DFT-D4","text":"public interface new_d4_model Create new D4 dispersion model from molecular structure input Module Procedures private  subroutine new_d4_model_no_checks (d4, mol, ga, gc, wf, ref) Create new dispersion model from molecular structure input without\nchecking for supported elements (old/compatibility version) Arguments Type Intent Optional Attributes Name type( d4_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness real(kind=wp), intent(in), optional :: wf Weighting factor for coordination number interpolation integer, intent(in), optional :: ref Reference charge selection private  subroutine new_d4_model_with_checks (error, d4, mol, ga, gc, wf, ref) Create new D4 dispersion model from molecular structure input Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error Error handling type( d4_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness real(kind=wp), intent(in), optional :: wf Weighting factor for coordination number interpolation integer, intent(in), optional :: ref Reference charge selection","tags":"","url":"interface/new_d4_model.html"},{"title":"lowercase – DFT-D4","text":"public pure function lowercase(str) result(lcstr) Convert string to lower case Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=len_trim) Source Code pure function lowercase ( str ) result ( lcstr ) character ( len =* ), intent ( in ) :: str character ( len = len_trim ( str )) :: lcstr integer :: ilen , ioffset , iquote , i , iav , iqc ilen = len_trim ( str ) ioffset = iachar ( 'A' ) - iachar ( 'a' ) iquote = 0 lcstr = str do i = 1 , ilen iav = iachar ( str ( i : i )) if ( iquote == 0 . and . ( iav == 34 . or . iav == 39 )) then iquote = 1 iqc = iav cycle endif if ( iquote == 1 . and . iav == iqc ) then iquote = 0 cycle endif if ( iquote == 1 ) cycle if ( iav >= iachar ( 'A' ) . and . iav <= iachar ( 'Z' )) then lcstr ( i : i ) = achar ( iav - ioffset ) else lcstr ( i : i ) = str ( i : i ) endif enddo end function lowercase","tags":"","url":"proc/lowercase.html"},{"title":"shift_back_abc – DFT-D4","text":"public elemental function shift_back_abc(in) result(out) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: in fractional coordinate in (-∞,+∞) Return Value real(kind=wp) fractional coordinate in [0,1) Source Code elemental function shift_back_abc ( in ) result ( out ) !> fractional coordinate in (-∞,+∞) real ( wp ), intent ( in ) :: in !> fractional coordinate in [0,1) real ( wp ) :: out real ( wp ), parameter :: p_pbc_eps = 1.0e-14_wp out = in if ( in < ( 0.0_wp - p_pbc_eps )) & out = in + real ( ceiling ( - in ), wp ) if ( in > ( 1.0_wp + p_pbc_eps )) & out = in - real ( floor ( in ), wp ) if ( abs ( in - 1.0_wp ) < p_pbc_eps ) & out = in - 1.0_wp end function shift_back_abc","tags":"","url":"proc/shift_back_abc.html"},{"title":"wrap_to_central_cell – DFT-D4","text":"public  subroutine wrap_to_central_cell(xyz, lattice, periodic) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(inout) :: xyz (:,:) real(kind=wp), intent(in) :: lattice (:,:) logical, intent(in) :: periodic (:) Source Code subroutine wrap_to_central_cell ( xyz , lattice , periodic ) !DEC$ ATTRIBUTES DLLEXPORT :: wrap_to_central_cell real ( wp ), intent ( inout ) :: xyz (:, :) real ( wp ), intent ( in ) :: lattice (:, :) logical , intent ( in ) :: periodic (:) real ( wp ) :: invlat ( 3 , 3 ), vec ( 3 ) integer :: iat if (. not . any ( periodic )) return invlat = matinv_3x3 ( lattice ) do iat = 1 , size ( xyz , 2 ) vec (:) = matmul ( invlat , xyz (:, iat )) vec (:) = shift_back_abc ( vec ) xyz (:, iat ) = matmul ( lattice , vec ) end do end subroutine wrap_to_central_cell","tags":"","url":"proc/wrap_to_central_cell.html"},{"title":"get_dftd4_version – DFT-D4","text":"public  subroutine get_dftd4_version(major, minor, patch, string) Getter function to retrieve dftd4 version Arguments Type Intent Optional Attributes Name integer, intent(out), optional :: major Major version number of the dftd4 version integer, intent(out), optional :: minor Minor version number of the dftd4 version integer, intent(out), optional :: patch Patch version number of the dftd4 version character(len=:), intent(out), optional, allocatable :: string String representation of the dftd4 version Source Code subroutine get_dftd4_version ( major , minor , patch , string ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dftd4_version !> Major version number of the dftd4 version integer , intent ( out ), optional :: major !> Minor version number of the dftd4 version integer , intent ( out ), optional :: minor !> Patch version number of the dftd4 version integer , intent ( out ), optional :: patch !> String representation of the dftd4 version character ( len = :), allocatable , intent ( out ), optional :: string if ( present ( major )) then major = dftd4_version_compact ( 1 ) end if if ( present ( minor )) then minor = dftd4_version_compact ( 2 ) end if if ( present ( patch )) then patch = dftd4_version_compact ( 3 ) end if if ( present ( string )) then string = dftd4_version_string end if end subroutine get_dftd4_version","tags":"","url":"proc/get_dftd4_version.html"},{"title":"get_hardness_num – DFT-D4","text":"private elemental function get_hardness_num(num) result(eta) Get chemical hardness for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Chemical hardness Source Code elemental function get_hardness_num ( num ) result ( eta ) !> Atomic number integer , intent ( in ) :: num !> Chemical hardness real ( wp ) :: eta if ( num > 0 . and . num <= size ( chemical_hardness )) then eta = chemical_hardness ( num ) else eta = 0.0_wp end if end function get_hardness_num","tags":"","url":"proc/get_hardness_num.html"},{"title":"get_hardness_sym – DFT-D4","text":"private elemental function get_hardness_sym(sym) result(eta) Get chemical hardness for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Chemical hardness Source Code elemental function get_hardness_sym ( sym ) result ( eta ) !> Element symbol character ( len =* ), intent ( in ) :: sym !> Chemical hardness real ( wp ) :: eta eta = get_hardness ( to_number ( sym )) end function get_hardness_sym","tags":"","url":"proc/get_hardness_sym.html"},{"title":"get_hardness – DFT-D4","text":"public interface get_hardness Module Procedures private elemental function get_hardness_num (num) result(eta) Get chemical hardness for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Chemical hardness private elemental function get_hardness_sym (sym) result(eta) Get chemical hardness for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Chemical hardness","tags":"","url":"interface/get_hardness.html"},{"title":"dzeta – DFT-D4","text":"public elemental function dzeta(a, c, qref, qmod) derivative of charge scaling function w.r.t. charge Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: a real(kind=wp), intent(in) :: c real(kind=wp), intent(in) :: qref real(kind=wp), intent(in) :: qmod Return Value real(kind=wp) Source Code elemental function dzeta ( a , c , qref , qmod ) real ( wp ), intent ( in ) :: a real ( wp ), intent ( in ) :: c real ( wp ), intent ( in ) :: qref real ( wp ), intent ( in ) :: qmod real ( wp ) :: dzeta intrinsic :: exp if ( qmod < 0.0_wp ) then dzeta = 0.0_wp else dzeta = - a * c * exp ( c * ( 1.0_wp - qref / qmod ) ) & & * zeta ( a , c , qref , qmod ) * qref / ( qmod ** 2 ) endif end function dzeta","tags":"","url":"proc/dzeta.html"},{"title":"is_exceptional – DFT-D4","text":"public elemental function is_exceptional(val) Check whether we are dealing with an exceptional value, NaN or Inf Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: val Return Value logical Source Code elemental function is_exceptional ( val ) real ( wp ), intent ( in ) :: val logical :: is_exceptional is_exceptional = ieee_is_nan ( val ) . or . abs ( val ) > huge ( val ) end function is_exceptional","tags":"","url":"proc/is_exceptional.html"},{"title":"trapzd – DFT-D4","text":"public pure function trapzd(pol) numerical Casimir–Polder integration Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: pol (23) Return Value real(kind=wp) Source Code pure function trapzd ( pol ) real ( wp ), intent ( in ) :: pol ( 23 ) real ( wp ) :: trapzd real ( wp ), parameter :: freq ( 23 ) = [ & & 0.000001_wp , 0.050000_wp , 0.100000_wp , & & 0.200000_wp , 0.300000_wp , 0.400000_wp , & & 0.500000_wp , 0.600000_wp , 0.700000_wp , & & 0.800000_wp , 0.900000_wp , 1.000000_wp , & & 1.200000_wp , 1.400000_wp , 1.600000_wp , & & 1.800000_wp , 2.000000_wp , 2.500000_wp , & & 3.000000_wp , 4.000000_wp , 5.000000_wp , & & 7.500000_wp , 1 0.00000_wp ] real ( wp ), parameter :: weights ( 23 ) = 0.5_wp * [ & & ( freq ( 2 ) - freq ( 1 ) ), & & ( freq ( 2 ) - freq ( 1 ) ) + ( freq ( 3 ) - freq ( 2 ) ), & & ( freq ( 3 ) - freq ( 2 ) ) + ( freq ( 4 ) - freq ( 3 ) ), & & ( freq ( 4 ) - freq ( 3 ) ) + ( freq ( 5 ) - freq ( 4 ) ), & & ( freq ( 5 ) - freq ( 4 ) ) + ( freq ( 6 ) - freq ( 5 ) ), & & ( freq ( 6 ) - freq ( 5 ) ) + ( freq ( 7 ) - freq ( 6 ) ), & & ( freq ( 7 ) - freq ( 6 ) ) + ( freq ( 8 ) - freq ( 7 ) ), & & ( freq ( 8 ) - freq ( 7 ) ) + ( freq ( 9 ) - freq ( 8 ) ), & & ( freq ( 9 ) - freq ( 8 ) ) + ( freq ( 10 ) - freq ( 9 ) ), & & ( freq ( 10 ) - freq ( 9 ) ) + ( freq ( 11 ) - freq ( 10 ) ), & & ( freq ( 11 ) - freq ( 10 ) ) + ( freq ( 12 ) - freq ( 11 ) ), & & ( freq ( 12 ) - freq ( 11 ) ) + ( freq ( 13 ) - freq ( 12 ) ), & & ( freq ( 13 ) - freq ( 12 ) ) + ( freq ( 14 ) - freq ( 13 ) ), & & ( freq ( 14 ) - freq ( 13 ) ) + ( freq ( 15 ) - freq ( 14 ) ), & & ( freq ( 15 ) - freq ( 14 ) ) + ( freq ( 16 ) - freq ( 15 ) ), & & ( freq ( 16 ) - freq ( 15 ) ) + ( freq ( 17 ) - freq ( 16 ) ), & & ( freq ( 17 ) - freq ( 16 ) ) + ( freq ( 18 ) - freq ( 17 ) ), & & ( freq ( 18 ) - freq ( 17 ) ) + ( freq ( 19 ) - freq ( 18 ) ), & & ( freq ( 19 ) - freq ( 18 ) ) + ( freq ( 20 ) - freq ( 19 ) ), & & ( freq ( 20 ) - freq ( 19 ) ) + ( freq ( 21 ) - freq ( 20 ) ), & & ( freq ( 21 ) - freq ( 20 ) ) + ( freq ( 22 ) - freq ( 21 ) ), & & ( freq ( 22 ) - freq ( 21 ) ) + ( freq ( 23 ) - freq ( 22 ) ), & & ( freq ( 23 ) - freq ( 22 ) ) ] trapzd = sum ( pol * weights ) end function trapzd","tags":"","url":"proc/trapzd.html"},{"title":"weight_cn – DFT-D4","text":"public elemental function weight_cn(wf, cn, cnref) result(cngw) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: wf real(kind=wp), intent(in) :: cn real(kind=wp), intent(in) :: cnref Return Value real(kind=wp) Source Code elemental function weight_cn ( wf , cn , cnref ) result ( cngw ) real ( wp ), intent ( in ) :: wf , cn , cnref real ( wp ) :: cngw intrinsic :: exp cngw = exp ( - wf * ( cn - cnref ) ** 2 ) end function weight_cn","tags":"","url":"proc/weight_cn.html"},{"title":"zeta – DFT-D4","text":"public elemental function zeta(a, c, qref, qmod) charge scaling function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: a real(kind=wp), intent(in) :: c real(kind=wp), intent(in) :: qref real(kind=wp), intent(in) :: qmod Return Value real(kind=wp) Source Code elemental function zeta ( a , c , qref , qmod ) real ( wp ), intent ( in ) :: a real ( wp ), intent ( in ) :: c real ( wp ), intent ( in ) :: qref real ( wp ), intent ( in ) :: qmod real ( wp ) :: zeta intrinsic :: exp if ( qmod < 0.0_wp ) then zeta = exp ( a ) else zeta = exp ( a * ( 1.0_wp - exp ( c * ( 1.0_wp - qref / qmod ) ) ) ) endif end function zeta","tags":"","url":"proc/zeta.html"},{"title":"get_wfpair_val_num – DFT-D4","text":"private elemental function get_wfpair_val_num(numi, numj) result(wfpair) Get pairwise CN weighting factor for a given atomic number pair Arguments Type Intent Optional Attributes Name integer, intent(in) :: numi Atomic number i integer, intent(in) :: numj Atomic number i Return Value real(kind=wp) Pairwise CN weighting factor Source Code elemental function get_wfpair_val_num ( numi , numj ) result ( wfpair ) !> Atomic number i integer , intent ( in ) :: numi !> Atomic number i integer , intent ( in ) :: numj !> Pairwise CN weighting factor real ( wp ) :: wfpair wfpair = weight_factors ( numi , numj ) end function get_wfpair_val_num","tags":"","url":"proc/get_wfpair_val_num.html"},{"title":"get_wfpair_val_sym – DFT-D4","text":"private elemental function get_wfpair_val_sym(symi, symj) result(wfpair) Get pairwise CN weighting factor for a given element symbol pair Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: symi Element symbol i character(len=*), intent(in) :: symj Element symbol j Return Value real(kind=wp) Pairwise CN weighting factor Source Code elemental function get_wfpair_val_sym ( symi , symj ) result ( wfpair ) !> Element symbol i character ( len =* ), intent ( in ) :: symi !> Element symbol j character ( len =* ), intent ( in ) :: symj !> Pairwise CN weighting factor real ( wp ) :: wfpair wfpair = get_wfpair_val ( to_number ( symi ), to_number ( symj )) end function get_wfpair_val_sym","tags":"","url":"proc/get_wfpair_val_sym.html"},{"title":"get_wfpair_val – DFT-D4","text":"public interface get_wfpair_val Get pairwise CN weighting factors Module Procedures private elemental function get_wfpair_val_num (numi, numj) result(wfpair) Get pairwise CN weighting factor for a given atomic number pair Arguments Type Intent Optional Attributes Name integer, intent(in) :: numi Atomic number i integer, intent(in) :: numj Atomic number i Return Value real(kind=wp) Pairwise CN weighting factor private elemental function get_wfpair_val_sym (symi, symj) result(wfpair) Get pairwise CN weighting factor for a given element symbol pair Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: symi Element symbol i character(len=*), intent(in) :: symj Element symbol j Return Value real(kind=wp) Pairwise CN weighting factor","tags":"","url":"interface/get_wfpair_val.html"},{"title":"dlat_to_dvol – DFT-D4","text":"public  function dlat_to_dvol(lattice) result(vol) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lattice (3,3) Return Value real(kind=wp) Source Code function dlat_to_dvol ( lattice ) result ( vol ) real ( wp ), intent ( in ) :: lattice ( 3 , 3 ) real ( wp ) :: vol vol = matdet_3x3 ( lattice ) end function dlat_to_dvol","tags":"","url":"proc/dlat_to_dvol.html"},{"title":"allocate – DFT-D4","text":"private  subroutine allocate(self, n, l) Type Bound molecule Arguments Type Intent Optional Attributes Name class( molecule ), intent(inout) :: self integer, intent(in) :: n logical, intent(in) :: l Source Code subroutine allocate ( self , n , l ) class ( molecule ), intent ( inout ) :: self integer , intent ( in ) :: n logical , intent ( in ) :: l end subroutine allocate","tags":"","url":"proc/allocate.html"},{"title":"calculate_distances – DFT-D4","text":"private  subroutine calculate_distances(self) Type Bound molecule Arguments Type Intent Optional Attributes Name class( molecule ), intent(inout) :: self Source Code subroutine calculate_distances ( self ) class ( molecule ), intent ( inout ) :: self end subroutine calculate_distances","tags":"","url":"proc/calculate_distances.html"},{"title":"d4_calculation – DFT-D4","text":"public  subroutine d4_calculation(io, env, options, mol_, param_, res) Arguments Type Intent Optional Attributes Name integer, intent(in) :: io type( mctc_logger ), intent(inout) :: env type( dftd_options ), intent(in) :: options type( molecule ), intent(in) :: mol_ type( dftd_parameter ), intent(in) :: param_ type( dftd_results ), intent(out) :: res Source Code subroutine d4_calculation ( io , env , options , mol_ , param_ , res ) integer , intent ( in ) :: io type ( mctc_logger ), intent ( inout ) :: env type ( dftd_options ), intent ( in ) :: options type ( molecule ), intent ( in ) :: mol_ type ( dftd_parameter ), intent ( in ) :: param_ type ( dftd_results ), intent ( out ) :: res type ( structure_type ) :: mol type ( d4_model ) :: d4 type ( rational_damping_param ) :: param real ( wp ), allocatable :: energy , gradient (:, :), sigma (:, :) call new ( mol , mol_ % at , mol_ % xyz , lattice = mol_ % lattice ) call new_d4_model ( d4 , mol , ga = options % g_a , gc = options % g_c , wf = options % wf ) param = rational_damping_param (& & s6 = param_ % s6 , & & s8 = param_ % s8 , & & s9 = param_ % s9 , & & a1 = param_ % a1 , & & a2 = param_ % a2 , & & alp = param_ % alp ) allocate ( energy , gradient ( 3 , mol % nat ), sigma ( 3 , 3 )) call get_dispersion ( mol , d4 , param , realspace_cutoff (), energy , gradient , sigma ) call move_alloc ( energy , res % energy ) call move_alloc ( gradient , res % gradient ) res % lattice_gradient = matmul ( sigma , transpose ( matinv_3x3 ( mol % lattice ))) end subroutine d4_calculation","tags":"","url":"proc/d4_calculation.html"},{"title":"d4par – DFT-D4","text":"public  subroutine d4par(fname, param_, lmbd, env) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname type( dftd_parameter ), intent(out) :: param_ integer, intent(in) :: lmbd type( mctc_logger ) :: env Source Code subroutine d4par ( fname , param_ , lmbd , env ) character ( len =* ), intent ( in ) :: fname type ( dftd_parameter ), intent ( out ) :: param_ integer , intent ( in ) :: lmbd type ( mctc_logger ) :: env class ( damping_param ), allocatable :: param call get_rational_damping ( fname , param , merge ( 1.0_wp , 0.0_wp , lmbd == 3 )) if ( allocated ( param )) then select type ( param ) type is ( rational_damping_param ) env % sane = . true . param_ % s6 = param % s6 param_ % s8 = param % s8 param_ % s9 = param % s9 param_ % a1 = param % a1 param_ % a2 = param % a2 param_ % alp = param % alp class default env % sane = . false . end select else env % sane = . false . end if end subroutine d4par","tags":"","url":"proc/d4par.html"},{"title":"dlat_to_cell – DFT-D4","text":"public  subroutine dlat_to_cell(lattice, cellpar) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lattice (3,3) real(kind=wp), intent(out), optional :: cellpar (6) Source Code subroutine dlat_to_cell ( lattice , cellpar ) real ( wp ), intent ( in ) :: lattice ( 3 , 3 ) real ( wp ), intent ( out ), optional :: cellpar ( 6 ) end subroutine dlat_to_cell","tags":"","url":"proc/dlat_to_cell.html"},{"title":"dlat_to_rlat – DFT-D4","text":"public  subroutine dlat_to_rlat(lattice, reclatt) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lattice (3,3) real(kind=wp), intent(out), optional :: reclatt (3,3) Source Code subroutine dlat_to_rlat ( lattice , reclatt ) real ( wp ), intent ( in ) :: lattice ( 3 , 3 ) real ( wp ), intent ( out ), optional :: reclatt ( 3 , 3 ) end subroutine dlat_to_rlat","tags":"","url":"proc/dlat_to_rlat.html"},{"title":"wrap_back – DFT-D4","text":"private  subroutine wrap_back(self) Type Bound molecule Arguments Type Intent Optional Attributes Name class( molecule ), intent(inout) :: self Source Code subroutine wrap_back ( self ) class ( molecule ), intent ( inout ) :: self end subroutine wrap_back","tags":"","url":"proc/wrap_back.html"},{"title":"ascii_atomic_radii – DFT-D4","text":"public  subroutine ascii_atomic_radii(unit, mol, disp) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model Source Code subroutine ascii_atomic_radii ( unit , mol , disp ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_atomic_radii !> Unit for output integer , intent ( in ) :: unit !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp integer :: isp write ( unit , '(a,\":\")' ) \"Atomic data, radii in Ångström\" write ( unit , '(54(\"-\"))' ) write ( unit , '(a4,5x,*(1x,a10))' ) & \"Z\" , \"R(cov)\" , \"r4/r2\" , \"hardness\" , \"EN\" write ( unit , '(54(\"-\"))' ) do isp = 1 , mol % nid write ( unit , '(i4, 1x, a4, *(1x,f10.4))' ) & & mol % num ( isp ), mol % sym ( isp ), & & disp % rcov ( isp ) * autoaa , & & disp % r4r2 ( isp ) * autoaa , & & disp % eta ( isp ), & & disp % en ( isp ) end do write ( unit , '(54(\"-\"))' ) write ( unit , '(a)' ) end subroutine ascii_atomic_radii","tags":"","url":"proc/ascii_atomic_radii.html"},{"title":"ascii_atomic_references – DFT-D4","text":"public  subroutine ascii_atomic_references(unit, mol, disp) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model Source Code subroutine ascii_atomic_references ( unit , mol , disp ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_atomic_references !> Unit for output integer , intent ( in ) :: unit !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp integer :: isp , iref , mref mref = maxval ( disp % ref ) write ( unit , '(a,\":\")' ) \"Atomic reference systems (in atomic units)\" write ( unit , '(70(\"-\"))' ) write ( unit , '(a4, 5x)' , advance = 'no' ) \"Z\" do iref = 1 , 2 write ( unit , '(a4, 2(1x, a7), 1x, a9)' , advance = 'no' ) & \"#\" , \"CN\" , \"q+Z\" , \"C6(AA)\" end do write ( unit , '(a)' ) write ( unit , '(70(\"-\"))' ) do isp = 1 , mol % nid write ( unit , '(i4, 1x, a4)' , advance = 'no' ) & & mol % num ( isp ), mol % sym ( isp ) do iref = 1 , disp % ref ( isp ) write ( unit , '(i4, 2(1x, f7.4), 1x, f9.4)' , advance = 'no' ) & iref , disp % cn ( iref , isp ), disp % q ( iref , isp ) + disp % zeff ( isp ), & disp % c6 ( iref , iref , isp , isp ) if ( iref == 2 . and . disp % ref ( isp ) > 2 ) then write ( unit , '(/,9x)' , advance = 'no' ) end if if ( iref == 4 . and . disp % ref ( isp ) > 4 ) then write ( unit , '(/,9x)' , advance = 'no' ) end if if ( iref == 6 . and . disp % ref ( isp ) > 6 ) then write ( unit , '(/,9x)' , advance = 'no' ) end if end do write ( unit , '(a)' ) end do write ( unit , '(70(\"-\"))' ) write ( unit , '(a)' ) end subroutine ascii_atomic_references","tags":"","url":"proc/ascii_atomic_references.html"},{"title":"ascii_damping_param – DFT-D4","text":"public  subroutine ascii_damping_param(unit, param, method) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class( damping_param ), intent(in) :: param Damping parameters character(len=*), intent(in), optional :: method Method name Source Code subroutine ascii_damping_param ( unit , param , method ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_damping_param !> Unit for output integer , intent ( in ) :: unit !> Damping parameters class ( damping_param ), intent ( in ) :: param !> Method name character ( len =* ), intent ( in ), optional :: method select type ( param ) type is ( rational_damping_param ) write ( unit , '(a, \":\", 1x)' , advance = \"no\" ) \"Rational (Becke-Johnson) damping\" if ( present ( method )) then write ( unit , '(a, \"-\")' , advance = \"no\" ) method end if if ( abs ( param % s9 ) > 0 ) then write ( unit , '(a)' ) \"D4-ATM\" else write ( unit , '(a)' ) \"D4\" end if write ( unit , '(21(\"-\"))' ) write ( unit , '(a4, t10, f10.4)' ) & & \"s6\" , param % s6 , & & \"s8\" , param % s8 , & & \"s9\" , param % s9 , & & \"a1\" , param % a1 , & & \"a2\" , param % a2 , & & \"alp\" , param % alp write ( unit , '(20(\"-\"))' ) write ( unit , '(a)' ) end select end subroutine ascii_damping_param","tags":"","url":"proc/ascii_damping_param.html"},{"title":"ascii_pairwise – DFT-D4","text":"public  subroutine ascii_pairwise(unit, mol, pair_disp2, pair_disp3) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: pair_disp2 (:,:) real(kind=wp), intent(in) :: pair_disp3 (:,:) Source Code subroutine ascii_pairwise ( unit , mol , pair_disp2 , pair_disp3 ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_pairwise !> Unit for output integer , intent ( in ) :: unit !> Molecular structure data class ( structure_type ), intent ( in ) :: mol real ( wp ), intent ( in ) :: pair_disp2 (:, :) real ( wp ), intent ( in ) :: pair_disp3 (:, :) integer :: iat , jat , isp , jsp real ( wp ) :: disp , e2 , e3 e2 = 0.0_wp e3 = 0.0_wp write ( unit , '(a,\":\")' ) \"Pairwise representation of dispersion (in kcal/mol)\" write ( unit , '(82(\"-\"))' ) write ( unit , '(2(a6,1x,a4,5x),*(1x,a10:,1x,a7))' ) & \"#\" , \"Z\" , \"#\" , \"Z\" , \"additive\" , \"(rel.)\" , \"non-add.\" , \"(rel.)\" , \"total\" write ( unit , '(82(\"-\"))' ) do iat = 1 , mol % nat isp = mol % id ( iat ) do jat = 1 , mol % nat jsp = mol % id ( jat ) e2 = e2 + pair_disp2 ( jat , iat ) e3 = e3 + pair_disp3 ( jat , iat ) disp = pair_disp2 ( jat , iat ) + pair_disp3 ( jat , iat ) if ( abs ( disp ) < epsilon ( disp )) cycle write ( unit , '(2(i6,1x,i4,1x,a4),*(1x,es10.2:,1x,\"(\",i4,\"%)\"))' ) & & iat , mol % num ( isp ), mol % sym ( isp ), & & jat , mol % num ( jsp ), mol % sym ( jsp ), & & pair_disp2 ( jat , iat ) * autokcal , nint ( pair_disp2 ( jat , iat ) / disp * 100 ), & & pair_disp3 ( jat , iat ) * autokcal , nint ( pair_disp3 ( jat , iat ) / disp * 100 ), & & disp * autokcal end do end do write ( unit , '(82(\"-\"))' ) disp = e2 + e3 write ( unit , '(1x, a, t33,*(1x,es10.2:,1x,\"(\",i4,\"%)\"))' ) & & \"total dispersion energy\" , & & e2 * autokcal , nint ( e2 / disp * 100 ), & & e3 * autokcal , nint ( e3 / disp * 100 ), & & disp * autokcal write ( unit , '(82(\"-\"))' ) write ( unit , '(a)' ) end subroutine ascii_pairwise","tags":"","url":"proc/ascii_pairwise.html"},{"title":"ascii_results – DFT-D4","text":"public  subroutine ascii_results(unit, mol, energy, gradient, sigma) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: energy real(kind=wp), intent(in), optional :: gradient (:,:) real(kind=wp), intent(in), optional :: sigma (:,:) Source Code subroutine ascii_results ( unit , mol , energy , gradient , sigma ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_results !> Unit for output integer , intent ( in ) :: unit !> Molecular structure data class ( structure_type ), intent ( in ) :: mol real ( wp ), intent ( in ) :: energy real ( wp ), intent ( in ), optional :: gradient (:, :) real ( wp ), intent ( in ), optional :: sigma (:, :) integer :: iat , isp logical :: grad character ( len = 1 ), parameter :: comp ( 3 ) = [ \"x\" , \"y\" , \"z\" ] grad = present ( gradient ) . and . present ( sigma ) write ( unit , '(a,\":\", t25, es20.13, 1x, a)' ) & & \"Dispersion energy\" , energy , \"Eh\" write ( unit , '(a)' ) if ( grad ) then write ( unit , '(a,\":\", t25, es20.13, 1x, a)' ) & & \"Gradient norm\" , norm2 ( gradient ), \"Eh/a0\" write ( unit , '(50(\"-\"))' ) write ( unit , '(a6,1x,a4,5x,*(1x,a10))' ) \"#\" , \"Z\" , \"dE/dx\" , \"dE/dy\" , \"dE/dz\" write ( unit , '(50(\"-\"))' ) do iat = 1 , mol % nat isp = mol % id ( iat ) write ( unit , '(i6,1x,i4,1x,a4,*(es11.3))' ) & & iat , mol % num ( isp ), mol % sym ( isp ), gradient (:, iat ) end do write ( unit , '(50(\"-\"))' ) write ( unit , '(a)' ) write ( unit , '(a,\":\")' ) & & \"Virial\" write ( unit , '(50(\"-\"))' ) write ( unit , '(a15,1x,*(1x,a10))' ) \"component\" , \"x\" , \"y\" , \"z\" write ( unit , '(50(\"-\"))' ) do iat = 1 , 3 write ( unit , '(2x,4x,1x,a4,1x,4x,*(es11.3))' ) & & comp ( iat ), sigma (:, iat ) end do write ( unit , '(50(\"-\"))' ) write ( unit , '(a)' ) end if end subroutine ascii_results","tags":"","url":"proc/ascii_results.html"},{"title":"ascii_system_properties – DFT-D4","text":"public  subroutine ascii_system_properties(unit, mol, disp, cn, q, c6, alpha) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model real(kind=wp), intent(in) :: cn (:) Coordination numbers real(kind=wp), intent(in) :: q (:) Atomic partial charges real(kind=wp), intent(in) :: c6 (:,:) Atomic dispersion coefficients real(kind=wp), intent(in) :: alpha (:) Atomic static polarizabilities Source Code subroutine ascii_system_properties ( unit , mol , disp , cn , q , c6 , alpha ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_system_properties !> Unit for output integer , intent ( in ) :: unit !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp !> Coordination numbers real ( wp ), intent ( in ) :: cn (:) !> Atomic partial charges real ( wp ), intent ( in ) :: q (:) !> Atomic dispersion coefficients real ( wp ), intent ( in ) :: c6 (:, :) !> Atomic static polarizabilities real ( wp ), intent ( in ) :: alpha (:) integer :: iat , isp , jat real ( wp ) :: sum_c8 sum_c8 = 0.0_wp write ( unit , '(a,\":\")' ) \"Atomic properties (in atomic units)\" write ( unit , '(71(\"-\"))' ) write ( unit , '(a6,1x,a4,5x,*(1x,a10))' ) \"#\" , \"Z\" , \"CN\" , \"q\" , \"C6(AA)\" , & & \"C8(AA)\" , \"alpha(0)\" write ( unit , '(71(\"-\"))' ) do iat = 1 , mol % nat isp = mol % id ( iat ) write ( unit , '(i6,1x,i4,1x,a4,*(1x,f10.4))' ) & & iat , mol % num ( isp ), mol % sym ( isp ), cn ( iat ), q ( iat ), c6 ( iat , iat ), & & c6 ( iat , iat ) * 3 * disp % r4r2 ( isp ) ** 2 , alpha ( iat ) do jat = 1 , mol % nat sum_c8 = sum_c8 + 3 * c6 ( jat , iat ) * disp % r4r2 ( mol % id ( jat )) * disp % r4r2 ( isp ) end do end do write ( unit , '(71(\"-\"))' ) write ( unit , '(a)' ) write ( unit , '(a,\":\")' ) \"Molecular properties (in atomic units)\" write ( unit , '(40(\"-\"))' ) write ( unit , '(1x, a, t20, f19.4)' ) & \"molecular C6\" , sum ( c6 ), & \"molecular C8\" , sum_c8 write ( unit , '(40(\"-\"))' ) write ( unit , '(a)' ) end subroutine ascii_system_properties","tags":"","url":"proc/ascii_system_properties.html"},{"title":"getline – DFT-D4","text":"private  subroutine getline(unit, line, iostat) reads a line from unit into an allocatable character Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit character(len=:), intent(out), allocatable :: line integer, intent(out), optional :: iostat Source Code subroutine getline ( unit , line , iostat ) integer , intent ( in ) :: unit character ( len = :), allocatable , intent ( out ) :: line integer , intent ( out ), optional :: iostat integer , parameter :: buffersize = 256 character ( len = buffersize ) :: buffer integer :: size integer :: stat line = '' do read ( unit , '(a)' , advance = 'no' , iostat = stat , size = size ) & & buffer if ( stat . gt . 0 ) then if ( present ( iostat )) iostat = stat return ! an error occurred endif line = line // buffer (: size ) if ( stat . lt . 0 ) then if ( is_iostat_eor ( stat )) stat = 0 if ( present ( iostat )) iostat = stat return endif enddo end subroutine getline","tags":"","url":"proc/getline.html"},{"title":"json_results – DFT-D4","text":"public  subroutine json_results(unit, indentation, energy, gradient, sigma, hessian, cn, q, c6, alpha, pairwise_energy2, pairwise_energy3) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit character(len=*), intent(in), optional :: indentation real(kind=wp), intent(in), optional :: energy real(kind=wp), intent(in), optional :: gradient (:,:) real(kind=wp), intent(in), optional :: sigma (:,:) real(kind=wp), intent(in), optional :: hessian (:,:,:,:) real(kind=wp), intent(in), optional :: cn (:) real(kind=wp), intent(in), optional :: q (:) real(kind=wp), intent(in), optional :: c6 (:,:) real(kind=wp), intent(in), optional :: alpha (:) real(kind=wp), intent(in), optional :: pairwise_energy2 (:,:) real(kind=wp), intent(in), optional :: pairwise_energy3 (:,:) Source Code subroutine json_results ( unit , indentation , energy , gradient , sigma , hessian , & & cn , q , c6 , alpha , pairwise_energy2 , pairwise_energy3 ) !DEC$ ATTRIBUTES DLLEXPORT :: json_results integer , intent ( in ) :: unit character ( len =* ), intent ( in ), optional :: indentation real ( wp ), intent ( in ), optional :: energy real ( wp ), intent ( in ), optional :: gradient (:, :) real ( wp ), intent ( in ), optional :: sigma (:, :) real ( wp ), intent ( in ), optional :: hessian (:, :, :, :) real ( wp ), intent ( in ), optional :: cn (:) real ( wp ), intent ( in ), optional :: q (:) real ( wp ), intent ( in ), optional :: c6 (:, :) real ( wp ), intent ( in ), optional :: alpha (:) real ( wp ), intent ( in ), optional :: pairwise_energy2 (:, :) real ( wp ), intent ( in ), optional :: pairwise_energy3 (:, :) character ( len = :), allocatable :: indent , version_string character ( len =* ), parameter :: jsonkey = \"('\"\"',a,'\"\":',1x)\" real ( wp ), allocatable :: array (:) call get_dftd4_version ( string = version_string ) if ( present ( indentation )) then indent = indentation end if write ( unit , '(\"{\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'version' write ( unit , '(1x,a)' , advance = 'no' ) '\"' // version_string // '\"' if ( present ( energy )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'energy' write ( unit , '(1x,es25.16)' , advance = 'no' ) energy end if if ( present ( sigma )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'virial' array = reshape ( sigma , [ size ( sigma )]) call write_json_array ( unit , array , indent ) end if if ( present ( gradient )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'gradient' array = reshape ( gradient , [ size ( gradient )]) call write_json_array ( unit , array , indent ) end if if ( present ( hessian )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'hessian' array = reshape ( hessian , [ size ( hessian )]) call write_json_array ( unit , array , indent ) end if if ( present ( cn )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'coordination numbers' call write_json_array ( unit , cn , indent ) end if if ( present ( q )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'partial charges' call write_json_array ( unit , q , indent ) end if if ( present ( c6 )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'c6 coefficients' array = reshape ( c6 , [ size ( c6 )]) call write_json_array ( unit , array , indent ) end if if ( present ( alpha )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'polarizabilities' call write_json_array ( unit , alpha , indent ) end if if ( present ( pairwise_energy2 )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'additive pairwise energy' array = reshape ( pairwise_energy2 , [ size ( pairwise_energy2 )]) call write_json_array ( unit , array , indent ) end if if ( present ( pairwise_energy3 )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'non-additive pairwise energy' array = reshape ( pairwise_energy3 , [ size ( pairwise_energy3 )]) call write_json_array ( unit , array , indent ) end if if ( allocated ( indent )) write ( unit , '(/)' , advance = 'no' ) write ( unit , '(\"}\")' ) end subroutine json_results","tags":"","url":"proc/json_results.html"},{"title":"tagged_result – DFT-D4","text":"public  subroutine tagged_result(unit, energy, gradient, sigma, hessian) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit real(kind=wp), intent(in), optional :: energy real(kind=wp), intent(in), optional :: gradient (:,:) real(kind=wp), intent(in), optional :: sigma (:,:) real(kind=wp), intent(in), optional :: hessian (:,:,:,:) Source Code subroutine tagged_result ( unit , energy , gradient , sigma , hessian ) !DEC$ ATTRIBUTES DLLEXPORT :: tagged_result integer , intent ( in ) :: unit real ( wp ), intent ( in ), optional :: energy real ( wp ), intent ( in ), optional :: gradient (:, :) real ( wp ), intent ( in ), optional :: sigma (:, :) real ( wp ), intent ( in ), optional :: hessian (:, :, :, :) character ( len =* ), parameter :: tag_header = & & '(a,t20,\":\",a,\":\",i0,\":\",*(i0:,\",\"))' if ( present ( energy )) then write ( unit , tag_header ) \"energy\" , \"real\" , 0 write ( unit , '(3es24.16)' ) energy end if if ( present ( gradient )) then write ( unit , tag_header ) \"gradient\" , \"real\" , 2 , shape ( gradient ) write ( unit , '(3es24.16)' ) gradient end if if ( present ( sigma )) then write ( unit , tag_header ) \"virial\" , \"real\" , 2 , shape ( sigma ) write ( unit , '(3es24.16)' ) sigma end if if ( present ( hessian )) then write ( unit , tag_header ) \"hessian\" , \"real\" , 4 , shape ( hessian ) write ( unit , '(3es24.16)' ) hessian end if end subroutine tagged_result","tags":"","url":"proc/tagged_result.html"},{"title":"turbomole_gradient – DFT-D4","text":"public  subroutine turbomole_gradient(mol, fname, energy, gradient, stat) Arguments Type Intent Optional Attributes Name type(structure_type), intent(in) :: mol character(len=*), intent(in) :: fname real(kind=wp), intent(in) :: energy real(kind=wp), intent(in) :: gradient (:,:) integer, intent(out) :: stat Source Code subroutine turbomole_gradient ( mol , fname , energy , gradient , stat ) !DEC$ ATTRIBUTES DLLEXPORT :: turbomole_gradient type ( structure_type ), intent ( in ) :: mol character ( len =* ), intent ( in ) :: fname real ( wp ), intent ( in ) :: energy real ( wp ), intent ( in ) :: gradient (:, :) integer , intent ( out ) :: stat character ( len = :), allocatable :: line integer :: i , icycle , line_number integer :: err integer :: igrad ! file handle logical :: exist real ( wp ) :: escf real ( wp ), allocatable :: gscf (:,:) real ( wp ), allocatable :: xyz (:,:) allocate ( gscf ( 3 , mol % nat ), source = 0.0_wp ) stat = 0 icycle = 1 i = 0 escf = 0.0_wp inquire ( file = fname , exist = exist ) if ( exist ) then open ( newunit = igrad , file = fname ) read_file : do call getline ( igrad , line , iostat = err ) if ( err . ne . 0 ) exit read_file i = i + 1 if ( index ( line , 'cycle' ) > 0 ) line_number = i enddo read_file if ( line_number < 2 ) then stat = 1 return endif rewind ( igrad ) skip_lines : do i = 1 , line_number - 1 read ( igrad , '(a)' ) enddo skip_lines call getline ( igrad , line ) read ( line ( 10 : 17 ), * , iostat = err ) icycle read ( line ( 33 : 51 ), * , iostat = err ) escf allocate ( xyz ( 3 , mol % nat )) do i = 1 , mol % nat call getline ( igrad , line ) read ( line , * , iostat = err ) xyz ( 1 , i ), xyz ( 2 , i ), xyz ( 3 , i ) enddo if ( any ( abs ( xyz - mol % xyz ) > 1.0e-8_wp )) then stat = 1 return endif do i = 1 , mol % nat call getline ( igrad , line ) read ( line , * , iostat = err ) gscf ( 1 , i ), gscf ( 2 , i ), gscf ( 3 , i ) enddo do i = 1 , mol % nat backspace ( igrad ) backspace ( igrad ) enddo backspace ( igrad ) else open ( newunit = igrad , file = fname ) write ( igrad , '(\"$grad\")' ) endif write ( igrad , '(2x,\"cycle =\",1x,i6,4x,\"SCF energy =\",f18.11,3x,' // & '\"|dE/dxyz| =\",f10.6)' ) & icycle , energy + escf , norm2 ( gradient + gscf ) do i = 1 , mol % nat write ( igrad , '(3(F20.14,2x),4x,a2)' ) mol % xyz ( 1 , i ), mol % xyz ( 2 , i ), mol % xyz ( 3 , i ), mol % sym ( i ) enddo do i = 1 , mol % nat write ( igrad , '(3D22.13)' ) gradient ( 1 , i ) + gscf ( 1 , i ), gradient ( 2 , i ) + gscf ( 2 , i ), gradient ( 3 , i ) + gscf ( 3 , i ) enddo write ( igrad , '(\"$end\")' ) close ( igrad ) end subroutine turbomole_gradient","tags":"","url":"proc/turbomole_gradient.html"},{"title":"turbomole_gradlatt – DFT-D4","text":"public  subroutine turbomole_gradlatt(mol, fname, energy, sigma, stat) Arguments Type Intent Optional Attributes Name type(structure_type), intent(in) :: mol character(len=*), intent(in) :: fname real(kind=wp), intent(in) :: energy real(kind=wp), intent(in) :: sigma (3,3) integer, intent(out) :: stat Source Code subroutine turbomole_gradlatt ( mol , fname , energy , sigma , stat ) !DEC$ ATTRIBUTES DLLEXPORT :: turbomole_gradlatt type ( structure_type ), intent ( in ) :: mol character ( len =* ), intent ( in ) :: fname real ( wp ), intent ( in ) :: energy real ( wp ), intent ( in ) :: sigma ( 3 , 3 ) integer , intent ( out ) :: stat character ( len = :), allocatable :: line integer :: i , j , icycle , line_number integer :: err integer :: igrad ! file handle logical :: exist real ( wp ) :: escf real ( wp ) :: glat ( 3 , 3 ), inv_lat ( 3 , 3 ), gradlatt ( 3 , 3 ) real ( wp ) :: dlat ( 3 , 3 ) stat = 0 inv_lat = matinv_3x3 ( mol % lattice ) do i = 1 , 3 do j = 1 , 3 gradlatt ( i , j ) = sigma ( i , 1 ) * inv_lat ( j , 1 ) & & + sigma ( i , 2 ) * inv_lat ( j , 2 ) & & + sigma ( i , 3 ) * inv_lat ( j , 3 ) enddo enddo icycle = 1 i = 0 escf = 0.0_wp inquire ( file = fname , exist = exist ) if ( exist ) then open ( newunit = igrad , file = fname ) read_file : do call getline ( igrad , line , iostat = err ) if ( err . ne . 0 ) exit read_file i = i + 1 if ( index ( line , 'cycle' ) > 0 ) line_number = i enddo read_file if ( line_number < 2 ) then stat = 1 return endif rewind ( igrad ) skip_lines : do i = 1 , line_number - 1 read ( igrad , '(a)' ) enddo skip_lines call getline ( igrad , line ) read ( line ( 10 : 17 ), * , iostat = err ) icycle read ( line ( 33 : 51 ), * , iostat = err ) escf do i = 1 , 3 call getline ( igrad , line ) read ( line , * , iostat = err ) dlat ( 1 , i ), dlat ( 2 , i ), dlat ( 3 , i ) enddo if ( any ( abs ( dlat - mol % lattice ) > 1.0e-8_wp )) then stat = 1 return endif do i = 1 , 3 call getline ( igrad , line ) read ( line , * , iostat = err ) glat ( 1 , i ), glat ( 2 , i ), glat ( 3 , i ) enddo do i = 1 , 3 backspace ( igrad ) backspace ( igrad ) enddo backspace ( igrad ) else open ( newunit = igrad , file = fname ) write ( igrad , '(\"$gradlatt\")' ) endif write ( igrad , '(2x,\"cycle =\",1x,i6,4x,\"SCF energy =\",f18.11,3x,' // & '\"|dE/dlatt| =\",f10.6)' ) & icycle , energy + escf , norm2 ( gradlatt + glat ) do i = 1 , 3 write ( igrad , '(3(F20.14,2x))' ) mol % lattice ( 1 , i ), mol % lattice ( 2 , i ), mol % lattice ( 3 , i ) enddo do i = 1 , 3 write ( igrad , '(3D22.13)' ) gradlatt ( 1 , i ) + glat ( 1 , i ), gradlatt ( 2 , i ) + glat ( 2 , i ), gradlatt ( 3 , i ) + glat ( 3 , i ) enddo write ( igrad , '(\"$end\")' ) close ( igrad ) end subroutine turbomole_gradlatt","tags":"","url":"proc/turbomole_gradlatt.html"},{"title":"write_json_array – DFT-D4","text":"private  subroutine write_json_array(unit, array, indent) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit real(kind=wp), intent(in) :: array (:) character(len=:), intent(in), allocatable :: indent Source Code subroutine write_json_array ( unit , array , indent ) integer , intent ( in ) :: unit real ( wp ), intent ( in ) :: array (:) character ( len = :), allocatable , intent ( in ) :: indent integer :: i write ( unit , '(\"[\")' , advance = 'no' ) do i = 1 , size ( array ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 2 ) write ( unit , '(es23.16)' , advance = 'no' ) array ( i ) if ( i /= size ( array )) write ( unit , '(\",\")' , advance = 'no' ) end do if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , '(\"]\")' , advance = 'no' ) end subroutine write_json_array","tags":"","url":"proc/write_json_array.html"},{"title":"get_lattice_points_cutoff – DFT-D4","text":"private  subroutine get_lattice_points_cutoff(periodic, lat, rthr, trans) Create lattice points within a given cutoff Arguments Type Intent Optional Attributes Name logical, intent(in) :: periodic (:) Periodic dimensions real(kind=wp), intent(in) :: lat (:,:) Lattice parameters real(kind=wp), intent(in) :: rthr Real space cutoff real(kind=wp), intent(out), allocatable :: trans (:,:) Generated lattice points Source Code subroutine get_lattice_points_cutoff ( periodic , lat , rthr , trans ) !DEC$ ATTRIBUTES DLLEXPORT :: get_lattice_points_cutoff !> Periodic dimensions logical , intent ( in ) :: periodic (:) !> Real space cutoff real ( wp ), intent ( in ) :: rthr !> Lattice parameters real ( wp ), intent ( in ) :: lat (:, :) !> Generated lattice points real ( wp ), allocatable , intent ( out ) :: trans (:, :) integer :: rep ( 3 ) if (. not . any ( periodic )) then allocate ( trans ( 3 , 1 )) trans (:, :) = 0.0_wp else call get_translations ( lat , rthr , rep ) call get_lattice_points ( lat , rep , . true ., trans ) end if end subroutine get_lattice_points_cutoff","tags":"","url":"proc/get_lattice_points_cutoff.html"},{"title":"get_lattice_points_rep_3d – DFT-D4","text":"private  subroutine get_lattice_points_rep_3d(lat, rep, origin, trans) Generate lattice points from repeatitions Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lat (:,:) Lattice vectors integer, intent(in) :: rep (:) Repeatitions of lattice points to generate logical, intent(in) :: origin Include the origin in the generated lattice points real(kind=wp), intent(out), allocatable :: trans (:,:) Generated lattice points Source Code subroutine get_lattice_points_rep_3d ( lat , rep , origin , trans ) !> Lattice vectors real ( wp ), intent ( in ) :: lat (:, :) !> Repeatitions of lattice points to generate integer , intent ( in ) :: rep (:) !> Include the origin in the generated lattice points logical , intent ( in ) :: origin !> Generated lattice points real ( wp ), allocatable , intent ( out ) :: trans (:, :) integer :: itr , ix , iy , iz , jx , jy , jz itr = 0 if ( origin ) then allocate ( trans ( 3 , product ( 2 * rep + 1 ))) do ix = 0 , rep ( 1 ) do iy = 0 , rep ( 2 ) do iz = 0 , rep ( 3 ) do jx = 1 , merge ( - 1 , 1 , ix > 0 ), - 2 do jy = 1 , merge ( - 1 , 1 , iy > 0 ), - 2 do jz = 1 , merge ( - 1 , 1 , iz > 0 ), - 2 itr = itr + 1 trans (:, itr ) = lat (:, 1 ) * ix * jx & & + lat (:, 2 ) * iy * jy + lat (:, 3 ) * iz * jz end do end do end do end do end do end do else allocate ( trans ( 3 , product ( 2 * rep + 1 ) - 1 )) do ix = 0 , rep ( 1 ) do iy = 0 , rep ( 2 ) do iz = 0 , rep ( 3 ) if ( ix == 0 . and . iy == 0 . and . iz == 0 ) cycle do jx = 1 , merge ( - 1 , 1 , ix > 0 ), - 2 do jy = 1 , merge ( - 1 , 1 , iy > 0 ), - 2 do jz = 1 , merge ( - 1 , 1 , iz > 0 ), - 2 itr = itr + 1 trans (:, itr ) = lat (:, 1 ) * ix * jx & & + lat (:, 2 ) * iy * jy + lat (:, 3 ) * iz * jz end do end do end do end do end do end do end if end subroutine get_lattice_points_rep_3d","tags":"","url":"proc/get_lattice_points_rep_3d.html"},{"title":"get_translations – DFT-D4","text":"private pure subroutine get_translations(lat, rthr, rep) Generate a supercell based on a realspace cutoff, this subroutine\ndoesn’t know anything about the convergence behaviour of the\nassociated property. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lat (3,3) real(kind=wp), intent(in) :: rthr integer, intent(out) :: rep (3) Source Code pure subroutine get_translations ( lat , rthr , rep ) real ( wp ), intent ( in ) :: rthr real ( wp ), intent ( in ) :: lat ( 3 , 3 ) integer , intent ( out ) :: rep ( 3 ) real ( wp ) :: normx ( 3 ), normy ( 3 ), normz ( 3 ) real ( wp ) :: cos10 , cos21 , cos32 ! find normal to the plane... call crossproduct ( lat (:, 2 ), lat (:, 3 ), normx ) call crossproduct ( lat (:, 3 ), lat (:, 1 ), normy ) call crossproduct ( lat (:, 1 ), lat (:, 2 ), normz ) ! ...normalize it... normx = normx / norm2 ( normx ) normy = normy / norm2 ( normy ) normz = normz / norm2 ( normz ) ! cos angles between normals and lattice vectors cos10 = sum ( normx * lat (:, 1 )) cos21 = sum ( normy * lat (:, 2 )) cos32 = sum ( normz * lat (:, 3 )) rep ( 1 ) = ceiling ( abs ( rthr / cos10 )) rep ( 2 ) = ceiling ( abs ( rthr / cos21 )) rep ( 3 ) = ceiling ( abs ( rthr / cos32 )) contains pure subroutine crossproduct ( a , b , c ) real ( wp ), intent ( in ) :: a ( 3 ) real ( wp ), intent ( in ) :: b ( 3 ) real ( wp ), intent ( out ) :: c ( 3 ) c ( 1 ) = a ( 2 ) * b ( 3 ) - b ( 2 ) * a ( 3 ) c ( 2 ) = a ( 3 ) * b ( 1 ) - b ( 3 ) * a ( 1 ) c ( 3 ) = a ( 1 ) * b ( 2 ) - b ( 1 ) * a ( 2 ) end subroutine crossproduct end subroutine get_translations","tags":"","url":"proc/get_translations.html"},{"title":"get_lattice_points – DFT-D4","text":"public interface get_lattice_points Module Procedures private  subroutine get_lattice_points_cutoff (periodic, lat, rthr, trans) Create lattice points within a given cutoff Arguments Type Intent Optional Attributes Name logical, intent(in) :: periodic (:) Periodic dimensions real(kind=wp), intent(in) :: lat (:,:) Lattice parameters real(kind=wp), intent(in) :: rthr Real space cutoff real(kind=wp), intent(out), allocatable :: trans (:,:) Generated lattice points private  subroutine get_lattice_points_rep_3d (lat, rep, origin, trans) Generate lattice points from repeatitions Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lat (:,:) Lattice vectors integer, intent(in) :: rep (:) Repeatitions of lattice points to generate logical, intent(in) :: origin Include the origin in the generated lattice points real(kind=wp), intent(out), allocatable :: trans (:,:) Generated lattice points","tags":"","url":"interface/get_lattice_points.html"},{"title":"get_covalent_rad_num – DFT-D4","text":"private elemental function get_covalent_rad_num(num) result(rad) Get covalent radius for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Covalent radius Source Code elemental function get_covalent_rad_num ( num ) result ( rad ) !DEC$ ATTRIBUTES DLLEXPORT :: get_covalent_rad_num !> Atomic number integer , intent ( in ) :: num !> Covalent radius real ( wp ) :: rad if ( num > 0 . and . num <= size ( covalent_rad_d3 )) then rad = covalent_rad_d3 ( num ) else rad = 0.0_wp end if end function get_covalent_rad_num","tags":"","url":"proc/get_covalent_rad_num.html"},{"title":"get_covalent_rad_sym – DFT-D4","text":"private elemental function get_covalent_rad_sym(sym) result(rad) Get covalent radius for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Covalent radius Source Code elemental function get_covalent_rad_sym ( sym ) result ( rad ) !DEC$ ATTRIBUTES DLLEXPORT :: get_covalent_rad_sym !> Element symbol character ( len =* ), intent ( in ) :: sym !> Covalent radius real ( wp ) :: rad rad = get_covalent_rad ( to_number ( sym )) end function get_covalent_rad_sym","tags":"","url":"proc/get_covalent_rad_sym.html"},{"title":"get_covalent_rad – DFT-D4","text":"public interface get_covalent_rad Covalent radii for DFT-D3 coordination number Module Procedures private elemental function get_covalent_rad_num (num) result(rad) Get covalent radius for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Covalent radius private elemental function get_covalent_rad_sym (sym) result(rad) Get covalent radius for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Covalent radius","tags":"","url":"interface/get_covalent_rad.html"},{"title":"get_dispersion_hessian – DFT-D4","text":"public  subroutine get_dispersion_hessian(mol, disp, param, cutoff, hessian) Evaluate hessian matrix by numerical differention Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model class( damping_param ), intent(in) :: param Damping parameters type( realspace_cutoff ), intent(in) :: cutoff Realspace cutoffs real(kind=wp), intent(out) :: hessian (:,:,:,:) Dispersion hessian Source Code subroutine get_dispersion_hessian ( mol , disp , param , cutoff , hessian ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dispersion_hessian !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp !> Damping parameters class ( damping_param ), intent ( in ) :: param !> Realspace cutoffs type ( realspace_cutoff ), intent ( in ) :: cutoff !> Dispersion hessian real ( wp ), intent ( out ) :: hessian (:, :, :, :) integer :: iat , ix real ( wp ), parameter :: step = 1.0e-4_wp type ( structure_type ) :: displ real ( wp ) :: el , er real ( wp ), allocatable :: gl (:, :), gr (:, :), sl (:, :), sr (:, :) hessian (:, :, :, :) = 0.0_wp !$omp parallel default(none) & !$omp private(iat, ix, displ, er, el, gr, gl, sr, sl) & !$omp shared(mol, disp, param, cutoff, hessian) displ = mol allocate ( gl ( 3 , mol % nat ), gr ( 3 , mol % nat ), sl ( 3 , 3 ), sr ( 3 , 3 )) !$omp do schedule(dynamic) collapse(2) do iat = 1 , mol % nat do ix = 1 , 3 displ % xyz ( ix , iat ) = mol % xyz ( ix , iat ) + step call get_dispersion ( displ , disp , param , cutoff , el , gl , sl ) displ % xyz ( ix , iat ) = mol % xyz ( ix , iat ) - step call get_dispersion ( displ , disp , param , cutoff , er , gr , sr ) displ % xyz ( ix , iat ) = mol % xyz ( ix , iat ) hessian (:, :, ix , iat ) = ( gl - gr ) / ( 2 * step ) end do end do !$omp end parallel end subroutine get_dispersion_hessian","tags":"","url":"proc/get_dispersion_hessian.html"},{"title":"check_error_api – DFT-D4","text":"public  function check_error_api(verror) result(status) bind(C, name=namespace//\"check_error\") Check error handle status Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror Return Value integer(kind=c_int) Source Code function check_error_api ( verror ) result ( status ) & & bind ( C , name = namespace // \"check_error\" ) !DEC$ ATTRIBUTES DLLEXPORT :: check_error_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error integer ( c_int ) :: status if ( debug ) print '(\"[Info]\",1x, a)' , \"check_error\" if ( c_associated ( verror )) then call c_f_pointer ( verror , error ) if ( allocated ( error % ptr )) then status = 1 else status = 0 end if else status = 2 end if end function check_error_api","tags":"","url":"proc/check_error_api.html"},{"title":"custom_d4_model_api – DFT-D4","text":"public  function custom_d4_model_api(verror, vmol, ga, gc, wf) result(vdisp) bind(C, name=namespace//\"custom_d4_model\") Create new custom D4 dispersion model Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol real(kind=c_double), intent(in), value :: ga real(kind=c_double), intent(in), value :: gc real(kind=c_double), intent(in), value :: wf Return Value type(c_ptr) Source Code function custom_d4_model_api ( verror , vmol , ga , gc , wf ) & & result ( vdisp ) & & bind ( C , name = namespace // \"custom_d4_model\" ) !DEC$ ATTRIBUTES DLLEXPORT :: custom_d4_model_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ) :: vdisp type ( vp_model ), pointer :: disp real ( c_double ), value , intent ( in ) :: ga real ( c_double ), value , intent ( in ) :: gc real ( c_double ), value , intent ( in ) :: wf type ( d4_model ), allocatable :: tmp if ( debug ) print '(\"[Info]\",1x, a)' , \"custom_d4_model\" vdisp = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) allocate ( tmp ) call new_d4_model ( error % ptr , tmp , mol % ptr , ga = ga , gc = gc , wf = wf ) if ( allocated ( error % ptr )) then deallocate ( tmp ) else allocate ( disp ) call move_alloc ( tmp , disp % ptr ) vdisp = c_loc ( disp ) end if end function custom_d4_model_api","tags":"","url":"proc/custom_d4_model_api.html"},{"title":"custom_d4s_model_api – DFT-D4","text":"public  function custom_d4s_model_api(verror, vmol, ga, gc) result(vdisp) bind(C, name=namespace//\"custom_d4s_model\") Create new custom D4S dispersion model Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol real(kind=c_double), intent(in), value :: ga real(kind=c_double), intent(in), value :: gc Return Value type(c_ptr) Source Code function custom_d4s_model_api ( verror , vmol , ga , gc ) & & result ( vdisp ) & & bind ( C , name = namespace // \"custom_d4s_model\" ) !DEC$ ATTRIBUTES DLLEXPORT :: custom_d4s_model_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ) :: vdisp type ( vp_model ), pointer :: disp real ( c_double ), value , intent ( in ) :: ga real ( c_double ), value , intent ( in ) :: gc type ( d4s_model ), allocatable :: tmp if ( debug ) print '(\"[Info]\",1x, a)' , \"custom_d4s_model\" vdisp = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) allocate ( tmp ) call new_d4s_model ( error % ptr , tmp , mol % ptr , ga = ga , gc = gc ) if ( allocated ( error % ptr )) then deallocate ( tmp ) else allocate ( disp ) call move_alloc ( tmp , disp % ptr ) vdisp = c_loc ( disp ) end if end function custom_d4s_model_api","tags":"","url":"proc/custom_d4s_model_api.html"},{"title":"get_version_api – DFT-D4","text":"public  function get_version_api() result(version) bind(C, name=namespace//\"get_version\") Obtain library version as major * 10000 + minor + 100 + patch Arguments None Return Value integer(kind=c_int) Source Code function get_version_api () result ( version ) & & bind ( C , name = namespace // \"get_version\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_version_api integer ( c_int ) :: version integer :: major , minor , patch call get_dftd4_version ( major , minor , patch ) version = 10000_c_int * major + 100_c_int * minor + patch end function get_version_api","tags":"","url":"proc/get_version_api.html"},{"title":"load_rational_damping_api – DFT-D4","text":"public  function load_rational_damping_api(verror, charptr, atm) result(vparam) bind(C, name=namespace//\"load_rational_damping\") Load rational damping parameters from internal storage Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror character(kind=c_char, len=1), intent(in) :: charptr (*) logical(kind=c_bool), intent(in), value :: atm Return Value type(c_ptr) Source Code function load_rational_damping_api ( verror , charptr , atm ) & & result ( vparam ) & & bind ( C , name = namespace // \"load_rational_damping\" ) !DEC$ ATTRIBUTES DLLEXPORT :: load_rational_damping_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error character ( kind = c_char ), intent ( in ) :: charptr ( * ) logical ( c_bool ), value , intent ( in ) :: atm character ( len = :, kind = c_char ), allocatable :: method type ( c_ptr ) :: vparam type ( vp_param ), pointer :: param real ( wp ), allocatable :: s9 class ( damping_param ), allocatable :: tmp if ( debug ) print '(\"[Info]\",1x, a)' , \"load_rational_damping\" vparam = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) call c_f_character ( charptr , method ) if ( atm ) s9 = 1.0_wp call get_rational_damping ( method , tmp , s9 ) if (. not . allocated ( tmp )) then call fatal_error ( error % ptr , \"Functional '\" // method // \"' not known\" ) return end if allocate ( param ) call move_alloc ( tmp , param % ptr ) vparam = c_loc ( param ) end function load_rational_damping_api","tags":"","url":"proc/load_rational_damping_api.html"},{"title":"new_d4_model_api – DFT-D4","text":"public  function new_d4_model_api(verror, vmol) result(vdisp) bind(C, name=namespace//\"new_d4_model\") Create new D4 dispersion model Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol Return Value type(c_ptr) Source Code function new_d4_model_api ( verror , vmol ) & & result ( vdisp ) & & bind ( C , name = namespace // \"new_d4_model\" ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ) :: vdisp type ( vp_model ), pointer :: disp type ( d4_model ), allocatable :: tmp if ( debug ) print '(\"[Info]\",1x, a)' , \"new_d4_model\" vdisp = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) allocate ( tmp ) call new_d4_model ( error % ptr , tmp , mol % ptr ) if ( allocated ( error % ptr )) then deallocate ( tmp ) else allocate ( disp ) call move_alloc ( tmp , disp % ptr ) vdisp = c_loc ( disp ) end if end function new_d4_model_api","tags":"","url":"proc/new_d4_model_api.html"},{"title":"new_d4s_model_api – DFT-D4","text":"public  function new_d4s_model_api(verror, vmol) result(vdisp) bind(C, name=namespace//\"new_d4s_model\") Create new D4S dispersion model Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol Return Value type(c_ptr) Source Code function new_d4s_model_api ( verror , vmol ) & & result ( vdisp ) & & bind ( C , name = namespace // \"new_d4s_model\" ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4s_model_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ) :: vdisp type ( vp_model ), pointer :: disp type ( d4s_model ), allocatable :: tmp if ( debug ) print '(\"[Info]\",1x, a)' , \"new_d4s_model\" vdisp = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) allocate ( tmp ) call new_d4s_model ( error % ptr , tmp , mol % ptr ) if ( allocated ( error % ptr )) then deallocate ( tmp ) else allocate ( disp ) call move_alloc ( tmp , disp % ptr ) vdisp = c_loc ( disp ) end if end function new_d4s_model_api","tags":"","url":"proc/new_d4s_model_api.html"},{"title":"new_error_api – DFT-D4","text":"public  function new_error_api() result(verror) bind(C, name=namespace//\"new_error\") Create new error handle object Arguments None Return Value type(c_ptr) Source Code function new_error_api () & & result ( verror ) & & bind ( C , name = namespace // \"new_error\" ) !DEC$ ATTRIBUTES DLLEXPORT :: new_error_api type ( vp_error ), pointer :: error type ( c_ptr ) :: verror if ( debug ) print '(\"[Info]\",1x, a)' , \"new_error\" allocate ( error ) verror = c_loc ( error ) end function new_error_api","tags":"","url":"proc/new_error_api.html"},{"title":"new_rational_damping_api – DFT-D4","text":"public  function new_rational_damping_api(verror, s6, s8, s9, a1, a2, alp) result(vparam) bind(C, name=namespace//\"new_rational_damping\") Create new rational damping parameters Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror real(kind=c_double), intent(in), value :: s6 real(kind=c_double), intent(in), value :: s8 real(kind=c_double), intent(in), value :: s9 real(kind=c_double), intent(in), value :: a1 real(kind=c_double), intent(in), value :: a2 real(kind=c_double), intent(in), value :: alp Return Value type(c_ptr) Source Code function new_rational_damping_api ( verror , s6 , s8 , s9 , a1 , a2 , alp ) & & result ( vparam ) & & bind ( C , name = namespace // \"new_rational_damping\" ) !DEC$ ATTRIBUTES DLLEXPORT :: new_rational_damping_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error real ( c_double ), value , intent ( in ) :: s6 real ( c_double ), value , intent ( in ) :: s8 real ( c_double ), value , intent ( in ) :: s9 real ( c_double ), value , intent ( in ) :: a1 real ( c_double ), value , intent ( in ) :: a2 real ( c_double ), value , intent ( in ) :: alp type ( c_ptr ) :: vparam type ( rational_damping_param ), allocatable :: tmp type ( vp_param ), pointer :: param if ( debug ) print '(\"[Info]\",1x, a)' , \"new_rational_damping\" vparam = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) allocate ( tmp ) tmp = rational_damping_param ( s6 = s6 , s8 = s8 , s9 = s9 , a1 = a1 , a2 = a2 , alp = alp ) allocate ( param ) call move_alloc ( tmp , param % ptr ) vparam = c_loc ( param ) end function new_rational_damping_api","tags":"","url":"proc/new_rational_damping_api.html"},{"title":"new_structure_api – DFT-D4","text":"public  function new_structure_api(verror, natoms, numbers, positions, c_charge, c_lattice, c_periodic) result(vmol) bind(C, name=namespace//\"new_structure\") Create new molecular structure data (quantities in Bohr) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror integer(kind=c_int), intent(in), value :: natoms integer(kind=c_int), intent(in) :: numbers (natoms) real(kind=c_double), intent(in) :: positions (3,natoms) real(kind=c_double), intent(in), optional :: c_charge real(kind=c_double), intent(in), optional :: c_lattice (3,3) logical(kind=c_bool), intent(in), optional :: c_periodic (3) Return Value type(c_ptr) Source Code function new_structure_api ( verror , natoms , numbers , positions , c_charge , & & c_lattice , c_periodic ) result ( vmol ) & & bind ( C , name = namespace // \"new_structure\" ) !DEC$ ATTRIBUTES DLLEXPORT :: new_structure_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error integer ( c_int ), value , intent ( in ) :: natoms integer ( c_int ), intent ( in ) :: numbers ( natoms ) real ( c_double ), intent ( in ) :: positions ( 3 , natoms ) real ( c_double ), intent ( in ), optional :: c_charge real ( wp ), allocatable :: charge real ( c_double ), intent ( in ), optional :: c_lattice ( 3 , 3 ) real ( wp ), allocatable :: lattice (:, :) logical ( c_bool ), intent ( in ), optional :: c_periodic ( 3 ) logical , allocatable :: periodic (:) type ( vp_structure ), pointer :: mol type ( c_ptr ) :: vmol if ( debug ) print '(\"[Info]\",1x, a)' , \"new_structure\" vmol = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if ( present ( c_lattice )) then allocate ( lattice ( 3 , 3 )) lattice (:, :) = c_lattice end if if ( present ( c_periodic )) then allocate ( periodic ( 3 )) periodic (:) = c_periodic end if if ( present ( c_charge )) then charge = c_charge end if allocate ( mol ) call new ( mol % ptr , numbers , positions , lattice = lattice , periodic = periodic , & charge = charge ) vmol = c_loc ( mol ) call wrap_to_central_cell ( mol % ptr % xyz , mol % ptr % lattice , mol % ptr % periodic ) call verify_structure ( error % ptr , mol % ptr ) end function new_structure_api","tags":"","url":"proc/new_structure_api.html"},{"title":"c_f_character – DFT-D4","text":"private  subroutine c_f_character(rhs, lhs) Arguments Type Intent Optional Attributes Name character(kind=c_char, len=1), intent(in) :: rhs (*) character(kind=c_char, len=:), intent(out), allocatable :: lhs Source Code subroutine c_f_character ( rhs , lhs ) character ( kind = c_char ), intent ( in ) :: rhs ( * ) character ( len = :, kind = c_char ), allocatable , intent ( out ) :: lhs integer :: ii do ii = 1 , huge ( ii ) - 1 if ( rhs ( ii ) == c_null_char ) then exit end if end do allocate ( character ( len = ii - 1 ) :: lhs ) lhs = transfer ( rhs ( 1 : ii - 1 ), lhs ) end subroutine c_f_character","tags":"","url":"proc/c_f_character.html"},{"title":"delete_error_api – DFT-D4","text":"public  subroutine delete_error_api(verror) bind(C, name=namespace//\"delete_error\") Delete error handle object Arguments Type Intent Optional Attributes Name type(c_ptr), intent(inout) :: verror Source Code subroutine delete_error_api ( verror ) & & bind ( C , name = namespace // \"delete_error\" ) !DEC$ ATTRIBUTES DLLEXPORT :: delete_error_api type ( c_ptr ), intent ( inout ) :: verror type ( vp_error ), pointer :: error if ( debug ) print '(\"[Info]\",1x, a)' , \"delete_error\" if ( c_associated ( verror )) then call c_f_pointer ( verror , error ) deallocate ( error ) verror = c_null_ptr end if end subroutine delete_error_api","tags":"","url":"proc/delete_error_api.html"},{"title":"delete_model_api – DFT-D4","text":"public  subroutine delete_model_api(vdisp) bind(C, name=namespace//\"delete_model\") Delete dispersion model Arguments Type Intent Optional Attributes Name type(c_ptr), intent(inout) :: vdisp Source Code subroutine delete_model_api ( vdisp ) & & bind ( C , name = namespace // \"delete_model\" ) !DEC$ ATTRIBUTES DLLEXPORT :: delete_model_api type ( c_ptr ), intent ( inout ) :: vdisp type ( vp_model ), pointer :: disp if ( debug ) print '(\"[Info]\",1x, a)' , \"delete_model\" if ( c_associated ( vdisp )) then call c_f_pointer ( vdisp , disp ) deallocate ( disp ) vdisp = c_null_ptr end if end subroutine delete_model_api","tags":"","url":"proc/delete_model_api.html"},{"title":"delete_param_api – DFT-D4","text":"public  subroutine delete_param_api(vparam) bind(C, name=namespace//\"delete_param\") Delete damping parameters Arguments Type Intent Optional Attributes Name type(c_ptr), intent(inout) :: vparam Source Code subroutine delete_param_api ( vparam ) & & bind ( C , name = namespace // \"delete_param\" ) !DEC$ ATTRIBUTES DLLEXPORT :: delete_param_api type ( c_ptr ), intent ( inout ) :: vparam type ( vp_param ), pointer :: param if ( debug ) print '(\"[Info]\",1x, a)' , \"delete_param\" if ( c_associated ( vparam )) then call c_f_pointer ( vparam , param ) deallocate ( param ) vparam = c_null_ptr end if end subroutine delete_param_api","tags":"","url":"proc/delete_param_api.html"},{"title":"delete_structure_api – DFT-D4","text":"public  subroutine delete_structure_api(vmol) bind(C, name=namespace//\"delete_structure\") Delete molecular structure data Arguments Type Intent Optional Attributes Name type(c_ptr), intent(inout) :: vmol Source Code subroutine delete_structure_api ( vmol ) & & bind ( C , name = namespace // \"delete_structure\" ) !DEC$ ATTRIBUTES DLLEXPORT :: delete_structure_api type ( c_ptr ), intent ( inout ) :: vmol type ( vp_structure ), pointer :: mol if ( debug ) print '(\"[Info]\",1x, a)' , \"delete_structure\" if ( c_associated ( vmol )) then call c_f_pointer ( vmol , mol ) deallocate ( mol ) vmol = c_null_ptr end if end subroutine delete_structure_api","tags":"","url":"proc/delete_structure_api.html"},{"title":"f_c_character – DFT-D4","text":"private  subroutine f_c_character(rhs, lhs, len) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: rhs character(kind=c_char, len=1), intent(out) :: lhs (*) integer, intent(in) :: len Source Code subroutine f_c_character ( rhs , lhs , len ) character ( kind = c_char ), intent ( out ) :: lhs ( * ) character ( len =* ), intent ( in ) :: rhs integer , intent ( in ) :: len integer :: length length = min ( len - 1 , len_trim ( rhs )) lhs ( 1 : length ) = transfer ( rhs ( 1 : length ), lhs ( 1 : length )) lhs ( length + 1 : length + 1 ) = c_null_char end subroutine f_c_character","tags":"","url":"proc/f_c_character.html"},{"title":"get_dispersion_api – DFT-D4","text":"public  subroutine get_dispersion_api(verror, vmol, vdisp, vparam, energy, c_gradient, c_sigma) bind(C, name=namespace//\"get_dispersion\") Calculate dispersion Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol type(c_ptr), value :: vdisp type(c_ptr), value :: vparam real(kind=c_double), intent(out) :: energy real(kind=c_double), intent(out), optional :: c_gradient (3,*) real(kind=c_double), intent(out), optional :: c_sigma (3,3) Source Code subroutine get_dispersion_api ( verror , vmol , vdisp , vparam , & & energy , c_gradient , c_sigma ) & & bind ( C , name = namespace // \"get_dispersion\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dispersion_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ), value :: vdisp type ( vp_model ), pointer :: disp type ( c_ptr ), value :: vparam type ( vp_param ), pointer :: param real ( c_double ), intent ( out ) :: energy real ( c_double ), intent ( out ), optional :: c_gradient ( 3 , * ) real ( wp ), allocatable :: gradient (:, :) real ( c_double ), intent ( out ), optional :: c_sigma ( 3 , 3 ) real ( wp ), allocatable :: sigma (:, :) logical :: has_grad , has_sigma if ( debug ) print '(\"[Info]\",1x, a)' , \"get_dispersion\" if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) if (. not . c_associated ( vdisp )) then call fatal_error ( error % ptr , \"Dispersion model is missing\" ) return end if call c_f_pointer ( vdisp , disp ) if (. not . c_associated ( vparam )) then call fatal_error ( error % ptr , \"Damping parameters are missing\" ) return end if call c_f_pointer ( vparam , param ) if (. not . allocated ( param % ptr )) then call fatal_error ( error % ptr , \"Damping parameters are not initialized\" ) return end if has_grad = present ( c_gradient ) if ( has_grad ) then gradient = c_gradient (: 3 , : mol % ptr % nat ) endif has_sigma = present ( c_sigma ) if ( has_sigma ) then sigma = c_sigma (: 3 , : 3 ) ! Still needs to be passed into dispersion subroutines, ! just won't be returned through the API. ! Would need to refactor disperision ! subroutines to make sigma truly optional. else if ( has_grad ) then allocate ( sigma ( 3 , 3 )) endif ! Evaluate energy, gradient (optional), and ! sigma (optional) analytically call get_dispersion ( mol % ptr , disp % ptr , param % ptr , realspace_cutoff (), & & energy , gradient , sigma ) if ( has_grad ) then c_gradient (: 3 , : mol % ptr % nat ) = gradient endif if ( has_sigma ) then c_sigma (: 3 , : 3 ) = sigma endif end subroutine get_dispersion_api","tags":"","url":"proc/get_dispersion_api.html"},{"title":"get_error_api – DFT-D4","text":"public  subroutine get_error_api(verror, charptr, buffersize) bind(C, name=namespace//\"get_error\") Get error message from error handle Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror character(kind=c_char, len=1), intent(inout) :: charptr (*) integer(kind=c_int), intent(in), optional :: buffersize Source Code subroutine get_error_api ( verror , charptr , buffersize ) & & bind ( C , name = namespace // \"get_error\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_error_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error character ( kind = c_char ), intent ( inout ) :: charptr ( * ) integer ( c_int ), intent ( in ), optional :: buffersize integer :: max_length if ( debug ) print '(\"[Info]\",1x, a)' , \"get_error\" if ( c_associated ( verror )) then call c_f_pointer ( verror , error ) if ( present ( buffersize )) then max_length = buffersize else max_length = huge ( max_length ) - 2 end if if ( allocated ( error % ptr )) then call f_c_character ( error % ptr % message , charptr , max_length ) end if end if end subroutine get_error_api","tags":"","url":"proc/get_error_api.html"},{"title":"get_numerical_hessian_api – DFT-D4","text":"private  subroutine get_numerical_hessian_api(verror, vmol, vdisp, vparam, c_hessian) bind(C, name=namespace//\"get_numerical_hessian\") Calculate hessian numerically Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol type(c_ptr), value :: vdisp type(c_ptr), value :: vparam real(kind=c_double), intent(out) :: c_hessian (*) Source Code subroutine get_numerical_hessian_api ( verror , vmol , vdisp , & & vparam , c_hessian ) & & bind ( C , name = namespace // \"get_numerical_hessian\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_numerical_hessian_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ), value :: vdisp type ( vp_model ), pointer :: disp type ( c_ptr ), value :: vparam type ( vp_param ), pointer :: param real ( c_double ), intent ( out ) :: c_hessian ( * ) real ( wp ), allocatable :: hessian (:, :, :, :) integer :: nat_sq if ( debug ) print '(\"[Info]\",1x, a)' , \"get_numerical_hessian\" if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) nat_sq = mol % ptr % nat * mol % ptr % nat if (. not . c_associated ( vdisp )) then call fatal_error ( error % ptr , \"Dispersion model is missing\" ) return end if call c_f_pointer ( vdisp , disp ) if (. not . c_associated ( vparam )) then call fatal_error ( error % ptr , \"Damping parameters are missing\" ) return end if call c_f_pointer ( vparam , param ) if (. not . allocated ( param % ptr )) then call fatal_error ( error % ptr , \"Damping parameters are not initialized\" ) return end if ! Evaluate hessian numerically hessian = reshape ( c_hessian (: 9 * nat_sq ), & &( / 3 , mol % ptr % nat , 3 , mol % ptr % nat / )) call get_dispersion_hessian ( mol % ptr , disp % ptr , param % ptr , & & realspace_cutoff (), hessian ) c_hessian (: 9 * nat_sq ) = reshape ( hessian , ( / 9 * nat_sq / )) end subroutine get_numerical_hessian_api","tags":"","url":"proc/get_numerical_hessian_api.html"},{"title":"get_pairwise_dispersion_api – DFT-D4","text":"public  subroutine get_pairwise_dispersion_api(verror, vmol, vdisp, vparam, c_pair_energy2, c_pair_energy3) bind(C, name=namespace//\"get_pairwise_dispersion\") Calculate pairwise representation of dispersion energy Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol type(c_ptr), value :: vdisp type(c_ptr), value :: vparam type(c_ptr), intent(in), value :: c_pair_energy2 type(c_ptr), intent(in), value :: c_pair_energy3 Source Code subroutine get_pairwise_dispersion_api ( verror , vmol , vdisp , vparam , & & c_pair_energy2 , c_pair_energy3 ) & & bind ( C , name = namespace // \"get_pairwise_dispersion\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_pairwise_dispersion_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ), value :: vdisp type ( vp_model ), pointer :: disp type ( c_ptr ), value :: vparam type ( vp_param ), pointer :: param type ( c_ptr ), value , intent ( in ) :: c_pair_energy2 real ( wp ), pointer :: pair_energy2 (:, :) type ( c_ptr ), value , intent ( in ) :: c_pair_energy3 real ( wp ), pointer :: pair_energy3 (:, :) if ( debug ) print '(\"[Info]\",1x, a)' , \"get_pairwise_dispersion\" if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) if (. not . c_associated ( vdisp )) then call fatal_error ( error % ptr , \"Dispersion model is missing\" ) return end if call c_f_pointer ( vdisp , disp ) if (. not . c_associated ( vparam )) then call fatal_error ( error % ptr , \"Damping parameters are missing\" ) return end if call c_f_pointer ( vparam , param ) if (. not . allocated ( param % ptr )) then call fatal_error ( error % ptr , \"Damping parameters are not initialized\" ) return end if call c_f_pointer ( c_pair_energy2 , pair_energy2 , [ mol % ptr % nat , mol % ptr % nat ]) call c_f_pointer ( c_pair_energy3 , pair_energy3 , [ mol % ptr % nat , mol % ptr % nat ]) call get_pairwise_dispersion ( mol % ptr , disp % ptr , param % ptr , realspace_cutoff (), & & pair_energy2 , pair_energy3 ) end subroutine get_pairwise_dispersion_api","tags":"","url":"proc/get_pairwise_dispersion_api.html"},{"title":"get_properties_api – DFT-D4","text":"public  subroutine get_properties_api(verror, vmol, vdisp, c_cn, c_charges, c_c6, c_alpha) bind(C, name=namespace//\"get_properties\") Calculate dispersion Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol type(c_ptr), value :: vdisp real(kind=c_double), intent(out), optional :: c_cn (*) real(kind=c_double), intent(out), optional :: c_charges (*) real(kind=c_double), intent(out), optional :: c_c6 (*) real(kind=c_double), intent(out), optional :: c_alpha (*) Source Code subroutine get_properties_api ( verror , vmol , vdisp , & & c_cn , c_charges , c_c6 , c_alpha ) & & bind ( C , name = namespace // \"get_properties\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_properties_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ), value :: vdisp type ( vp_model ), pointer :: disp real ( c_double ), intent ( out ), optional :: c_cn ( * ) real ( wp ), allocatable :: cn (:) real ( c_double ), intent ( out ), optional :: c_charges ( * ) real ( wp ), allocatable :: charges (:) real ( c_double ), intent ( out ), optional :: c_c6 ( * ) real ( wp ), allocatable :: c6 (:, :) real ( c_double ), intent ( out ), optional :: c_alpha ( * ) real ( wp ), allocatable :: alpha (:) if ( debug ) print '(\"[Info]\",1x, a)' , \"get_properties\" if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) if (. not . c_associated ( vdisp )) then call fatal_error ( error % ptr , \"Dispersion model is missing\" ) return end if call c_f_pointer ( vdisp , disp ) allocate ( cn ( mol % ptr % nat ), charges ( mol % ptr % nat ), alpha ( mol % ptr % nat ), & & c6 ( mol % ptr % nat , mol % ptr % nat )) call get_properties ( mol % ptr , disp % ptr , realspace_cutoff (), cn , charges , c6 , alpha ) if ( present ( c_cn )) then c_cn (: size ( cn )) = cn end if if ( present ( c_charges )) then c_charges (: size ( charges )) = charges end if if ( present ( c_c6 )) then c_c6 (: size ( c6 )) = reshape ( c6 , [ size ( c6 )]) end if if ( present ( c_alpha )) then c_alpha (: size ( alpha )) = alpha end if end subroutine get_properties_api","tags":"","url":"proc/get_properties_api.html"},{"title":"update_structure_api – DFT-D4","text":"public  subroutine update_structure_api(verror, vmol, positions, lattice) bind(C, name=namespace//\"update_structure\") Update coordinates and lattice parameters (quantities in Bohr) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol real(kind=c_double), intent(in) :: positions (3,*) real(kind=c_double), intent(in), optional :: lattice (3,3) Source Code subroutine update_structure_api ( verror , vmol , positions , lattice ) & & bind ( C , name = namespace // \"update_structure\" ) !DEC$ ATTRIBUTES DLLEXPORT :: update_structure_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol real ( c_double ), intent ( in ) :: positions ( 3 , * ) real ( c_double ), intent ( in ), optional :: lattice ( 3 , 3 ) if ( debug ) print '(\"[Info]\",1x, a)' , \"update_structure\" if (. not . c_associated ( verror )) then return end if call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) if ( mol % ptr % nat <= 0 . or . mol % ptr % nid <= 0 . or . . not . allocated ( mol % ptr % num ) & & . or . . not . allocated ( mol % ptr % id ) . or . . not . allocated ( mol % ptr % xyz )) then call fatal_error ( error % ptr , \"Invalid molecular structure data provided\" ) return end if mol % ptr % xyz (:, :) = positions (: 3 , : mol % ptr % nat ) if ( present ( lattice )) then mol % ptr % lattice (:, :) = lattice (: 3 , : 3 ) end if call wrap_to_central_cell ( mol % ptr % xyz , mol % ptr % lattice , mol % ptr % periodic ) call verify_structure ( error % ptr , mol % ptr ) end subroutine update_structure_api","tags":"","url":"proc/update_structure_api.html"},{"title":"verify_structure – DFT-D4","text":"private  subroutine verify_structure(error, mol) Cold fusion check Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error type(structure_type), intent(in) :: mol Source Code subroutine verify_structure ( error , mol ) type ( error_type ), allocatable , intent ( out ) :: error type ( structure_type ), intent ( in ) :: mol integer :: iat , jat , stat stat = 0 do iat = 1 , mol % nat do jat = 1 , iat - 1 if ( norm2 ( mol % xyz (:, jat ) - mol % xyz (:, iat )) < 1.0e-9_wp ) stat = stat + 1 end do end do if ( stat > 0 ) then call fatal_error ( error , \"Too close interatomic distances found\" ) end if end subroutine verify_structure","tags":"","url":"proc/verify_structure.html"},{"title":"get_nref_num – DFT-D4","text":"private elemental function get_nref_num(num) result(n) Get number of references for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value integer Number of references Source Code elemental function get_nref_num ( num ) result ( n ) !> Atomic number integer , intent ( in ) :: num !> Number of references integer :: n if ( num > 0 . and . num <= size ( refn )) then n = refn ( num ) else n = 0 end if end function get_nref_num","tags":"","url":"proc/get_nref_num.html"},{"title":"get_nref_sym – DFT-D4","text":"private elemental function get_nref_sym(sym) result(n) Get number of references for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value integer Number of references Source Code elemental function get_nref_sym ( sym ) result ( n ) !> Element symbol character ( len =* ), intent ( in ) :: sym !> Number of references integer :: n n = get_nref ( to_number ( sym )) end function get_nref_sym","tags":"","url":"proc/get_nref_sym.html"},{"title":"zeta – DFT-D4","text":"private elemental function zeta(a, c, qref, qmod) charge scaling function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: a real(kind=wp), intent(in) :: c real(kind=wp), intent(in) :: qref real(kind=wp), intent(in) :: qmod Return Value real(kind=wp) Source Code elemental function zeta ( a , c , qref , qmod ) real ( wp ), intent ( in ) :: a real ( wp ), intent ( in ) :: c real ( wp ), intent ( in ) :: qref real ( wp ), intent ( in ) :: qmod real ( wp ) :: zeta intrinsic :: exp if ( qmod < 0.0_wp ) then zeta = exp ( a ) else zeta = exp ( a * ( 1.0_wp - exp ( c * ( 1.0_wp - qref / qmod ) ) ) ) endif end function zeta","tags":"","url":"proc/zeta~2.html"},{"title":"set_refalpha_eeq_num – DFT-D4","text":"private pure subroutine set_refalpha_eeq_num(alpha, ga, gc, num) Set the reference polarizibility for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness integer, intent(in) :: num Atomic number Source Code pure subroutine set_refalpha_eeq_num ( alpha , ga , gc , num ) !> Reference polarizibility real ( wp ), intent ( out ) :: alpha (:, :) !> Maximum charge scaling height real ( wp ), intent ( in ) :: ga !> Charge scaling steepness real ( wp ), intent ( in ) :: gc !> Atomic number integer , intent ( in ) :: num integer :: ref integer :: ir , is real ( wp ) :: iz real ( wp ) :: aiw ( 23 ) alpha (:, :) = 0.0_wp if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) do ir = 1 , ref is = refsys ( ir , num ) if ( abs ( is ) < 1e-12_wp ) cycle iz = get_effective_charge ( is ) aiw = sscale ( is ) * secaiw (:, is ) & & * zeta ( ga , get_hardness ( is ) * gc , iz , clsh ( ir , num ) + iz ) alpha (:, ir ) = max ( ascale ( ir , num ) * ( alphaiw (:, ir , num ) & & - hcount ( ir , num ) * aiw ), 0.0_wp ) end do end if end subroutine set_refalpha_eeq_num","tags":"","url":"proc/set_refalpha_eeq_num.html"},{"title":"set_refalpha_eeq_sym – DFT-D4","text":"private pure subroutine set_refalpha_eeq_sym(alpha, ga, gc, sym) Set the reference polarizibility for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness character(len=*), intent(in) :: sym Element symbol Source Code pure subroutine set_refalpha_eeq_sym ( alpha , ga , gc , sym ) !> Reference polarizibility real ( wp ), intent ( out ) :: alpha (:, :) !> Maximum charge scaling height real ( wp ), intent ( in ) :: ga !> Charge scaling steepness real ( wp ), intent ( in ) :: gc !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refalpha_eeq ( alpha , ga , gc , to_number ( sym )) end subroutine set_refalpha_eeq_sym","tags":"","url":"proc/set_refalpha_eeq_sym.html"},{"title":"set_refalpha_gfn2_num – DFT-D4","text":"private pure subroutine set_refalpha_gfn2_num(alpha, ga, gc, num) Set the reference polarizibility for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness integer, intent(in) :: num Atomic number Source Code pure subroutine set_refalpha_gfn2_num ( alpha , ga , gc , num ) !> Reference polarizibility real ( wp ), intent ( out ) :: alpha (:, :) !> Maximum charge scaling height real ( wp ), intent ( in ) :: ga !> Charge scaling steepness real ( wp ), intent ( in ) :: gc !> Atomic number integer , intent ( in ) :: num integer :: ref integer :: ir , is real ( wp ) :: iz real ( wp ) :: aiw ( 23 ) alpha (:, :) = 0.0_wp if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) do ir = 1 , ref is = refsys ( ir , num ) if ( abs ( is ) < 1e-12_wp ) cycle iz = get_effective_charge ( is ) aiw = sscale ( is ) * secaiw (:, is ) & & * zeta ( ga , get_hardness ( is ) * gc , iz , refh ( ir , num ) + iz ) alpha (:, ir ) = max ( ascale ( ir , num ) * ( alphaiw (:, ir , num ) & & - hcount ( ir , num ) * aiw ), 0.0_wp ) end do end if end subroutine set_refalpha_gfn2_num","tags":"","url":"proc/set_refalpha_gfn2_num.html"},{"title":"set_refalpha_gfn2_sym – DFT-D4","text":"private pure subroutine set_refalpha_gfn2_sym(alpha, ga, gc, sym) Set the reference polarizibility for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness character(len=*), intent(in) :: sym Element symbol Source Code pure subroutine set_refalpha_gfn2_sym ( alpha , ga , gc , sym ) !> Reference polarizibility real ( wp ), intent ( out ) :: alpha (:, :) !> Maximum charge scaling height real ( wp ), intent ( in ) :: ga !> Charge scaling steepness real ( wp ), intent ( in ) :: gc !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refalpha_gfn2 ( alpha , ga , gc , to_number ( sym )) end subroutine set_refalpha_gfn2_sym","tags":"","url":"proc/set_refalpha_gfn2_sym.html"},{"title":"set_refcn_num – DFT-D4","text":"private pure subroutine set_refcn_num(cn, num) Set the reference coordination numbers for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: cn (:) Reference coordination number integer, intent(in) :: num Atomic number Source Code pure subroutine set_refcn_num ( cn , num ) !> Reference coordination number real ( wp ), intent ( out ) :: cn (:) !> Atomic number integer , intent ( in ) :: num integer :: ref cn (:) = 0.0_wp if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) cn (: ref ) = refcovcn (: ref , num ) end if end subroutine set_refcn_num","tags":"","url":"proc/set_refcn_num.html"},{"title":"set_refcn_sym – DFT-D4","text":"private pure subroutine set_refcn_sym(cn, sym) Set the reference coordination numbers for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: cn (:) Reference coordination number character(len=*), intent(in) :: sym Element symbol Source Code pure subroutine set_refcn_sym ( cn , sym ) !> Reference coordination number real ( wp ), intent ( out ) :: cn (:) !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refcn ( cn , to_number ( sym )) end subroutine set_refcn_sym","tags":"","url":"proc/set_refcn_sym.html"},{"title":"set_refgw_num – DFT-D4","text":"private pure subroutine set_refgw_num(ngw, num) Set the number of gaussian weights for an atomic number Arguments Type Intent Optional Attributes Name integer, intent(out) :: ngw (:) Number of gaussian weights integer, intent(in) :: num Atomic number Source Code pure subroutine set_refgw_num ( ngw , num ) !> Number of gaussian weights integer , intent ( out ) :: ngw (:) !> Atomic number integer , intent ( in ) :: num integer , parameter :: max_cn = 19 integer :: icn , ir , ref integer :: cnc ( 0 : max_cn ) ngw (:) = 1 if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) cnc (:) = [ 1 , spread ( 0 , 1 , max_cn )] do ir = 1 , ref icn = min ( nint ( refcn ( ir , num )), max_cn ) cnc ( icn ) = cnc ( icn ) + 1 end do do ir = 1 , ref icn = cnc ( min ( nint ( refcn ( ir , num )), max_cn )) ngw ( ir ) = icn * ( icn + 1 ) / 2 end do end if end subroutine set_refgw_num","tags":"","url":"proc/set_refgw_num.html"},{"title":"set_refgw_sym – DFT-D4","text":"private pure subroutine set_refgw_sym(ngw, sym) Set the number of gaussian weights for an element symbol Arguments Type Intent Optional Attributes Name integer, intent(out) :: ngw (:) Number of gaussian weights character(len=*), intent(in) :: sym Element symbol Source Code pure subroutine set_refgw_sym ( ngw , sym ) !> Number of gaussian weights integer , intent ( out ) :: ngw (:) !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refgw ( ngw , to_number ( sym )) end subroutine set_refgw_sym","tags":"","url":"proc/set_refgw_sym.html"},{"title":"set_refq_eeq_num – DFT-D4","text":"private pure subroutine set_refq_eeq_num(q, num) Set the reference partial charges for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge integer, intent(in) :: num Atomic number Source Code pure subroutine set_refq_eeq_num ( q , num ) !> Reference partial charge real ( wp ), intent ( out ) :: q (:) !> Atomic number integer , intent ( in ) :: num integer :: ref q (:) = 0.0_wp if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) q (: ref ) = clsq (: ref , num ) end if end subroutine set_refq_eeq_num","tags":"","url":"proc/set_refq_eeq_num.html"},{"title":"set_refq_eeq_sym – DFT-D4","text":"private pure subroutine set_refq_eeq_sym(q, sym) Set the reference partial charges for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge character(len=*), intent(in) :: sym Element symbol Source Code pure subroutine set_refq_eeq_sym ( q , sym ) !> Reference partial charge real ( wp ), intent ( out ) :: q (:) !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refq_eeq ( q , to_number ( sym )) end subroutine set_refq_eeq_sym","tags":"","url":"proc/set_refq_eeq_sym.html"},{"title":"set_refq_gfn2_num – DFT-D4","text":"private pure subroutine set_refq_gfn2_num(q, num) Set the reference partial charges for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge integer, intent(in) :: num Atomic number Source Code pure subroutine set_refq_gfn2_num ( q , num ) !> Reference partial charge real ( wp ), intent ( out ) :: q (:) !> Atomic number integer , intent ( in ) :: num integer :: ref q (:) = 0.0_wp if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) q (: ref ) = refq (: ref , num ) end if end subroutine set_refq_gfn2_num","tags":"","url":"proc/set_refq_gfn2_num.html"},{"title":"set_refq_gfn2_sym – DFT-D4","text":"private pure subroutine set_refq_gfn2_sym(q, sym) Set the reference partial charges for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge character(len=*), intent(in) :: sym Element symbol Source Code pure subroutine set_refq_gfn2_sym ( q , sym ) !> Reference partial charge real ( wp ), intent ( out ) :: q (:) !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refq_gfn2 ( q , to_number ( sym )) end subroutine set_refq_gfn2_sym","tags":"","url":"proc/set_refq_gfn2_sym.html"},{"title":"get_nref – DFT-D4","text":"public interface get_nref Module Procedures private elemental function get_nref_sym (sym) result(n) Get number of references for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value integer Number of references private elemental function get_nref_num (num) result(n) Get number of references for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value integer Number of references","tags":"","url":"interface/get_nref.html"},{"title":"set_refalpha_eeq – DFT-D4","text":"public interface set_refalpha_eeq Module Procedures private pure subroutine set_refalpha_eeq_sym (alpha, ga, gc, sym) Set the reference polarizibility for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refalpha_eeq_num (alpha, ga, gc, num) Set the reference polarizibility for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness integer, intent(in) :: num Atomic number","tags":"","url":"interface/set_refalpha_eeq.html"},{"title":"set_refalpha_gfn2 – DFT-D4","text":"public interface set_refalpha_gfn2 Module Procedures private pure subroutine set_refalpha_gfn2_sym (alpha, ga, gc, sym) Set the reference polarizibility for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refalpha_gfn2_num (alpha, ga, gc, num) Set the reference polarizibility for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness integer, intent(in) :: num Atomic number","tags":"","url":"interface/set_refalpha_gfn2.html"},{"title":"set_refcn – DFT-D4","text":"public interface set_refcn Module Procedures private pure subroutine set_refcn_sym (cn, sym) Set the reference coordination numbers for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: cn (:) Reference coordination number character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refcn_num (cn, num) Set the reference coordination numbers for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: cn (:) Reference coordination number integer, intent(in) :: num Atomic number","tags":"","url":"interface/set_refcn.html"},{"title":"set_refgw – DFT-D4","text":"public interface set_refgw Module Procedures private pure subroutine set_refgw_sym (ngw, sym) Set the number of gaussian weights for an element symbol Arguments Type Intent Optional Attributes Name integer, intent(out) :: ngw (:) Number of gaussian weights character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refgw_num (ngw, num) Set the number of gaussian weights for an atomic number Arguments Type Intent Optional Attributes Name integer, intent(out) :: ngw (:) Number of gaussian weights integer, intent(in) :: num Atomic number","tags":"","url":"interface/set_refgw.html"},{"title":"set_refq_eeq – DFT-D4","text":"public interface set_refq_eeq Module Procedures private pure subroutine set_refq_eeq_sym (q, sym) Set the reference partial charges for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refq_eeq_num (q, num) Set the reference partial charges for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge integer, intent(in) :: num Atomic number","tags":"","url":"interface/set_refq_eeq.html"},{"title":"set_refq_gfn2 – DFT-D4","text":"public interface set_refq_gfn2 Module Procedures private pure subroutine set_refq_gfn2_sym (q, sym) Set the reference partial charges for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refq_gfn2_num (q, num) Set the reference partial charges for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge integer, intent(in) :: num Atomic number","tags":"","url":"interface/set_refq_gfn2.html"},{"title":"get_charges – DFT-D4","text":"public  subroutine get_charges(mol, qvec, dqdr, dqdL) Obtain charges from electronegativity equilibration model Arguments Type Intent Optional Attributes Name type(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(out), contiguous :: qvec (:) Atomic partial charges real(kind=wp), intent(out), optional, contiguous :: dqdr (:,:,:) Derivative of the partial charges w.r.t. the Cartesian coordinates real(kind=wp), intent(out), optional, contiguous :: dqdL (:,:,:) Derivative of the partial charges w.r.t. strain deformations Source Code subroutine get_charges ( mol , qvec , dqdr , dqdL ) !DEC$ ATTRIBUTES DLLEXPORT :: get_charges !> Molecular structure data type ( structure_type ), intent ( in ) :: mol !> Atomic partial charges real ( wp ), intent ( out ), contiguous :: qvec (:) !> Derivative of the partial charges w.r.t. the Cartesian coordinates real ( wp ), intent ( out ), contiguous , optional :: dqdr (:, :, :) !> Derivative of the partial charges w.r.t. strain deformations real ( wp ), intent ( out ), contiguous , optional :: dqdL (:, :, :) logical :: grad type ( mchrg_model_type ) :: model type ( error_type ), allocatable :: error real ( wp ), parameter :: cn_max = 8.0_wp , cutoff = 2 5.0_wp real ( wp ), allocatable :: cn (:), dcndr (:, :, :), dcndL (:, :, :) real ( wp ), allocatable :: rcov (:), trans (:, :) grad = present ( dqdr ) . and . present ( dqdL ) call new_eeq2019_model ( mol , model , error ) if ( allocated ( error )) then write ( error_unit , '(\"[Error]:\", 1x, a)' ) error % message error stop end if allocate ( cn ( mol % nat )) if ( grad ) then allocate ( dcndr ( 3 , mol % nat , mol % nat ), dcndL ( 3 , 3 , mol % nat )) end if call model % ncoord % get_cn ( mol , cn , dcndr , dcndL ) call model % solve ( mol , error , cn , dcndr , dcndL , qvec = qvec , dqdr = dqdr , dqdL = dqdL ) if ( allocated ( error )) then write ( error_unit , '(\"[Error]:\", 1x, a)' ) error % message error stop end if end subroutine get_charges","tags":"","url":"proc/get_charges.html"},{"title":"get_r4r2_val_num – DFT-D4","text":"private elemental function get_r4r2_val_num(num) result(rad) Get r4/r2 expectation value for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) r4/r2 expectation value Source Code elemental function get_r4r2_val_num ( num ) result ( rad ) !> Atomic number integer , intent ( in ) :: num !> r4/r2 expectation value real ( wp ) :: rad if ( num > 0 . and . num <= size ( sqrt_z_r4_over_r2 )) then rad = sqrt_z_r4_over_r2 ( num ) else rad = 0.0_wp end if end function get_r4r2_val_num","tags":"","url":"proc/get_r4r2_val_num.html"},{"title":"get_r4r2_val_sym – DFT-D4","text":"private elemental function get_r4r2_val_sym(sym) result(rad) Get r4/r2 expectation value for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) r4/r2 expectation value Source Code elemental function get_r4r2_val_sym ( sym ) result ( rad ) !> Element symbol character ( len =* ), intent ( in ) :: sym !> r4/r2 expectation value real ( wp ) :: rad rad = get_r4r2_val ( to_number ( sym )) end function get_r4r2_val_sym","tags":"","url":"proc/get_r4r2_val_sym.html"},{"title":"get_r4r2_val – DFT-D4","text":"public interface get_r4r2_val Get r4/r2 expectation value Module Procedures private elemental function get_r4r2_val_num (num) result(rad) Get r4/r2 expectation value for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) r4/r2 expectation value private elemental function get_r4r2_val_sym (sym) result(rad) Get r4/r2 expectation value for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) r4/r2 expectation value","tags":"","url":"interface/get_r4r2_val.html"},{"title":"get_atomic_c6 – DFT-D4","text":"private  subroutine get_atomic_c6(self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq) Calculate atomic dispersion coefficients and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Type Bound d4s_model Arguments Type Intent Optional Attributes Name class( d4s_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Pairwise weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the pairwise weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the pairwise weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(out), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(out), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charge Source Code subroutine get_atomic_c6 ( self , mol , gwvec , gwdcn , gwdq , c6 , dc6dcn , dc6dq ) !DEC$ ATTRIBUTES DLLEXPORT :: get_atomic_c6 !> Instance of the dispersion model class ( d4s_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Pairwise weighting function for the atomic reference systems real ( wp ), intent ( in ) :: gwvec (:, :, :) !> Derivative of the pairwise weighting function w.r.t. the coordination number real ( wp ), intent ( in ), optional :: gwdcn (:, :, :) !> Derivative of the pairwise weighting function w.r.t. the partial charge real ( wp ), intent ( in ), optional :: gwdq (:, :, :) !> C6 coefficients for all atom pairs. real ( wp ), intent ( out ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( out ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charge real ( wp ), intent ( out ), optional :: dc6dq (:, :) integer :: iat , jat , izp , jzp , iref , jref real ( wp ) :: refc6 , dc6 , dc6dcni , dc6dcnj , dc6dqi , dc6dqj if ( present ( gwdcn ). and . present ( dc6dcn ) & & . and . present ( gwdq ). and . present ( dc6dq )) then c6 (:, :) = 0.0_wp dc6dcn (:, :) = 0.0_wp dc6dq (:, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(c6, dc6dcn, dc6dq, mol, self, gwvec, gwdcn, gwdq) & !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6, dc6dqi, dc6dqj, & !$omp& dc6dcni, dc6dcnj) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) dc6 = 0.0_wp dc6dcni = 0.0_wp dc6dcnj = 0.0_wp dc6dqi = 0.0_wp dc6dqj = 0.0_wp do iref = 1 , self % ref ( izp ) do jref = 1 , self % ref ( jzp ) refc6 = self % c6 ( iref , jref , izp , jzp ) dc6 = dc6 + gwvec ( iref , iat , jat ) * gwvec ( jref , jat , iat ) * refc6 dc6dcni = dc6dcni + gwdcn ( iref , iat , jat ) * gwvec ( jref , jat , iat ) * refc6 dc6dcnj = dc6dcnj + gwvec ( iref , iat , jat ) * gwdcn ( jref , jat , iat ) * refc6 dc6dqi = dc6dqi + gwdq ( iref , iat , jat ) * gwvec ( jref , jat , iat ) * refc6 dc6dqj = dc6dqj + gwvec ( iref , iat , jat ) * gwdq ( jref , jat , iat ) * refc6 end do end do c6 ( iat , jat ) = dc6 c6 ( jat , iat ) = dc6 dc6dcn ( iat , jat ) = dc6dcni dc6dcn ( jat , iat ) = dc6dcnj dc6dq ( iat , jat ) = dc6dqi dc6dq ( jat , iat ) = dc6dqj end do end do else c6 (:, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(c6, mol, self, gwvec) & !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) dc6 = 0.0_wp do iref = 1 , self % ref ( izp ) do jref = 1 , self % ref ( jzp ) refc6 = self % c6 ( iref , jref , izp , jzp ) dc6 = dc6 + gwvec ( iref , iat , jat ) * gwvec ( jref , jat , iat ) * refc6 end do end do c6 ( iat , jat ) = dc6 c6 ( jat , iat ) = dc6 end do end do end if end subroutine get_atomic_c6","tags":"","url":"proc/get_atomic_c6~2.html"},{"title":"get_polarizabilities – DFT-D4","text":"private  subroutine get_polarizabilities(self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq) Calculate atomic polarizabilities and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Type Bound d4s_model Arguments Type Intent Optional Attributes Name class( d4s_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Pairwise weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the pairwise weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the pairwise weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: alpha (:) Static polarizabilities for all atoms. real(kind=wp), intent(out), optional :: dadcn (:) Derivative of the polarizibility w.r.t. the coordination number real(kind=wp), intent(out), optional :: dadq (:) Derivative of the polarizibility w.r.t. the partial charge Source Code subroutine get_polarizabilities ( self , mol , gwvec , gwdcn , gwdq , alpha , dadcn , dadq ) !DEC$ ATTRIBUTES DLLEXPORT :: get_polarizabilities !> Instance of the dispersion model class ( d4s_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Pairwise weighting function for the atomic reference systems real ( wp ), intent ( in ) :: gwvec (:, :, :) !> Derivative of the pairwise weighting function w.r.t. the coordination number real ( wp ), intent ( in ), optional :: gwdcn (:, :, :) !> Derivative of the pairwise weighting function w.r.t. the partial charge real ( wp ), intent ( in ), optional :: gwdq (:, :, :) !> Static polarizabilities for all atoms. real ( wp ), intent ( out ) :: alpha (:) !> Derivative of the polarizibility w.r.t. the coordination number real ( wp ), intent ( out ), optional :: dadcn (:) !> Derivative of the polarizibility w.r.t. the partial charge real ( wp ), intent ( out ), optional :: dadq (:) integer :: iat , izp , iref real ( wp ) :: refa , da , dadcni , dadqi if ( present ( gwdcn ). and . present ( dadcn ) & & . and . present ( gwdq ). and . present ( dadq )) then alpha (:) = 0.0_wp dadcn (:) = 0.0_wp dadq (:) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(alpha, dadcn, dadq, mol, self, gwvec, gwdcn, gwdq) & !$omp private(iat, izp, iref, refa, da, dadqi, dadcni) do iat = 1 , mol % nat izp = mol % id ( iat ) da = 0.0_wp dadcni = 0.0_wp dadqi = 0.0_wp do iref = 1 , self % ref ( izp ) refa = self % aiw ( 1 , iref , izp ) da = da + gwvec ( iref , iat , iat ) * refa dadcni = dadcni + gwdcn ( iref , iat , iat ) * refa dadqi = dadqi + gwdq ( iref , iat , iat ) * refa end do alpha ( iat ) = da dadcn ( iat ) = dadcni dadq ( iat ) = dadqi end do else alpha (:) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(alpha, mol, self, gwvec) private(iat, izp, iref, refa, da) do iat = 1 , mol % nat izp = mol % id ( iat ) da = 0.0_wp do iref = 1 , self % ref ( izp ) da = da + gwvec ( iref , iat , iat ) * self % aiw ( 1 , iref , izp ) end do alpha ( iat ) = da end do end if end subroutine get_polarizabilities","tags":"","url":"proc/get_polarizabilities~2.html"},{"title":"new_d4s_model_no_checks – DFT-D4","text":"private  subroutine new_d4s_model_no_checks(d4, mol, ga, gc, ref) Create new dispersion model from molecular structure input without\nchecking for supported elements (old/compatibility version) Arguments Type Intent Optional Attributes Name type( d4s_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness integer, intent(in), optional :: ref Reference charge selection Source Code subroutine new_d4s_model_no_checks ( d4 , mol , ga , gc , ref ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_no_checks !> Instance of the dispersion model type ( d4s_model ), intent ( out ) :: d4 !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Charge scaling height real ( wp ), intent ( in ), optional :: ga !> Charge scaling steepness real ( wp ), intent ( in ), optional :: gc !> Reference charge selection integer , intent ( in ), optional :: ref integer :: isp , izp , iref , jsp , jzp , jref integer :: mref , ref_charge real ( wp ) :: aiw ( 23 ), c6 real ( wp ), parameter :: thopi = 3.0_wp / pi d4 % ncoup = mol % nat if ( present ( ref )) then ref_charge = ref else ref_charge = d4_ref % eeq end if if ( present ( ga )) then d4 % ga = ga else d4 % ga = ga_default end if if ( present ( gc )) then d4 % gc = gc else d4 % gc = gc_default end if allocate ( d4 % wf ( mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , mol % nid jzp = mol % num ( jsp ) d4 % wf ( isp , jsp ) = get_wfpair_val ( izp , jzp ) end do end do allocate ( d4 % rcov ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % rcov ( isp ) = get_covalent_rad ( izp ) end do allocate ( d4 % en ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % en ( isp ) = get_electronegativity ( izp ) end do allocate ( d4 % zeff ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % zeff ( isp ) = get_effective_charge ( izp ) end do allocate ( d4 % eta ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % eta ( isp ) = get_hardness ( izp ) end do allocate ( d4 % r4r2 ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % r4r2 ( isp ) = get_r4r2_val ( izp ) end do allocate ( d4 % ref ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % ref ( isp ) = get_nref ( izp ) end do mref = maxval ( d4 % ref ) allocate ( d4 % cn ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refcn ( d4 % cn (:, isp ), izp ) end do allocate ( d4 % q ( mref , mol % nid )) allocate ( d4 % aiw ( 23 , mref , mol % nid )) if ( ref_charge == d4_ref % gfn2 ) then do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_gfn2 ( d4 % q (:, isp ), izp ) call set_refalpha_gfn2 ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do else if ( ref_charge /= d4_ref % eeq ) then write ( output_unit , '(a)' ) \"[Info] Unsupported option for reference charge. Defaulting to EEQ charges.\" end if do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_eeq ( d4 % q (:, isp ), izp ) call set_refalpha_eeq ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do end if allocate ( d4 % ngw ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refgw ( d4 % ngw (:, isp ), izp ) end do allocate ( d4 % c6 ( mref , mref , mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , isp jzp = mol % num ( jsp ) do iref = 1 , d4 % ref ( isp ) do jref = 1 , d4 % ref ( jsp ) aiw (:) = d4 % aiw (:, iref , isp ) * d4 % aiw (:, jref , jsp ) c6 = thopi * trapzd ( aiw ) d4 % c6 ( jref , iref , jsp , isp ) = c6 d4 % c6 ( iref , jref , isp , jsp ) = c6 end do end do end do end do end subroutine new_d4s_model_no_checks","tags":"","url":"proc/new_d4s_model_no_checks.html"},{"title":"new_d4s_model_with_checks – DFT-D4","text":"private  subroutine new_d4s_model_with_checks(error, d4, mol, ga, gc, ref) Create new D4S dispersion model from molecular structure input Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error Error handling type( d4s_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness integer, intent(in), optional :: ref Reference charge selection Source Code subroutine new_d4s_model_with_checks ( error , d4 , mol , ga , gc , ref ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_with_checks !> Instance of the dispersion model type ( d4s_model ), intent ( out ) :: d4 !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Error handling type ( error_type ), allocatable , intent ( out ) :: error !> Charge scaling height real ( wp ), intent ( in ), optional :: ga !> Charge scaling steepness real ( wp ), intent ( in ), optional :: gc !> Reference charge selection integer , intent ( in ), optional :: ref integer :: isp , izp , iref , jsp , jzp , jref integer :: mref , ref_charge real ( wp ) :: aiw ( 23 ), c6 real ( wp ), parameter :: thopi = 3.0_wp / pi ! check for unsupported elements (104 (Rf) - 111 (Rg)) do isp = 1 , mol % nid if ( mol % num ( isp ) > 103 . and . mol % num ( isp ) < 112 ) then call fatal_error ( error , \"Structure contains unsupported element '\" // trim ( mol % sym ( isp )) // \"'\" ) return end if end do d4 % ncoup = mol % nat if ( present ( ref )) then ref_charge = ref else ref_charge = d4_ref % eeq end if if ( present ( ga )) then d4 % ga = ga else d4 % ga = ga_default end if if ( present ( gc )) then d4 % gc = gc else d4 % gc = gc_default end if allocate ( d4 % wf ( mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , mol % nid jzp = mol % num ( jsp ) d4 % wf ( isp , jsp ) = get_wfpair_val ( izp , jzp ) end do end do allocate ( d4 % rcov ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % rcov ( isp ) = get_covalent_rad ( izp ) end do allocate ( d4 % en ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % en ( isp ) = get_electronegativity ( izp ) end do allocate ( d4 % zeff ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % zeff ( isp ) = get_effective_charge ( izp ) end do allocate ( d4 % eta ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % eta ( isp ) = get_hardness ( izp ) end do allocate ( d4 % r4r2 ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % r4r2 ( isp ) = get_r4r2_val ( izp ) end do allocate ( d4 % ref ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % ref ( isp ) = get_nref ( izp ) end do mref = maxval ( d4 % ref ) allocate ( d4 % cn ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refcn ( d4 % cn (:, isp ), izp ) end do allocate ( d4 % q ( mref , mol % nid )) allocate ( d4 % aiw ( 23 , mref , mol % nid )) select case ( ref_charge ) case default call fatal_error ( error , \"Unsupported option for reference charges\" ) return case ( d4_ref % eeq ) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_eeq ( d4 % q (:, isp ), izp ) call set_refalpha_eeq ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do case ( d4_ref % gfn2 ) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_gfn2 ( d4 % q (:, isp ), izp ) call set_refalpha_gfn2 ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do end select allocate ( d4 % ngw ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refgw ( d4 % ngw (:, isp ), izp ) end do allocate ( d4 % c6 ( mref , mref , mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , isp jzp = mol % num ( jsp ) do iref = 1 , d4 % ref ( isp ) do jref = 1 , d4 % ref ( jsp ) aiw (:) = d4 % aiw (:, iref , isp ) * d4 % aiw (:, jref , jsp ) c6 = thopi * trapzd ( aiw ) d4 % c6 ( jref , iref , jsp , isp ) = c6 d4 % c6 ( iref , jref , isp , jsp ) = c6 end do end do end do end do end subroutine new_d4s_model_with_checks","tags":"","url":"proc/new_d4s_model_with_checks.html"},{"title":"weight_references – DFT-D4","text":"private  subroutine weight_references(self, mol, cn, q, gwvec, gwdcn, gwdq) Calculate the weights of the reference system and the derivatives w.r.t.\ncoordination number for later use. Type Bound d4s_model Arguments Type Intent Optional Attributes Name class( d4s_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: cn (:) Coordination number of every atom real(kind=wp), intent(in) :: q (:) Partial charge of every atom real(kind=wp), intent(out) :: gwvec (:,:,:) Pairwise weighting for the atomic reference systems real(kind=wp), intent(out), optional :: gwdcn (:,:,:) derivative of the pairwise weighting function w.r.t. the coordination number real(kind=wp), intent(out), optional :: gwdq (:,:,:) derivative of the pairwise weighting function w.r.t. the charge scaling Source Code subroutine weight_references ( self , mol , cn , q , gwvec , gwdcn , gwdq ) !DEC$ ATTRIBUTES DLLEXPORT :: weight_references !> Instance of the dispersion model class ( d4s_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Coordination number of every atom real ( wp ), intent ( in ) :: cn (:) !> Partial charge of every atom real ( wp ), intent ( in ) :: q (:) !> Pairwise weighting for the atomic reference systems real ( wp ), intent ( out ) :: gwvec (:, :, :) !> derivative of the pairwise weighting function w.r.t. the coordination number real ( wp ), intent ( out ), optional :: gwdcn (:, :, :) !> derivative of the pairwise weighting function w.r.t. the charge scaling real ( wp ), intent ( out ), optional :: gwdq (:, :, :) integer :: iat , izp , iref , igw , jat , jzp real ( wp ) :: norm , dnorm , gw , expw , expd , gwk , dgwk , wf , zi , gi , maxcn if ( present ( gwdcn ) . and . present ( gwdq )) then gwvec (:, :, :) = 0.0_wp gwdcn (:, :, :) = 0.0_wp gwdq (:, :, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(gwvec, gwdcn, gwdq, mol, self, cn, q) & !$omp private(iat, izp, iref, igw, zi, gi, jat, jzp) & !$omp private(norm, dnorm, gw, expw, expd, gwk, dgwk, wf, maxcn) do iat = 1 , mol % nat izp = mol % id ( iat ) zi = self % zeff ( izp ) gi = self % eta ( izp ) * self % gc do jat = 1 , mol % nat jzp = mol % id ( jat ) norm = 0.0_wp dnorm = 0.0_wp do iref = 1 , self % ref ( izp ) do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf ( izp , jzp ) gw = weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) norm = norm + gw dnorm = dnorm + 2 * wf * ( self % cn ( iref , izp ) - cn ( iat )) * gw end do end do norm = 1.0_wp / norm do iref = 1 , self % ref ( izp ) expw = 0.0_wp expd = 0.0_wp do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf ( izp , jzp ) gw = weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) expw = expw + gw expd = expd + 2 * wf * ( self % cn ( iref , izp ) - cn ( iat )) * gw end do gwk = expw * norm if ( is_exceptional ( gwk )) then maxcn = maxval ( self % cn (: self % ref ( izp ), izp )) if ( abs ( maxcn - self % cn ( iref , izp )) < 1e-12_wp ) then gwk = 1.0_wp else gwk = 0.0_wp end if end if gwvec ( iref , iat , jat ) = gwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) gwdq ( iref , iat , jat ) = gwk * dzeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) dgwk = norm * ( expd - expw * dnorm * norm ) if ( is_exceptional ( dgwk )) then dgwk = 0.0_wp end if gwdcn ( iref , iat , jat ) = dgwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) end do end do end do else gwvec (:, :, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(gwvec, mol, self, cn, q) & !$omp private(iat, izp, iref, igw, zi, gi, jat, jzp) & !$omp private(norm, gw, expw, gwk, wf, maxcn) do iat = 1 , mol % nat izp = mol % id ( iat ) zi = self % zeff ( izp ) gi = self % eta ( izp ) * self % gc do jat = 1 , mol % nat jzp = mol % id ( jat ) norm = 0.0_wp do iref = 1 , self % ref ( izp ) do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf ( izp , jzp ) norm = norm + weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) end do end do norm = 1.0_wp / norm do iref = 1 , self % ref ( izp ) expw = 0.0_wp do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf ( izp , jzp ) expw = expw + weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) end do gwk = expw * norm if ( is_exceptional ( gwk )) then maxcn = maxval ( self % cn (: self % ref ( izp ), izp )) if ( abs ( maxcn - self % cn ( iref , izp )) < 1e-12_wp ) then gwk = 1.0_wp else gwk = 0.0_wp end if end if gwvec ( iref , iat , jat ) = gwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) end do end do end do end if end subroutine weight_references","tags":"","url":"proc/weight_references~2.html"},{"title":"new_d4s_model – DFT-D4","text":"public interface new_d4s_model Create new D4 dispersion model from molecular structure input Module Procedures private  subroutine new_d4s_model_no_checks (d4, mol, ga, gc, ref) Create new dispersion model from molecular structure input without\nchecking for supported elements (old/compatibility version) Arguments Type Intent Optional Attributes Name type( d4s_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness integer, intent(in), optional :: ref Reference charge selection private  subroutine new_d4s_model_with_checks (error, d4, mol, ga, gc, ref) Create new D4S dispersion model from molecular structure input Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error Error handling type( d4s_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness integer, intent(in), optional :: ref Reference charge selection","tags":"","url":"interface/new_d4s_model.html"},{"title":"dftd4_data_en – DFT-D4","text":"Uses mctc_io_symbols mctc_env Variables Type Visibility Attributes Name Initial integer, private, parameter :: max_elem = 118 real(kind=wp), private, parameter :: pauling_en (max_elem) = [2.20_wp, 3.00_wp, 0.98_wp, 1.57_wp, 2.04_wp, 2.55_wp, 3.04_wp, 3.44_wp, 3.98_wp, 4.50_wp, 0.93_wp, 1.31_wp, 1.61_wp, 1.90_wp, 2.19_wp, 2.58_wp, 3.16_wp, 3.50_wp, 0.82_wp, 1.00_wp, 1.36_wp, 1.54_wp, 1.63_wp, 1.66_wp, 1.55_wp, 1.83_wp, 1.88_wp, 1.91_wp, 1.90_wp, 1.65_wp, 1.81_wp, 2.01_wp, 2.18_wp, 2.55_wp, 2.96_wp, 3.00_wp, 0.82_wp, 0.95_wp, 1.22_wp, 1.33_wp, 1.60_wp, 2.16_wp, 1.90_wp, 2.20_wp, 2.28_wp, 2.20_wp, 1.93_wp, 1.69_wp, 1.78_wp, 1.96_wp, 2.05_wp, 2.10_wp, 2.66_wp, 2.60_wp, 0.79_wp, 0.89_wp, 1.10_wp, 1.12_wp, 1.13_wp, 1.14_wp, 1.15_wp, 1.17_wp, 1.18_wp, 1.20_wp, 1.21_wp, 1.22_wp, 1.23_wp, 1.24_wp, 1.25_wp, 1.26_wp, 1.27_wp, 1.30_wp, 1.50_wp, 2.36_wp, 1.90_wp, 2.20_wp, 2.20_wp, 2.28_wp, 2.54_wp, 2.00_wp, 1.62_wp, 2.33_wp, 2.02_wp, 2.00_wp, 2.20_wp, 2.20_wp, 0.79_wp, 0.90_wp, 1.10_wp, 1.30_wp, 1.50_wp, 1.38_wp, 1.36_wp, 1.28_wp, 1.30_wp, 1.30_wp, 1.30_wp, 1.30_wp, 1.30_wp, 1.30_wp, 1.30_wp, 1.30_wp, 1.30_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp, 1.50_wp] Pauling electronegativities, used for the covalent coordination number. Interfaces public        interface get_electronegativity private elemental function get_electronegativity_num (num) result(en) Get electronegativity for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Electronegativity private elemental function get_electronegativity_sym (sym) result(en) Get electronegativity for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Electronegativity Functions private elemental function get_electronegativity_num (num) result(en) Get electronegativity for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Electronegativity private elemental function get_electronegativity_sym (sym) result(en) Get electronegativity for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Electronegativity","tags":"","url":"module/dftd4_data_en.html"},{"title":"dftd4_damping_rational – DFT-D4","text":"Implementation of the rational (Becke–Johnson) damping function. Uses dftd4_data mctc_io dftd4_damping_atm mctc_env dftd4_damping Derived Types type, public, extends( damping_param ) :: rational_damping_param Rational (Becke-Johnson) damping model Components Type Visibility Attributes Name Initial real(kind=wp), public :: a1 real(kind=wp), public :: a2 real(kind=wp), public :: alp = 16.0_wp real(kind=wp), public :: s6 = 1.0_wp real(kind=wp), public :: s8 real(kind=wp), public :: s9 = 1.0_wp Type-Bound Procedures procedure, public :: get_dispersion2 Evaluate pairwise dispersion energy expression procedure, public :: get_dispersion3 Evaluate ATM three-body dispersion energy expression procedure, public :: get_pairwise_dispersion2 Evaluate pairwise representation of additive dispersion energy procedure, public :: get_pairwise_dispersion3 Evaluate pairwise representation of non-additive dispersion energy Functions private elemental function triple_scale (ii, jj, kk) result(triple) Logic exercise to distribute a triple energy to atomwise energies. Arguments Type Intent Optional Attributes Name integer, intent(in) :: ii Atom indices integer, intent(in) :: jj Atom indices integer, intent(in) :: kk Atom indices Return Value real(kind=wp) Fraction of energy Subroutines private  subroutine get_dispersion2 (self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial private  subroutine get_dispersion3 (self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial private  subroutine get_dispersion_derivs (self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in) :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in) :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout) :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout) :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout) :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout) :: sigma (:,:) Dispersion virial private  subroutine get_dispersion_energy (self, mol, trans, cutoff, r4r2, c6, energy) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:) Dispersion energy private  subroutine get_pairwise_dispersion2 (self, mol, trans, cutoff, r4r2, c6, energy) Evaluation of the dispersion energy expression projected on atomic pairs Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:,:) Dispersion energy private  subroutine get_pairwise_dispersion3 (self, mol, trans, cutoff, r4r2, c6, energy) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( rational_damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:,:) Dispersion energy","tags":"","url":"module/dftd4_damping_rational.html"},{"title":"dftd4_data_zeff – DFT-D4","text":"Uses mctc_io_symbols mctc_env Variables Type Visibility Attributes Name Initial real(kind=wp), private, parameter :: effective_nuclear_charge (max_elem) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 9, 10, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 9, 10, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26] Effective nuclear charges from the def2-ECPs used for calculating the \nreference polarizabilities for DFT-D4. integer, private, parameter :: max_elem = 118 Interfaces public        interface get_effective_charge private elemental function get_effective_charge_num (num) result(zeff) Get effective nuclear charge for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Effective nuclear charge private elemental function get_effective_charge_sym (sym) result(zeff) Get effective nuclear charge for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Effective nuclear charge Functions private elemental function get_effective_charge_num (num) result(zeff) Get effective nuclear charge for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Effective nuclear charge private elemental function get_effective_charge_sym (sym) result(zeff) Get effective nuclear charge for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Effective nuclear charge","tags":"","url":"module/dftd4_data_zeff.html"},{"title":"dftd4_param – DFT-D4","text":"Uses dftd4_damping_rational dftd4_utils dftd4_damping mctc_env Variables Type Visibility Attributes Name Initial integer, private, parameter :: df_enum = kind(p_invalid) Enumerations enum, bind(c) Enumerators enumerator :: p_invalid = 0 enumerator :: p_hf = 1 enumerator :: p_blyp = 2 enumerator :: p_bpbe = 3 enumerator :: p_bp = 4 enumerator :: p_bpw = 5 enumerator :: p_lb94 = 6 enumerator :: p_mpwlyp = 7 enumerator :: p_mpwpw = 8 enumerator :: p_olyp = 9 enumerator :: p_opbe = 10 enumerator :: p_pbe = 11 enumerator :: p_rpbe = 12 enumerator :: p_revpbe = 13 enumerator :: p_pw86pbe = 14 enumerator :: p_rpw86pbe = 15 enumerator :: p_pw91 = 16 enumerator :: p_pwp = 17 enumerator :: p_xlyp = 18 enumerator :: p_b97 = 19 enumerator :: p_tpss = 20 enumerator :: p_revtpss = 21 enumerator :: p_scan = 22 enumerator :: p_rscan = 23 enumerator :: p_r2scan = 24 enumerator :: p_b1lyp = 25 enumerator :: p_b3lyp = 26 enumerator :: p_bhlyp = 27 enumerator :: p_b1p = 28 enumerator :: p_b3p = 29 enumerator :: p_b1pw = 30 enumerator :: p_b3pw = 31 enumerator :: p_o3lyp = 32 enumerator :: p_revpbe0 = 33 enumerator :: p_revpbe38 = 34 enumerator :: p_pbe0 = 35 enumerator :: p_pwp1 = 36 enumerator :: p_pw1pw = 37 enumerator :: p_mpw1pw = 38 enumerator :: p_mpw1lyp = 39 enumerator :: p_pw6b95 = 40 enumerator :: p_tpssh = 41 enumerator :: p_tpss0 = 42 enumerator :: p_x3lyp = 43 enumerator :: p_m06l = 44 enumerator :: p_m06 = 45 enumerator :: p_b97d = 46 enumerator :: p_wb97 = 47 enumerator :: p_wb97x_2008 = 48 enumerator :: p_b97m = 49 enumerator :: p_wb97m = 50 enumerator :: p_camb3lyp = 51 enumerator :: p_lcblyp = 52 enumerator :: p_lh07tsvwn = 53 enumerator :: p_lh07ssvwn = 54 enumerator :: p_lh12ctssirpw92 = 55 enumerator :: p_lh12ctssifpw92 = 56 enumerator :: p_lh14tcalpbe = 57 enumerator :: p_lh20t = 58 enumerator :: p_b2plyp = 59 enumerator :: p_b2gpplyp = 60 enumerator :: p_mpw2plyp = 61 enumerator :: p_pwpb95 = 62 enumerator :: p_dsdblyp = 63 enumerator :: p_dsdpbe = 64 enumerator :: p_dsdpbeb95 = 65 enumerator :: p_dsdpbep86 = 66 enumerator :: p_dsdsvwn = 67 enumerator :: p_dodblyp = 68 enumerator :: p_dodpbe = 69 enumerator :: p_dodpbeb95 = 70 enumerator :: p_dodpbep86 = 71 enumerator :: p_dodsvwn = 72 enumerator :: p_pbe0_2 = 73 enumerator :: p_pbe0_dh = 74 enumerator :: p_hsesol = 75 enumerator :: p_dftb_3ob = 76 enumerator :: p_dftb_mio = 77 enumerator :: p_dftb_ob2 = 78 enumerator :: p_dftb_matsci = 79 enumerator :: p_dftb_pbc = 80 enumerator :: p_b1b95 = 81 enumerator :: p_pbesol = 82 enumerator :: p_hse06 = 83 enumerator :: p_mpwb1k = 84 enumerator :: p_hse03 = 85 enumerator :: p_revtpssh = 86 enumerator :: p_mn12sx = 87 enumerator :: p_glyp = 88 enumerator :: p_mpw1b95 = 89 enumerator :: p_revpbe0dh = 90 enumerator :: p_revtpss0 = 91 enumerator :: p_revdsdpbep86 = 92 enumerator :: p_revdsdpbe = 93 enumerator :: p_revdsdblyp = 94 enumerator :: p_revdodpbep86 = 95 enumerator :: p_am05 = 96 enumerator :: p_hse12 = 97 enumerator :: p_hse12s = 98 enumerator :: p_r2scanh = 99 enumerator :: p_r2scan0 = 100 enumerator :: p_r2scan50 = 101 enumerator :: p_r2scan_3c = 102 enumerator :: p_camqtp01 = 103 enumerator :: p_lcwpbe = 104 enumerator :: p_lcwpbeh = 105 enumerator :: p_wb97x_rev = 106 enumerator :: p_wb97m_rev = 107 enumerator :: p_wb97x_3c = 108 enumerator :: p_wr2scan = 109 enumerator :: p_r2scan0_dh = 110 enumerator :: p_r2scan_cidh = 111 enumerator :: p_r2scan_qidh = 112 enumerator :: p_r2scan0_2 = 113 enumerator :: p_pr2scan50 = 114 enumerator :: p_pr2scan69 = 115 enumerator :: p_kpr2scan50 = 116 enumerator :: p_wpr2scan50 = 117 enumerator :: p_wb97x = 118 enumerator :: p_last = 119 Interfaces public        interface get_rational_damping Retrieve rational damping parameters from functional name or ID private  subroutine get_rational_damping_name (functional, param, s9) Retrieve rational damping parameters from functional name Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: functional Functional name for which to retrieve the damping parameters class( damping_param ), intent(out), allocatable :: param Damping parameters for the functional real(kind=wp), intent(in), optional :: s9 Scaling factor for the three-body term private  subroutine get_rational_damping_id (id, param, s9) Retrieve rational damping parameters from functional ID Arguments Type Intent Optional Attributes Name integer, intent(in) :: id Functional ID for which to retrieve the damping parameters class( damping_param ), intent(out), allocatable :: param Damping parameters for the functional real(kind=wp), intent(in), optional :: s9 Scaling factor for the three-body term Derived Types type, public :: functional_group Group different spellings/names of functionals Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: names (:) Functions public pure function get_functional_id (df) result(num) Get the unique identifier for most functionals, returns none if\nthe functional was not known at the time I implemented this mapping Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: df Return Value integer(kind=df_enum) private  function new_funcgroup (input_names) result(group) Create a new group of functional names Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: input_names (:) List of spellings/names of the functional Return Value type( functional_group ) Functional with possibly different spellings Subroutines private  subroutine get_d4eeq_bj_parameter (dfnum, param, s9) Arguments Type Intent Optional Attributes Name integer(kind=df_enum), intent(in) :: dfnum class( damping_param ), intent(out), allocatable :: param real(kind=wp), intent(in), optional :: s9 private  subroutine get_d4eeq_bjatm_parameter (dfnum, param, s9) Arguments Type Intent Optional Attributes Name integer(kind=df_enum), intent(in) :: dfnum class( damping_param ), intent(out), allocatable :: param real(kind=wp), intent(in), optional :: s9 public  subroutine get_functionals (funcs) Collect all supported functionals Arguments Type Intent Optional Attributes Name type( functional_group ), intent(out), allocatable :: funcs (:) Collection of functionals with possibly different spellings/names private  subroutine get_rational_damping_id (id, param, s9) Retrieve rational damping parameters from functional ID Arguments Type Intent Optional Attributes Name integer, intent(in) :: id Functional ID for which to retrieve the damping parameters class( damping_param ), intent(out), allocatable :: param Damping parameters for the functional real(kind=wp), intent(in), optional :: s9 Scaling factor for the three-body term private  subroutine get_rational_damping_name (functional, param, s9) Retrieve rational damping parameters from functional name Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: functional Functional name for which to retrieve the damping parameters class( damping_param ), intent(out), allocatable :: param Damping parameters for the functional real(kind=wp), intent(in), optional :: s9 Scaling factor for the three-body term","tags":"","url":"module/dftd4_param.html"},{"title":"dftd4_ncoord – DFT-D4","text":"Uses mctc_io mctc_ncoord iso_fortran_env mctc_env Variables Type Visibility Attributes Name Initial real(kind=wp), private, parameter :: default_kcn = 7.5_wp Steepness of counting function Subroutines public  subroutine add_coordination_number_derivs (mol, trans, cutoff, rcov, en, dEdcn, gradient, sigma) Arguments Type Intent Optional Attributes Name type(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: rcov (:) Covalent radius real(kind=wp), intent(in) :: en (:) Electronegativity real(kind=wp), intent(in) :: dEdcn (:) Derivative of expression with respect to the coordination number real(kind=wp), intent(inout) :: gradient (:,:) Derivative of the CN with respect to the Cartesian coordinates real(kind=wp), intent(inout) :: sigma (:,:) Derivative of the CN with respect to strain deformations public  subroutine get_coordination_number (mol, trans, cutoff, rcov, en, cn, dcndr, dcndL) Geometric fractional coordination number, supports error function counting. Arguments Type Intent Optional Attributes Name type(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: rcov (:) Covalent radius real(kind=wp), intent(in) :: en (:) Electronegativity real(kind=wp), intent(out) :: cn (:) Error function coordination number. real(kind=wp), intent(out), optional :: dcndr (:,:,:) Derivative of the CN with respect to the Cartesian coordinates. real(kind=wp), intent(out), optional :: dcndL (:,:,:) Derivative of the CN with respect to strain deformations.","tags":"","url":"module/dftd4_ncoord.html"},{"title":"dftd4_damping_atm – DFT-D4","text":"Implementation of the Axilrod-Teller-Muto triple dipole dispersion\ncontribution with a modified zero (Chai–Head-Gordon) damping together\nwith the critical radii from the rational (Becke–Johnson) damping. Uses mctc_io mctc_env Functions public elemental function triple_scale (ii, jj, kk) result(triple) Logic exercise to distribute a triple energy to atomwise energies. Arguments Type Intent Optional Attributes Name integer, intent(in) :: ii Atom indices integer, intent(in) :: jj Atom indices integer, intent(in) :: kk Atom indices Return Value real(kind=wp) Fraction of energy Subroutines public  subroutine get_atm_dispersion (mol, trans, cutoff, s9, a1, a2, alp, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: s9 Scaling for dispersion coefficients real(kind=wp), intent(in) :: a1 Scaling parameter for critical radius real(kind=wp), intent(in) :: a2 Offset parameter for critical radius real(kind=wp), intent(in) :: alp Exponent of zero damping function real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial public  subroutine get_atm_dispersion_derivs (mol, trans, cutoff, s9, a1, a2, alp, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: s9 Scaling for dispersion coefficients real(kind=wp), intent(in) :: a1 Scaling parameter for critical radius real(kind=wp), intent(in) :: a2 Offset parameter for critical radius real(kind=wp), intent(in) :: alp Exponent of zero damping function real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in) :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in) :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout) :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout) :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout) :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout) :: sigma (:,:) Dispersion virial public  subroutine get_atm_dispersion_energy (mol, trans, cutoff, s9, a1, a2, alp, r4r2, c6, energy) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: s9 Scaling for dispersion coefficients real(kind=wp), intent(in) :: a1 Scaling parameter for critical radius real(kind=wp), intent(in) :: a2 Offset parameter for critical radius real(kind=wp), intent(in) :: alp Exponent of zero damping function real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:) Dispersion energy","tags":"","url":"module/dftd4_damping_atm.html"},{"title":"dftd4_model_type – DFT-D4","text":"Definition of the abstract base dispersion model for the evaluation of C6 coefficients. Uses mctc_io mctc_env Variables Type Visibility Attributes Name Initial type( enum_ref ), public, parameter :: d4_ref = enum_ref() Actual enumerator for D4 reference charges Abstract Interfaces abstract interface private  subroutine get_atomic_c6(self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq) Calculate atomic dispersion coefficients and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( dispersion_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(out), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(out), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charge abstract interface private  subroutine get_polarizabilities(self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq) Calculate atomic polarizabilities and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( dispersion_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: alpha (:) Static polarizabilities for all atoms. real(kind=wp), intent(out), optional :: dadcn (:) Derivative of the polarizibility w.r.t. the coordination number real(kind=wp), intent(out), optional :: dadq (:) Derivative of the polarizibility w.r.t. the partial charge abstract interface private  subroutine weight_references(self, mol, cn, q, gwvec, gwdcn, gwdq) Calculate the weights of the reference system and the derivatives w.r.t.\ncoordination number for later use. Arguments Type Intent Optional Attributes Name class( dispersion_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: cn (:) Coordination number of every atom: [nat] real(kind=wp), intent(in) :: q (:) Partial charge of every atom: [nat] real(kind=wp), intent(out) :: gwvec (:,:,:) weighting for the atomic reference systems: [nref, nat, ncoup] real(kind=wp), intent(out), optional :: gwdcn (:,:,:) derivative of the weighting function w.r.t. the coordination number: [nref, nat, ncoup] real(kind=wp), intent(out), optional :: gwdq (:,:,:) derivative of the weighting function w.r.t. the charge scaling: [nref, nat, ncoup] Derived Types type, public, abstract :: dispersion_model Abstract base dispersion model to evaluate C6 coefficients Components Type Visibility Attributes Name Initial real(kind=wp), public, allocatable :: aiw (:,:,:) Reference dynamic polarizabilities real(kind=wp), public, allocatable :: c6 (:,:,:,:) Reference C6 coefficients real(kind=wp), public, allocatable :: cn (:,:) Reference coordination numbers real(kind=wp), public, allocatable :: en (:) Electronegativity real(kind=wp), public, allocatable :: eta (:) Chemical hardness real(kind=wp), public :: ga Charge scaling height real(kind=wp), public :: gc Charge scaling steepness integer, public :: ncoup Number of atoms coupled to by pairwise parameters integer, public, allocatable :: ngw (:,:) Number of Gaussian weights for each reference real(kind=wp), public, allocatable :: q (:,:) Reference partial charges real(kind=wp), public, allocatable :: r4r2 (:) Expectation values for C8 extrapolation real(kind=wp), public, allocatable :: rcov (:) Covalent radii for coordination number integer, public, allocatable :: ref (:) Number of reference systems real(kind=wp), public, allocatable :: zeff (:) Effective nuclear charges Type-Bound Procedures procedure( get_atomic_c6 ), public, deferred :: get_atomic_c6 Evaluate C6 coefficient procedure( get_polarizabilities ), public, deferred :: get_polarizabilities Evaluate atomic polarizabilities procedure( weight_references ), public, deferred :: weight_references Generate weights for all reference systems type, private :: enum_ref Possible reference charges for D4 Components Type Visibility Attributes Name Initial integer, public :: eeq = 1 Electronegativity equilibration charges integer, public :: gfn2 = 2 GFN2-xTB Mulliken partial charges","tags":"","url":"module/dftd4_model_type.html"},{"title":"dftd4_blas – DFT-D4","text":"Interface to BLAS library Uses mctc_env Interfaces public        interface blas_gemv Performs one of the matrix-vector operations y := alpha A x + beta y,   or   y := alpha A T x + beta y, where alpha and beta are scalars, x and y are vectors and A is an\nm by n matrix. private pure subroutine dgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: n real(kind=dp), intent(in) :: alpha real(kind=dp), intent(in) :: a (lda,*) integer(kind=ik), intent(in) :: lda real(kind=dp), intent(in) :: x (*) integer(kind=ik), intent(in) :: incx real(kind=dp), intent(in) :: beta real(kind=dp), intent(inout) :: y (*) integer(kind=ik), intent(in) :: incy private pure subroutine sgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: n real(kind=sp), intent(in) :: alpha real(kind=sp), intent(in) :: a (lda,*) integer(kind=ik), intent(in) :: lda real(kind=sp), intent(in) :: x (*) integer(kind=ik), intent(in) :: incx real(kind=sp), intent(in) :: beta real(kind=sp), intent(inout) :: y (*) integer(kind=ik), intent(in) :: incy public        interface d4_gemv Performs one of the matrix-vector operations y := alpha A x + beta y,   or   y := alpha A T x + beta y, where alpha and beta are scalars, x and y are vectors and A is an\nm by n matrix. private pure subroutine d4_sgemv (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: amat (:,:) real(kind=sp), intent(in) :: xvec (:) real(kind=sp), intent(inout) :: yvec (:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private pure subroutine d4_dgemv (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: amat (:,:) real(kind=dp), intent(in) :: xvec (:) real(kind=dp), intent(inout) :: yvec (:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_sgemv312 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), contiguous, target :: amat (:,:,:) real(kind=sp), intent(in) :: xvec (:) real(kind=sp), intent(inout), contiguous, target :: yvec (:,:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_sgemv321 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), contiguous, target :: amat (:,:,:) real(kind=sp), intent(in), contiguous, target :: xvec (:,:) real(kind=sp), intent(inout) :: yvec (:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_dgemv312 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), contiguous, target :: amat (:,:,:) real(kind=dp), intent(in) :: xvec (:) real(kind=dp), intent(inout), contiguous, target :: yvec (:,:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_dgemv321 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), contiguous, target :: amat (:,:,:) real(kind=dp), intent(in), contiguous, target :: xvec (:,:) real(kind=dp), intent(inout) :: yvec (:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans Subroutines private pure subroutine d4_dgemv (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: amat (:,:) real(kind=dp), intent(in) :: xvec (:) real(kind=dp), intent(inout) :: yvec (:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_dgemv312 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), contiguous, target :: amat (:,:,:) real(kind=dp), intent(in) :: xvec (:) real(kind=dp), intent(inout), contiguous, target :: yvec (:,:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_dgemv321 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), contiguous, target :: amat (:,:,:) real(kind=dp), intent(in), contiguous, target :: xvec (:,:) real(kind=dp), intent(inout) :: yvec (:) real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private pure subroutine d4_sgemv (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: amat (:,:) real(kind=sp), intent(in) :: xvec (:) real(kind=sp), intent(inout) :: yvec (:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_sgemv312 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), contiguous, target :: amat (:,:,:) real(kind=sp), intent(in) :: xvec (:) real(kind=sp), intent(inout), contiguous, target :: yvec (:,:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans private  subroutine d4_sgemv321 (amat, xvec, yvec, alpha, beta, trans) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), contiguous, target :: amat (:,:,:) real(kind=sp), intent(in), contiguous, target :: xvec (:,:) real(kind=sp), intent(inout) :: yvec (:) real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta character(len=1), intent(in), optional :: trans","tags":"","url":"module/dftd4_blas.html"},{"title":"dftd4_disp – DFT-D4","text":"High-level wrapper to obtain the dispersion energy for a DFT-D4 calculation Uses dftd4_data dftd4_cutoff dftd4_model dftd4_blas mctc_io mctc_env mctc_io_convert dftd4_damping dftd4_ncoord dftd4_charge Subroutines public  subroutine get_dispersion (mol, disp, param, cutoff, energy, gradient, sigma) Wrapper to handle the evaluation of dispersion energy and derivatives Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model class( damping_param ), intent(in) :: param Damping parameters type( realspace_cutoff ), intent(in) :: cutoff Realspace cutoffs real(kind=wp), intent(out) :: energy Dispersion energy real(kind=wp), intent(out), optional, contiguous :: gradient (:,:) Dispersion gradient real(kind=wp), intent(out), optional, contiguous :: sigma (:,:) Dispersion virial public  subroutine get_pairwise_dispersion (mol, disp, param, cutoff, energy2, energy3) Wrapper to handle the evaluation of pairwise representation of the dispersion energy Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model class( damping_param ), intent(in) :: param Damping parameters type( realspace_cutoff ), intent(in) :: cutoff Realspace cutoffs real(kind=wp), intent(out) :: energy2 (:,:) Pairwise representation of additive dispersion energy real(kind=wp), intent(out) :: energy3 (:,:) Pairwise representation of non-additive dispersion energy public  subroutine get_properties (mol, disp, cutoff, cn, q, c6, alpha) Wrapper to handle the evaluation of properties related to this dispersion model Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model type( realspace_cutoff ), intent(in) :: cutoff Realspace cutoffs real(kind=wp), intent(out) :: cn (:) Coordination number real(kind=wp), intent(out), contiguous :: q (:) Atomic partial charges real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients real(kind=wp), intent(out) :: alpha (:) Static polarizabilities","tags":"","url":"module/dftd4_disp.html"},{"title":"dftd4_model – DFT-D4","text":"Re-export of all dispersion models Uses dftd4_model_d4s dftd4_model_d4 dftd4_model_type dftd4_utils mctc_io mctc_env Subroutines public  subroutine new_dispersion_model (error, d4, mol, model, ga, gc, wf) Wrapper for creating a new dispersion model (D4 or D4S) from molecular \nstructure input using a given model string. Defaults to D4 if no model\nis specified. Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error Error handling class( dispersion_model ), intent(out), allocatable :: d4 Dispersion model to be returned type(structure_type), intent(in) :: mol Molecular structure data character(len=*), intent(in), optional :: model Dispersion model to be used real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness real(kind=wp), intent(in), optional :: wf Weighting factor for coordination number interpolation","tags":"","url":"module/dftd4_model.html"},{"title":"dftd4_model_d4 – DFT-D4","text":"Definition of the D4 dispersion model for the evaluation of C6 coefficients. Uses dftd4_data dftd4_model_type iso_fortran_env mctc_env mctc_io ieee_arithmetic dftd4_reference mctc_io_constants dftd4_model_utils Variables Type Visibility Attributes Name Initial real(kind=wp), private, parameter :: ga_default = 3.0_wp Default maximum charge scaling height for partial charge extrapolation real(kind=wp), private, parameter :: gc_default = 2.0_wp Default charge scaling steepness for partial charge extrapolation real(kind=wp), private, parameter :: wf_default = 6.0_wp Default weighting factor for coordination number interpolation Interfaces public        interface new_d4_model Create new D4 dispersion model from molecular structure input private  subroutine new_d4_model_no_checks (d4, mol, ga, gc, wf, ref) Create new dispersion model from molecular structure input without\nchecking for supported elements (old/compatibility version) Arguments Type Intent Optional Attributes Name type( d4_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness real(kind=wp), intent(in), optional :: wf Weighting factor for coordination number interpolation integer, intent(in), optional :: ref Reference charge selection private  subroutine new_d4_model_with_checks (error, d4, mol, ga, gc, wf, ref) Create new D4 dispersion model from molecular structure input Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error Error handling type( d4_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness real(kind=wp), intent(in), optional :: wf Weighting factor for coordination number interpolation integer, intent(in), optional :: ref Reference charge selection Derived Types type, public, extends( dispersion_model ) :: d4_model D4 dispersion model to evaluate C6 coefficients Components Type Visibility Attributes Name Initial real(kind=wp), public, allocatable :: aiw (:,:,:) Reference dynamic polarizabilities real(kind=wp), public, allocatable :: c6 (:,:,:,:) Reference C6 coefficients real(kind=wp), public, allocatable :: cn (:,:) Reference coordination numbers real(kind=wp), public, allocatable :: en (:) Electronegativity real(kind=wp), public, allocatable :: eta (:) Chemical hardness real(kind=wp), public :: ga Charge scaling height real(kind=wp), public :: gc Charge scaling steepness integer, public :: ncoup Number of atoms coupled to by pairwise parameters integer, public, allocatable :: ngw (:,:) Number of Gaussian weights for each reference real(kind=wp), public, allocatable :: q (:,:) Reference partial charges real(kind=wp), public, allocatable :: r4r2 (:) Expectation values for C8 extrapolation real(kind=wp), public, allocatable :: rcov (:) Covalent radii for coordination number integer, public, allocatable :: ref (:) Number of reference systems real(kind=wp), public :: wf Weighting factor for CN interpolation real(kind=wp), public, allocatable :: zeff (:) Effective nuclear charges Type-Bound Procedures procedure, public :: get_atomic_c6 Evaluate C6 coefficient procedure, public :: get_polarizabilities Evaluate atomic polarizabilities procedure, public :: weight_references Generate weights for all reference systems Subroutines private  subroutine get_atomic_c6 (self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq) Calculate atomic dispersion coefficients and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( d4_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(out), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(out), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charge private  subroutine get_polarizabilities (self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq) Calculate atomic polarizabilities and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( d4_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: alpha (:) Static polarizabilities for all atoms. real(kind=wp), intent(out), optional :: dadcn (:) Derivative of the polarizibility w.r.t. the coordination number real(kind=wp), intent(out), optional :: dadq (:) Derivative of the polarizibility w.r.t. the partial charge private  subroutine new_d4_model_no_checks (d4, mol, ga, gc, wf, ref) Create new dispersion model from molecular structure input without\nchecking for supported elements (old/compatibility version) Arguments Type Intent Optional Attributes Name type( d4_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness real(kind=wp), intent(in), optional :: wf Weighting factor for coordination number interpolation integer, intent(in), optional :: ref Reference charge selection private  subroutine new_d4_model_with_checks (error, d4, mol, ga, gc, wf, ref) Create new D4 dispersion model from molecular structure input Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error Error handling type( d4_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness real(kind=wp), intent(in), optional :: wf Weighting factor for coordination number interpolation integer, intent(in), optional :: ref Reference charge selection private  subroutine weight_references (self, mol, cn, q, gwvec, gwdcn, gwdq) Calculate the weights of the reference system and the derivatives w.r.t.\ncoordination number for later use. Arguments Type Intent Optional Attributes Name class( d4_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: cn (:) Coordination number of every atom real(kind=wp), intent(in) :: q (:) Partial charge of every atom real(kind=wp), intent(out) :: gwvec (:,:,:) weighting for the atomic reference systems real(kind=wp), intent(out), optional :: gwdcn (:,:,:) derivative of the weighting function w.r.t. the coordination number real(kind=wp), intent(out), optional :: gwdq (:,:,:) derivative of the weighting function w.r.t. the charge scaling","tags":"","url":"module/dftd4_model_d4.html"},{"title":"dftd4_utils – DFT-D4","text":"Uses mctc_io_math mctc_env Functions public pure function lowercase (str) result(lcstr) Convert string to lower case Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=len_trim) public elemental function shift_back_abc (in) result(out) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: in fractional coordinate in (-∞,+∞) Return Value real(kind=wp) fractional coordinate in [0,1) Subroutines public  subroutine wrap_to_central_cell (xyz, lattice, periodic) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(inout) :: xyz (:,:) real(kind=wp), intent(in) :: lattice (:,:) logical, intent(in) :: periodic (:)","tags":"","url":"module/dftd4_utils.html"},{"title":"dftd4_version – DFT-D4","text":"Versioning information on this library. Variables Type Visibility Attributes Name Initial integer, public, parameter :: dftd4_version_compact (3) = [3, 7, 0] Numeric representation of the dftd4 version character(len=*), public, parameter :: dftd4_version_string = \"3.7.0\" String representation of the dftd4 version Subroutines public  subroutine get_dftd4_version (major, minor, patch, string) Getter function to retrieve dftd4 version Arguments Type Intent Optional Attributes Name integer, intent(out), optional :: major Major version number of the dftd4 version integer, intent(out), optional :: minor Minor version number of the dftd4 version integer, intent(out), optional :: patch Patch version number of the dftd4 version character(len=:), intent(out), optional, allocatable :: string String representation of the dftd4 version","tags":"","url":"module/dftd4_version.html"},{"title":"dftd4_data_hardness – DFT-D4","text":"Uses mctc_io_symbols mctc_env Variables Type Visibility Attributes Name Initial real(kind=wp), private, parameter :: chemical_hardness (max_elem) = [0.47259288_wp, 0.92203391_wp, 0.17452888_wp, 0.25700733_wp, 0.33949086_wp, 0.42195412_wp, 0.50438193_wp, 0.58691863_wp, 0.66931351_wp, 0.75191607_wp, 0.17964105_wp, 0.22157276_wp, 0.26348578_wp, 0.30539645_wp, 0.34734014_wp, 0.38924725_wp, 0.43115670_wp, 0.47308269_wp, 0.17105469_wp, 0.20276244_wp, 0.21007322_wp, 0.21739647_wp, 0.22471039_wp, 0.23201501_wp, 0.23933969_wp, 0.24665638_wp, 0.25398255_wp, 0.26128863_wp, 0.26859476_wp, 0.27592565_wp, 0.30762999_wp, 0.33931580_wp, 0.37235985_wp, 0.40273549_wp, 0.43445776_wp, 0.46611708_wp, 0.15585079_wp, 0.18649324_wp, 0.19356210_wp, 0.20063311_wp, 0.20770522_wp, 0.21477254_wp, 0.22184614_wp, 0.22891872_wp, 0.23598621_wp, 0.24305612_wp, 0.25013018_wp, 0.25719937_wp, 0.28784780_wp, 0.31848673_wp, 0.34912431_wp, 0.37976593_wp, 0.41040808_wp, 0.44105777_wp, 0.05019332_wp, 0.06762570_wp, 0.08504445_wp, 0.10247736_wp, 0.11991105_wp, 0.13732772_wp, 0.15476297_wp, 0.17218265_wp, 0.18961288_wp, 0.20704760_wp, 0.22446752_wp, 0.24189645_wp, 0.25932503_wp, 0.27676094_wp, 0.29418231_wp, 0.31159587_wp, 0.32902274_wp, 0.34592298_wp, 0.36388048_wp, 0.38130586_wp, 0.39877476_wp, 0.41614298_wp, 0.43364510_wp, 0.45104014_wp, 0.46848986_wp, 0.48584550_wp, 0.12526730_wp, 0.14268677_wp, 0.16011615_wp, 0.17755889_wp, 0.19497557_wp, 0.21240778_wp, 0.07263525_wp, 0.09422158_wp, 0.09920295_wp, 0.10418621_wp, 0.14235633_wp, 0.16394294_wp, 0.18551941_wp, 0.22370139_wp, 0.25110000_wp, 0.25030000_wp, 0.28840000_wp, 0.31000000_wp, 0.33160000_wp, 0.35320000_wp, 0.36820000_wp, 0.39630000_wp, 0.40140000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp, 0.00000000_wp] Element-specific chemical hardnesses for the charge scaling function used\nto extrapolate the C6 coefficients in DFT-D4. integer, private, parameter :: max_elem = 118 Interfaces public        interface get_hardness private elemental function get_hardness_num (num) result(eta) Get chemical hardness for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Chemical hardness private elemental function get_hardness_sym (sym) result(eta) Get chemical hardness for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Chemical hardness Functions private elemental function get_hardness_num (num) result(eta) Get chemical hardness for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Chemical hardness private elemental function get_hardness_sym (sym) result(eta) Get chemical hardness for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Chemical hardness","tags":"","url":"module/dftd4_data_hardness.html"},{"title":"dftd4_model_utils – DFT-D4","text":"Utility functions for the dispersion models Uses ieee_arithmetic mctc_env Functions public elemental function dzeta (a, c, qref, qmod) derivative of charge scaling function w.r.t. charge Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: a real(kind=wp), intent(in) :: c real(kind=wp), intent(in) :: qref real(kind=wp), intent(in) :: qmod Return Value real(kind=wp) public elemental function is_exceptional (val) Check whether we are dealing with an exceptional value, NaN or Inf Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: val Return Value logical public pure function trapzd (pol) numerical Casimir–Polder integration Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: pol (23) Return Value real(kind=wp) public elemental function weight_cn (wf, cn, cnref) result(cngw) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: wf real(kind=wp), intent(in) :: cn real(kind=wp), intent(in) :: cnref Return Value real(kind=wp) public elemental function zeta (a, c, qref, qmod) charge scaling function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: a real(kind=wp), intent(in) :: c real(kind=wp), intent(in) :: qref real(kind=wp), intent(in) :: qmod Return Value real(kind=wp)","tags":"","url":"module/dftd4_model_utils.html"},{"title":"dftd4_data_wfpair – DFT-D4","text":"Uses mctc_io_symbols mctc_env Variables Type Visibility Attributes Name Initial integer, private, parameter :: max_elem = 118 real(kind=wp), protected :: weight_factors (max_elem,max_elem) Interfaces public        interface get_wfpair_val Get pairwise CN weighting factors private elemental function get_wfpair_val_num (numi, numj) result(wfpair) Get pairwise CN weighting factor for a given atomic number pair Arguments Type Intent Optional Attributes Name integer, intent(in) :: numi Atomic number i integer, intent(in) :: numj Atomic number i Return Value real(kind=wp) Pairwise CN weighting factor private elemental function get_wfpair_val_sym (symi, symj) result(wfpair) Get pairwise CN weighting factor for a given element symbol pair Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: symi Element symbol i character(len=*), intent(in) :: symj Element symbol j Return Value real(kind=wp) Pairwise CN weighting factor Functions private elemental function get_wfpair_val_num (numi, numj) result(wfpair) Get pairwise CN weighting factor for a given atomic number pair Arguments Type Intent Optional Attributes Name integer, intent(in) :: numi Atomic number i integer, intent(in) :: numj Atomic number i Return Value real(kind=wp) Pairwise CN weighting factor private elemental function get_wfpair_val_sym (symi, symj) result(wfpair) Get pairwise CN weighting factor for a given element symbol pair Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: symi Element symbol i character(len=*), intent(in) :: symj Element symbol j Return Value real(kind=wp) Pairwise CN weighting factor","tags":"","url":"module/dftd4_data_wfpair.html"},{"title":"dftd4_compat – DFT-D4","text":"This is a compatibility module for dftd4 2.5.0 reproducing enough of the old \nAPI to compile the interface with Vasp. Uses dftd4 mctc_io_math mctc_env Derived Types type, public :: dftd_options Components Type Visibility Attributes Name Initial real(kind=wp), public :: g_a real(kind=wp), public :: g_c logical, public :: lenergy logical, public :: lgradient logical, public :: lhessian integer, public :: lmbd = 3 logical, public :: lmolpol integer, public :: print_level integer, public :: refq = 5 real(kind=wp), public :: wf = 6.0_wp type, public :: dftd_parameter Components Type Visibility Attributes Name Initial real(kind=wp), public :: a1 real(kind=wp), public :: a2 real(kind=wp), public :: alp = 16.0_wp real(kind=wp), public :: s6 real(kind=wp), public :: s8 real(kind=wp), public :: s9 = 1.0_wp type, public :: dftd_results Components Type Visibility Attributes Name Initial real(kind=wp), public, allocatable :: energy real(kind=wp), public, allocatable :: gradient (:,:) real(kind=wp), public, allocatable :: lattice_gradient (:,:) type, public :: mctc_logger Components Type Visibility Attributes Name Initial logical, public :: sane = .true. type, public :: molecule Components Type Visibility Attributes Name Initial integer, public, allocatable :: at (:) real(kind=wp), public, allocatable :: cellpar (:) real(kind=wp), public, allocatable :: chrg real(kind=wp), public, allocatable :: lattice (:,:) integer, public, allocatable :: npbc logical, public, allocatable :: pbc real(kind=wp), public, allocatable :: rec_lat (:,:) real(kind=wp), public, allocatable :: volume type( ws_cell ), public :: wsc real(kind=wp), public, allocatable :: xyz (:,:) Type-Bound Procedures procedure, public :: allocate procedure, public :: calculate_distances procedure, public :: wrap_back type, public :: ws_cell Functions public  function dlat_to_dvol (lattice) result(vol) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lattice (3,3) Return Value real(kind=wp) Subroutines private  subroutine allocate (self, n, l) Arguments Type Intent Optional Attributes Name class( molecule ), intent(inout) :: self integer, intent(in) :: n logical, intent(in) :: l private  subroutine calculate_distances (self) Arguments Type Intent Optional Attributes Name class( molecule ), intent(inout) :: self public  subroutine d4_calculation (io, env, options, mol_, param_, res) Arguments Type Intent Optional Attributes Name integer, intent(in) :: io type( mctc_logger ), intent(inout) :: env type( dftd_options ), intent(in) :: options type( molecule ), intent(in) :: mol_ type( dftd_parameter ), intent(in) :: param_ type( dftd_results ), intent(out) :: res public  subroutine d4par (fname, param_, lmbd, env) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname type( dftd_parameter ), intent(out) :: param_ integer, intent(in) :: lmbd type( mctc_logger ) :: env public  subroutine dlat_to_cell (lattice, cellpar) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lattice (3,3) real(kind=wp), intent(out), optional :: cellpar (6) public  subroutine dlat_to_rlat (lattice, reclatt) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lattice (3,3) real(kind=wp), intent(out), optional :: reclatt (3,3) private  subroutine wrap_back (self) Arguments Type Intent Optional Attributes Name class( molecule ), intent(inout) :: self","tags":"","url":"module/dftd4_compat.html"},{"title":"class_set – DFT-D4","text":"Uses dftd4_compat","tags":"","url":"module/class_set.html"},{"title":"class_param – DFT-D4","text":"Uses dftd4_compat","tags":"","url":"module/class_param.html"},{"title":"class_molecule – DFT-D4","text":"Uses dftd4_compat","tags":"","url":"module/class_molecule.html"},{"title":"class_results – DFT-D4","text":"Uses dftd4_compat","tags":"","url":"module/class_results.html"},{"title":"class_wsc – DFT-D4","text":"Uses dftd4_compat","tags":"","url":"module/class_wsc.html"},{"title":"mctc_environment – DFT-D4","text":"Uses dftd4_compat","tags":"","url":"module/mctc_environment.html"},{"title":"dispersion_calculator – DFT-D4","text":"Uses dftd4_compat","tags":"","url":"module/dispersion_calculator.html"},{"title":"pbc_tools – DFT-D4","text":"Uses dftd4_compat","tags":"","url":"module/pbc_tools.html"},{"title":"dfuncpar – DFT-D4","text":"Uses dftd4_compat","tags":"","url":"module/dfuncpar.html"},{"title":"dftd4_output – DFT-D4","text":"Uses dftd4_version mctc_io_math mctc_io dftd4_damping_rational mctc_env mctc_io_convert dftd4_damping dftd4_model Subroutines public  subroutine ascii_atomic_radii (unit, mol, disp) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model public  subroutine ascii_atomic_references (unit, mol, disp) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model public  subroutine ascii_damping_param (unit, param, method) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class( damping_param ), intent(in) :: param Damping parameters character(len=*), intent(in), optional :: method Method name public  subroutine ascii_pairwise (unit, mol, pair_disp2, pair_disp3) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: pair_disp2 (:,:) real(kind=wp), intent(in) :: pair_disp3 (:,:) public  subroutine ascii_results (unit, mol, energy, gradient, sigma) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: energy real(kind=wp), intent(in), optional :: gradient (:,:) real(kind=wp), intent(in), optional :: sigma (:,:) public  subroutine ascii_system_properties (unit, mol, disp, cn, q, c6, alpha) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit Unit for output class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model real(kind=wp), intent(in) :: cn (:) Coordination numbers real(kind=wp), intent(in) :: q (:) Atomic partial charges real(kind=wp), intent(in) :: c6 (:,:) Atomic dispersion coefficients real(kind=wp), intent(in) :: alpha (:) Atomic static polarizabilities private  subroutine getline (unit, line, iostat) reads a line from unit into an allocatable character Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit character(len=:), intent(out), allocatable :: line integer, intent(out), optional :: iostat public  subroutine json_results (unit, indentation, energy, gradient, sigma, hessian, cn, q, c6, alpha, pairwise_energy2, pairwise_energy3) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit character(len=*), intent(in), optional :: indentation real(kind=wp), intent(in), optional :: energy real(kind=wp), intent(in), optional :: gradient (:,:) real(kind=wp), intent(in), optional :: sigma (:,:) real(kind=wp), intent(in), optional :: hessian (:,:,:,:) real(kind=wp), intent(in), optional :: cn (:) real(kind=wp), intent(in), optional :: q (:) real(kind=wp), intent(in), optional :: c6 (:,:) real(kind=wp), intent(in), optional :: alpha (:) real(kind=wp), intent(in), optional :: pairwise_energy2 (:,:) real(kind=wp), intent(in), optional :: pairwise_energy3 (:,:) public  subroutine tagged_result (unit, energy, gradient, sigma, hessian) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit real(kind=wp), intent(in), optional :: energy real(kind=wp), intent(in), optional :: gradient (:,:) real(kind=wp), intent(in), optional :: sigma (:,:) real(kind=wp), intent(in), optional :: hessian (:,:,:,:) public  subroutine turbomole_gradient (mol, fname, energy, gradient, stat) Arguments Type Intent Optional Attributes Name type(structure_type), intent(in) :: mol character(len=*), intent(in) :: fname real(kind=wp), intent(in) :: energy real(kind=wp), intent(in) :: gradient (:,:) integer, intent(out) :: stat public  subroutine turbomole_gradlatt (mol, fname, energy, sigma, stat) Arguments Type Intent Optional Attributes Name type(structure_type), intent(in) :: mol character(len=*), intent(in) :: fname real(kind=wp), intent(in) :: energy real(kind=wp), intent(in) :: sigma (3,3) integer, intent(out) :: stat private  subroutine write_json_array (unit, array, indent) Arguments Type Intent Optional Attributes Name integer, intent(in) :: unit real(kind=wp), intent(in) :: array (:) character(len=:), intent(in), allocatable :: indent","tags":"","url":"module/dftd4_output.html"},{"title":"dftd4_cutoff – DFT-D4","text":"Realspace cutoff and lattice point generator utilities Uses mctc_env Variables Type Visibility Attributes Name Initial real(kind=wp), private, parameter :: cn_default = 30.0_wp Coordination number cutoff real(kind=wp), private, parameter :: disp2_default = 60.0_wp Two-body interaction cutoff real(kind=wp), private, parameter :: disp3_default = 40.0_wp Three-body interaction cutoff Interfaces public        interface get_lattice_points private  subroutine get_lattice_points_cutoff (periodic, lat, rthr, trans) Create lattice points within a given cutoff Arguments Type Intent Optional Attributes Name logical, intent(in) :: periodic (:) Periodic dimensions real(kind=wp), intent(in) :: lat (:,:) Lattice parameters real(kind=wp), intent(in) :: rthr Real space cutoff real(kind=wp), intent(out), allocatable :: trans (:,:) Generated lattice points private  subroutine get_lattice_points_rep_3d (lat, rep, origin, trans) Generate lattice points from repeatitions Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lat (:,:) Lattice vectors integer, intent(in) :: rep (:) Repeatitions of lattice points to generate logical, intent(in) :: origin Include the origin in the generated lattice points real(kind=wp), intent(out), allocatable :: trans (:,:) Generated lattice points Derived Types type, public, sequence  :: realspace_cutoff Collection of real space cutoffs Components Type Visibility Attributes Name Initial real(kind=wp), public :: cn = cn_default Coordination number cutoff real(kind=wp), public :: disp2 = disp2_default Two-body interaction cutoff real(kind=wp), public :: disp3 = disp3_default Three-body interaction cutoff Subroutines private  subroutine get_lattice_points_cutoff (periodic, lat, rthr, trans) Create lattice points within a given cutoff Arguments Type Intent Optional Attributes Name logical, intent(in) :: periodic (:) Periodic dimensions real(kind=wp), intent(in) :: lat (:,:) Lattice parameters real(kind=wp), intent(in) :: rthr Real space cutoff real(kind=wp), intent(out), allocatable :: trans (:,:) Generated lattice points private  subroutine get_lattice_points_rep_3d (lat, rep, origin, trans) Generate lattice points from repeatitions Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lat (:,:) Lattice vectors integer, intent(in) :: rep (:) Repeatitions of lattice points to generate logical, intent(in) :: origin Include the origin in the generated lattice points real(kind=wp), intent(out), allocatable :: trans (:,:) Generated lattice points private pure subroutine get_translations (lat, rthr, rep) Generate a supercell based on a realspace cutoff, this subroutine\ndoesn’t know anything about the convergence behaviour of the\nassociated property. Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lat (3,3) real(kind=wp), intent(in) :: rthr integer, intent(out) :: rep (3)","tags":"","url":"module/dftd4_cutoff.html"},{"title":"dftd4_data_covrad – DFT-D4","text":"Uses mctc_io_convert mctc_io_symbols mctc_env Variables Type Visibility Attributes Name Initial real(kind=wp), private, parameter :: covalent_rad_2009 (max_elem) = aatoau*[0.32_wp, 0.46_wp, 1.20_wp, 0.94_wp, 0.77_wp, 0.75_wp, 0.71_wp, 0.63_wp, 0.64_wp, 0.67_wp, 1.40_wp, 1.25_wp, 1.13_wp, 1.04_wp, 1.10_wp, 1.02_wp, 0.99_wp, 0.96_wp, 1.76_wp, 1.54_wp, 1.33_wp, 1.22_wp, 1.21_wp, 1.10_wp, 1.07_wp, 1.04_wp, 1.00_wp, 0.99_wp, 1.01_wp, 1.09_wp, 1.12_wp, 1.09_wp, 1.15_wp, 1.10_wp, 1.14_wp, 1.17_wp, 1.89_wp, 1.67_wp, 1.47_wp, 1.39_wp, 1.32_wp, 1.24_wp, 1.15_wp, 1.13_wp, 1.13_wp, 1.08_wp, 1.15_wp, 1.23_wp, 1.28_wp, 1.26_wp, 1.26_wp, 1.23_wp, 1.32_wp, 1.31_wp, 2.09_wp, 1.76_wp, 1.62_wp, 1.47_wp, 1.58_wp, 1.57_wp, 1.56_wp, 1.55_wp, 1.51_wp, 1.52_wp, 1.51_wp, 1.50_wp, 1.49_wp, 1.49_wp, 1.48_wp, 1.53_wp, 1.46_wp, 1.37_wp, 1.31_wp, 1.23_wp, 1.18_wp, 1.16_wp, 1.11_wp, 1.12_wp, 1.13_wp, 1.32_wp, 1.30_wp, 1.30_wp, 1.36_wp, 1.31_wp, 1.38_wp, 1.42_wp, 2.01_wp, 1.81_wp, 1.67_wp, 1.58_wp, 1.52_wp, 1.53_wp, 1.54_wp, 1.55_wp, 1.49_wp, 1.49_wp, 1.51_wp, 1.51_wp, 1.48_wp, 1.50_wp, 1.56_wp, 1.58_wp, 1.45_wp, 1.41_wp, 1.34_wp, 1.29_wp, 1.27_wp, 1.21_wp, 1.16_wp, 1.15_wp, 1.09_wp, 1.22_wp, 1.36_wp, 1.43_wp, 1.46_wp, 1.58_wp, 1.48_wp, 1.57_wp] Covalent radii (taken from Pyykko and Atsumi, Chem. Eur. J. 15, 2009, real(kind=wp), private, parameter :: covalent_rad_d3 (max_elem) = 4.0_wp/3.0_wp*covalent_rad_2009 D3 covalent radii used to construct the coordination number integer, private, parameter :: max_elem = 118 Interfaces public        interface get_covalent_rad Covalent radii for DFT-D3 coordination number private elemental function get_covalent_rad_num (num) result(rad) Get covalent radius for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Covalent radius private elemental function get_covalent_rad_sym (sym) result(rad) Get covalent radius for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Covalent radius Functions private elemental function get_covalent_rad_num (num) result(rad) Get covalent radius for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) Covalent radius private elemental function get_covalent_rad_sym (sym) result(rad) Get covalent radius for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) Covalent radius","tags":"","url":"module/dftd4_data_covrad.html"},{"title":"dftd4_numdiff – DFT-D4","text":"Numerical differentation of DFT-D4 model Uses dftd4_cutoff dftd4_model mctc_io mctc_env dftd4_damping dftd4_disp Subroutines public  subroutine get_dispersion_hessian (mol, disp, param, cutoff, hessian) Evaluate hessian matrix by numerical differention Arguments Type Intent Optional Attributes Name class(structure_type), intent(in) :: mol Molecular structure data class( dispersion_model ), intent(in) :: disp Dispersion model class( damping_param ), intent(in) :: param Damping parameters type( realspace_cutoff ), intent(in) :: cutoff Realspace cutoffs real(kind=wp), intent(out) :: hessian (:,:,:,:) Dispersion hessian","tags":"","url":"module/dftd4_numdiff.html"},{"title":"dftd4 – DFT-D4","text":"Uses dftd4_numdiff dftd4_version dftd4_cutoff dftd4_model dftd4_model_d4s dftd4_param mctc_io dftd4_damping_rational dftd4_model_d4 dftd4_damping dftd4_ncoord dftd4_disp","tags":"","url":"module/dftd4.html"},{"title":"dftd4_damping – DFT-D4","text":"Generic interface to define damping functions for the DFT-D4 model Uses mctc_io mctc_env Abstract Interfaces abstract interface public  subroutine dispersion_interface(self, mol, trans, cutoff, r4r2, c6, dc6dcn, dc6dq, energy, dEdcn, dEdq, gradient, sigma) Evaluation of the dispersion energy expression Arguments Type Intent Optional Attributes Name class( damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(in), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(in), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charges real(kind=wp), intent(inout) :: energy (:) Dispersion energy real(kind=wp), intent(inout), optional :: dEdcn (:) Derivative of the energy w.r.t. the coordination number real(kind=wp), intent(inout), optional :: dEdq (:) Derivative of the energy w.r.t. the partial charges real(kind=wp), intent(inout), optional :: gradient (:,:) Dispersion gradient real(kind=wp), intent(inout), optional :: sigma (:,:) Dispersion virial abstract interface public  subroutine pairwise_dispersion_interface(self, mol, trans, cutoff, r4r2, c6, energy) Evaluation of the pairwise representation of the dispersion energy Arguments Type Intent Optional Attributes Name class( damping_param ), intent(in) :: self Damping parameters class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: trans (:,:) Lattice points real(kind=wp), intent(in) :: cutoff Real space cutoff real(kind=wp), intent(in) :: r4r2 (:) Expectation values for r4 over r2 operator real(kind=wp), intent(in) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(inout) :: energy (:,:) Pairwise representation of the dispersion energy Derived Types type, public, abstract :: damping_param Type-Bound Procedures procedure( dispersion_interface ), public, deferred :: get_dispersion2 procedure( dispersion_interface ), public, deferred :: get_dispersion3 procedure( pairwise_dispersion_interface ), public, deferred :: get_pairwise_dispersion2 procedure( pairwise_dispersion_interface ), public, deferred :: get_pairwise_dispersion3","tags":"","url":"module/dftd4_damping.html"},{"title":"dftd4_api – DFT-D4","text":"Definition of the public C-API of dftd4 /* This file is part of dftd4. * SPDX-Identifier: LGPL-3.0-or-later * * dftd4 is free software: you can redistribute it and/or modify it under * the terms of the GNU Lesser General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * dftd4 is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public License * along with dftd4.  If not, see <https://www.gnu.org/licenses/>. **/ #pragma once #ifdef __cplusplus #define DFTD4_API_ENTRY extern \"C\" #else #define DFTD4_API_ENTRY extern #ifndef DFTD4_CFFI #include <stdbool.h> #endif #endif #define DFTD4_API_CALL #define DFTD4_API_SUFFIX__V_3_0 #define DFTD4_API_SUFFIX__V_3_1 #define DFTD4_API_SUFFIX__V_3_2 #define DFTD4_API_SUFFIX__V_3_3 #define DFTD4_API_SUFFIX__V_3_4 #define DFTD4_API_SUFFIX__V_3_5 #define DFTD4_API_SUFFIX__V_4_0 /// Error handle class typedef struct _dftd4_error * dftd4_error ; /// Molecular structure data class typedef struct _dftd4_structure * dftd4_structure ; /// Dispersion model class typedef struct _dftd4_model * dftd4_model ; /// Damping parameter class typedef struct _dftd4_param * dftd4_param ; /* * Type generic macro for convenience **/ #define dftd4_delete(ptr) _Generic((ptr), \\ dftd4_error: dftd4_delete_error, \\ dftd4_structure: dftd4_delete_structure, \\ dftd4_model: dftd4_delete_model, \\ dftd4_param: dftd4_delete_param \\ )(&ptr) /* * Global API queries **/ /// Obtain library version as major * 10000 + minor + 100 + patch DFTD4_API_ENTRY int DFTD4_API_CALL dftd4_get_version ( void ) DFTD4_API_SUFFIX__V_3_0 ; /* * Error handle class **/ /// Create new error handle object DFTD4_API_ENTRY dftd4_error DFTD4_API_CALL dftd4_new_error ( void ) DFTD4_API_SUFFIX__V_3_0 ; /// Check error handle status DFTD4_API_ENTRY int DFTD4_API_CALL dftd4_check_error ( dftd4_error /* error */ ) DFTD4_API_SUFFIX__V_3_0 ; /// Get error message from error handle DFTD4_API_ENTRY void DFTD4_API_CALL dftd4_get_error ( dftd4_error /* error */ , char * /* buffer */ , const int * /* buffersize */ ) DFTD4_API_SUFFIX__V_3_0 ; /// Delete error handle object DFTD4_API_ENTRY void DFTD4_API_CALL dftd4_delete_error ( dftd4_error * /* error */ ) DFTD4_API_SUFFIX__V_3_0 ; /* * Molecular structure data class **/ /// Create new molecular structure data (quantities in Bohr) DFTD4_API_ENTRY dftd4_structure DFTD4_API_CALL dftd4_new_structure ( dftd4_error /* error */ , const int /* natoms */ , const int * /* numbers [natoms] */ , const double * /* positions [natoms][3] */ , const double * /* charge */ , const double * /* lattice [3][3] */ , const bool * /* periodic [3] */ ) DFTD4_API_SUFFIX__V_3_0 ; /// Delete molecular structure data DFTD4_API_ENTRY void DFTD4_API_CALL dftd4_delete_structure ( dftd4_structure * /* mol */ ) DFTD4_API_SUFFIX__V_3_0 ; /// Update coordinates and lattice parameters (quantities in Bohr) DFTD4_API_ENTRY void DFTD4_API_CALL dftd4_update_structure ( dftd4_error /* error */ , dftd4_structure /* mol */ , const double * /* positions [natoms][3] */ , const double * /* lattice [3][3] */ ) DFTD4_API_SUFFIX__V_3_0 ; /* * Dispersion model class **/ /// Create new D4 dispersion model DFTD4_API_ENTRY dftd4_model DFTD4_API_CALL dftd4_new_d4_model ( dftd4_error /* error */ , dftd4_structure /* mol */ ) DFTD4_API_SUFFIX__V_3_0 ; /// Create new D4 dispersion model DFTD4_API_ENTRY dftd4_model DFTD4_API_CALL dftd4_new_d4s_model ( dftd4_error /* error */ , dftd4_structure /* mol */ ) DFTD4_API_SUFFIX__V_4_0 ; /// Create new D4 dispersion model DFTD4_API_ENTRY dftd4_model DFTD4_API_CALL dftd4_custom_d4_model ( dftd4_error /* error */ , dftd4_structure /* mol */ , double /* ga */ , double /* gc */ , double /* wf */ ) DFTD4_API_SUFFIX__V_3_1 ; /// Create new D4 dispersion model DFTD4_API_ENTRY dftd4_model DFTD4_API_CALL dftd4_custom_d4s_model ( dftd4_error /* error */ , dftd4_structure /* mol */ , double /* ga */ , double /* gc */ ) DFTD4_API_SUFFIX__V_4_0 ; /// Delete dispersion model DFTD4_API_ENTRY void DFTD4_API_CALL dftd4_delete_model ( dftd4_model * /* disp */ ) DFTD4_API_SUFFIX__V_3_0 ; /* * Damping parameter class **/ /// Create new rational damping parameters DFTD4_API_ENTRY dftd4_param DFTD4_API_CALL dftd4_new_rational_damping ( dftd4_error /* error */ , double /* s6 */ , double /* s8 */ , double /* s9 */ , double /* a1 */ , double /* a2 */ , double /* alp */ ) DFTD4_API_SUFFIX__V_3_0 ; /// Load rational damping parameters from internal storage DFTD4_API_ENTRY dftd4_param DFTD4_API_CALL dftd4_load_rational_damping ( dftd4_error /* error */ , char * /* method */ , bool /* mdb */ ) DFTD4_API_SUFFIX__V_3_0 ; /// Delete damping parameters DFTD4_API_ENTRY void DFTD4_API_CALL dftd4_delete_param ( dftd4_param * /* param */ ) DFTD4_API_SUFFIX__V_3_0 ; /* * Perform dispersion calculations **/ /// Evaluate properties related to the dispersion model DFTD4_API_ENTRY void DFTD4_API_CALL dftd4_get_properties ( dftd4_error /* error */ , dftd4_structure /* mol */ , dftd4_model /* disp */ , double * /* cn[n] */ , double * /* charges[n] */ , double * /* c6[n*n] */ , double * /* alpha[n] */ ) DFTD4_API_SUFFIX__V_3_1 ; /// Evaluate the dispersion energy and its derivative DFTD4_API_ENTRY void DFTD4_API_CALL dftd4_get_dispersion ( dftd4_error /* error */ , dftd4_structure /* mol */ , dftd4_model /* disp */ , dftd4_param /* param */ , double * /* energy */ , double * /* gradient[n][3] */ , double * /* sigma[3][3] */ ) DFTD4_API_SUFFIX__V_3_0 ; /// Evaluate the dispersion hessian numerically DFTD4_API_ENTRY void DFTD4_API_CALL dftd4_get_numerical_hessian ( dftd4_error /* error */ , dftd4_structure /* mol */ , dftd4_model /* disp */ , dftd4_param /* param */ , double * /* hess[n][3][n][3] */ ) DFTD4_API_SUFFIX__V_3_5 ; /// Evaluate the pairwise representation of the dispersion energy DFTD4_API_ENTRY void DFTD4_API_CALL dftd4_get_pairwise_dispersion ( dftd4_error /* error */ , dftd4_structure /* mol */ , dftd4_model /* disp */ , dftd4_param /* param */ , double * /* pair_energy2[n][n] */ , double * /* pair_energy3[n][n] */ ) DFTD4_API_SUFFIX__V_3_2 ; Uses mctc_io_structure dftd4_numdiff dftd4_version dftd4_cutoff dftd4_model dftd4_model_d4s dftd4_param dftd4_damping_rational dftd4_model_d4 mctc_env dftd4_utils dftd4_damping iso_c_binding dftd4_disp Variables Type Visibility Attributes Name Initial logical, private, parameter :: debug = .false. character(len=*), private, parameter :: namespace = \"dftd4_\" Namespace for C routines Derived Types type, public :: vp_error Void pointer to error handle Components Type Visibility Attributes Name Initial type(error_type), public, allocatable :: ptr Actual payload type, public :: vp_model Void pointer to dispersion model Components Type Visibility Attributes Name Initial class( dispersion_model ), public, allocatable :: ptr Actual payload type, public :: vp_param Void pointer to damping parameters Components Type Visibility Attributes Name Initial class( damping_param ), public, allocatable :: ptr Actual payload type, public :: vp_structure Void pointer to molecular structure data Components Type Visibility Attributes Name Initial type(structure_type), public :: ptr Actual payload Functions public  function check_error_api (verror) result(status) bind(C, name=namespace//\"check_error\") Check error handle status Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror Return Value integer(kind=c_int) public  function custom_d4_model_api (verror, vmol, ga, gc, wf) result(vdisp) bind(C, name=namespace//\"custom_d4_model\") Create new custom D4 dispersion model Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol real(kind=c_double), intent(in), value :: ga real(kind=c_double), intent(in), value :: gc real(kind=c_double), intent(in), value :: wf Return Value type(c_ptr) public  function custom_d4s_model_api (verror, vmol, ga, gc) result(vdisp) bind(C, name=namespace//\"custom_d4s_model\") Create new custom D4S dispersion model Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol real(kind=c_double), intent(in), value :: ga real(kind=c_double), intent(in), value :: gc Return Value type(c_ptr) public  function get_version_api () result(version) bind(C, name=namespace//\"get_version\") Obtain library version as major * 10000 + minor + 100 + patch Arguments None Return Value integer(kind=c_int) public  function load_rational_damping_api (verror, charptr, atm) result(vparam) bind(C, name=namespace//\"load_rational_damping\") Load rational damping parameters from internal storage Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror character(kind=c_char, len=1), intent(in) :: charptr (*) logical(kind=c_bool), intent(in), value :: atm Return Value type(c_ptr) public  function new_d4_model_api (verror, vmol) result(vdisp) bind(C, name=namespace//\"new_d4_model\") Create new D4 dispersion model Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol Return Value type(c_ptr) public  function new_d4s_model_api (verror, vmol) result(vdisp) bind(C, name=namespace//\"new_d4s_model\") Create new D4S dispersion model Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol Return Value type(c_ptr) public  function new_error_api () result(verror) bind(C, name=namespace//\"new_error\") Create new error handle object Arguments None Return Value type(c_ptr) public  function new_rational_damping_api (verror, s6, s8, s9, a1, a2, alp) result(vparam) bind(C, name=namespace//\"new_rational_damping\") Create new rational damping parameters Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror real(kind=c_double), intent(in), value :: s6 real(kind=c_double), intent(in), value :: s8 real(kind=c_double), intent(in), value :: s9 real(kind=c_double), intent(in), value :: a1 real(kind=c_double), intent(in), value :: a2 real(kind=c_double), intent(in), value :: alp Return Value type(c_ptr) public  function new_structure_api (verror, natoms, numbers, positions, c_charge, c_lattice, c_periodic) result(vmol) bind(C, name=namespace//\"new_structure\") Create new molecular structure data (quantities in Bohr) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror integer(kind=c_int), intent(in), value :: natoms integer(kind=c_int), intent(in) :: numbers (natoms) real(kind=c_double), intent(in) :: positions (3,natoms) real(kind=c_double), intent(in), optional :: c_charge real(kind=c_double), intent(in), optional :: c_lattice (3,3) logical(kind=c_bool), intent(in), optional :: c_periodic (3) Return Value type(c_ptr) Subroutines private  subroutine c_f_character (rhs, lhs) Arguments Type Intent Optional Attributes Name character(kind=c_char, len=1), intent(in) :: rhs (*) character(kind=c_char, len=:), intent(out), allocatable :: lhs public  subroutine delete_error_api (verror) bind(C, name=namespace//\"delete_error\") Delete error handle object Arguments Type Intent Optional Attributes Name type(c_ptr), intent(inout) :: verror public  subroutine delete_model_api (vdisp) bind(C, name=namespace//\"delete_model\") Delete dispersion model Arguments Type Intent Optional Attributes Name type(c_ptr), intent(inout) :: vdisp public  subroutine delete_param_api (vparam) bind(C, name=namespace//\"delete_param\") Delete damping parameters Arguments Type Intent Optional Attributes Name type(c_ptr), intent(inout) :: vparam public  subroutine delete_structure_api (vmol) bind(C, name=namespace//\"delete_structure\") Delete molecular structure data Arguments Type Intent Optional Attributes Name type(c_ptr), intent(inout) :: vmol private  subroutine f_c_character (rhs, lhs, len) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: rhs character(kind=c_char, len=1), intent(out) :: lhs (*) integer, intent(in) :: len public  subroutine get_dispersion_api (verror, vmol, vdisp, vparam, energy, c_gradient, c_sigma) bind(C, name=namespace//\"get_dispersion\") Calculate dispersion Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol type(c_ptr), value :: vdisp type(c_ptr), value :: vparam real(kind=c_double), intent(out) :: energy real(kind=c_double), intent(out), optional :: c_gradient (3,*) real(kind=c_double), intent(out), optional :: c_sigma (3,3) public  subroutine get_error_api (verror, charptr, buffersize) bind(C, name=namespace//\"get_error\") Get error message from error handle Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror character(kind=c_char, len=1), intent(inout) :: charptr (*) integer(kind=c_int), intent(in), optional :: buffersize private  subroutine get_numerical_hessian_api (verror, vmol, vdisp, vparam, c_hessian) bind(C, name=namespace//\"get_numerical_hessian\") Calculate hessian numerically Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol type(c_ptr), value :: vdisp type(c_ptr), value :: vparam real(kind=c_double), intent(out) :: c_hessian (*) public  subroutine get_pairwise_dispersion_api (verror, vmol, vdisp, vparam, c_pair_energy2, c_pair_energy3) bind(C, name=namespace//\"get_pairwise_dispersion\") Calculate pairwise representation of dispersion energy Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol type(c_ptr), value :: vdisp type(c_ptr), value :: vparam type(c_ptr), intent(in), value :: c_pair_energy2 type(c_ptr), intent(in), value :: c_pair_energy3 public  subroutine get_properties_api (verror, vmol, vdisp, c_cn, c_charges, c_c6, c_alpha) bind(C, name=namespace//\"get_properties\") Calculate dispersion Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol type(c_ptr), value :: vdisp real(kind=c_double), intent(out), optional :: c_cn (*) real(kind=c_double), intent(out), optional :: c_charges (*) real(kind=c_double), intent(out), optional :: c_c6 (*) real(kind=c_double), intent(out), optional :: c_alpha (*) public  subroutine update_structure_api (verror, vmol, positions, lattice) bind(C, name=namespace//\"update_structure\") Update coordinates and lattice parameters (quantities in Bohr) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: verror type(c_ptr), value :: vmol real(kind=c_double), intent(in) :: positions (3,*) real(kind=c_double), intent(in), optional :: lattice (3,3) private  subroutine verify_structure (error, mol) Cold fusion check Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error type(structure_type), intent(in) :: mol","tags":"","url":"module/dftd4_api.html"},{"title":"dftd4_reference – DFT-D4","text":"Uses mctc_io_symbols dftd4_data mctc_env Variables Type Visibility Attributes Name Initial real(kind=wp), private, dimension(23,7,max_elem) :: alphaiw real(kind=wp), private, dimension(7,max_elem) :: ascale real(kind=wp), private, dimension(7,max_elem) :: clsh real(kind=wp), private, dimension(7,max_elem) :: clsq real(kind=wp), private, dimension(7,max_elem) :: dfth real(kind=wp), private, dimension(7,max_elem) :: dftq real(kind=wp), private, dimension(7,max_elem) :: gffh real(kind=wp), private, dimension(7,max_elem) :: gffq real(kind=wp), private, dimension(7,max_elem) :: hcount integer, private, parameter :: max_elem = 118 real(kind=wp), private, dimension(7,max_elem) :: pbch real(kind=wp), private, dimension(7,max_elem) :: pbcq real(kind=wp), private, dimension(7,max_elem) :: refcn real(kind=wp), private, dimension(7,max_elem) :: refcovcn real(kind=wp), private, dimension(7,max_elem) :: refh integer, private, dimension(max_elem) :: refn real(kind=wp), private, dimension(7,max_elem) :: refq integer, private, dimension(7,max_elem) :: refsys real(kind=wp), private, dimension(23,17) :: secaiw real(kind=wp), private, dimension(17) :: seccn real(kind=wp), private, dimension(17) :: seccnd3 real(kind=wp), private, dimension(17) :: secq real(kind=wp), private, dimension(17) :: sscale Interfaces public        interface get_nref private elemental function get_nref_sym (sym) result(n) Get number of references for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value integer Number of references private elemental function get_nref_num (num) result(n) Get number of references for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value integer Number of references public        interface set_refalpha_eeq private pure subroutine set_refalpha_eeq_sym (alpha, ga, gc, sym) Set the reference polarizibility for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refalpha_eeq_num (alpha, ga, gc, num) Set the reference polarizibility for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness integer, intent(in) :: num Atomic number public        interface set_refalpha_gfn2 private pure subroutine set_refalpha_gfn2_sym (alpha, ga, gc, sym) Set the reference polarizibility for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refalpha_gfn2_num (alpha, ga, gc, num) Set the reference polarizibility for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness integer, intent(in) :: num Atomic number public        interface set_refcn private pure subroutine set_refcn_sym (cn, sym) Set the reference coordination numbers for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: cn (:) Reference coordination number character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refcn_num (cn, num) Set the reference coordination numbers for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: cn (:) Reference coordination number integer, intent(in) :: num Atomic number public        interface set_refgw private pure subroutine set_refgw_sym (ngw, sym) Set the number of gaussian weights for an element symbol Arguments Type Intent Optional Attributes Name integer, intent(out) :: ngw (:) Number of gaussian weights character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refgw_num (ngw, num) Set the number of gaussian weights for an atomic number Arguments Type Intent Optional Attributes Name integer, intent(out) :: ngw (:) Number of gaussian weights integer, intent(in) :: num Atomic number public        interface set_refq_eeq private pure subroutine set_refq_eeq_sym (q, sym) Set the reference partial charges for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refq_eeq_num (q, num) Set the reference partial charges for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge integer, intent(in) :: num Atomic number public        interface set_refq_gfn2 private pure subroutine set_refq_gfn2_sym (q, sym) Set the reference partial charges for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refq_gfn2_num (q, num) Set the reference partial charges for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge integer, intent(in) :: num Atomic number Functions private elemental function get_nref_num (num) result(n) Get number of references for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value integer Number of references private elemental function get_nref_sym (sym) result(n) Get number of references for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value integer Number of references private elemental function zeta (a, c, qref, qmod) charge scaling function Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: a real(kind=wp), intent(in) :: c real(kind=wp), intent(in) :: qref real(kind=wp), intent(in) :: qmod Return Value real(kind=wp) Subroutines private pure subroutine set_refalpha_eeq_num (alpha, ga, gc, num) Set the reference polarizibility for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness integer, intent(in) :: num Atomic number private pure subroutine set_refalpha_eeq_sym (alpha, ga, gc, sym) Set the reference polarizibility for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refalpha_gfn2_num (alpha, ga, gc, num) Set the reference polarizibility for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness integer, intent(in) :: num Atomic number private pure subroutine set_refalpha_gfn2_sym (alpha, ga, gc, sym) Set the reference polarizibility for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: alpha (:,:) Reference polarizibility real(kind=wp), intent(in) :: ga Maximum charge scaling height real(kind=wp), intent(in) :: gc Charge scaling steepness character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refcn_num (cn, num) Set the reference coordination numbers for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: cn (:) Reference coordination number integer, intent(in) :: num Atomic number private pure subroutine set_refcn_sym (cn, sym) Set the reference coordination numbers for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: cn (:) Reference coordination number character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refgw_num (ngw, num) Set the number of gaussian weights for an atomic number Arguments Type Intent Optional Attributes Name integer, intent(out) :: ngw (:) Number of gaussian weights integer, intent(in) :: num Atomic number private pure subroutine set_refgw_sym (ngw, sym) Set the number of gaussian weights for an element symbol Arguments Type Intent Optional Attributes Name integer, intent(out) :: ngw (:) Number of gaussian weights character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refq_eeq_num (q, num) Set the reference partial charges for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge integer, intent(in) :: num Atomic number private pure subroutine set_refq_eeq_sym (q, sym) Set the reference partial charges for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge character(len=*), intent(in) :: sym Element symbol private pure subroutine set_refq_gfn2_num (q, num) Set the reference partial charges for an atomic number Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge integer, intent(in) :: num Atomic number private pure subroutine set_refq_gfn2_sym (q, sym) Set the reference partial charges for an element symbol Arguments Type Intent Optional Attributes Name real(kind=wp), intent(out) :: q (:) Reference partial charge character(len=*), intent(in) :: sym Element symbol","tags":"","url":"module/dftd4_reference.html"},{"title":"dftd4_charge – DFT-D4","text":"Interface to the charge model Uses mctc_io multicharge iso_fortran_env mctc_env Subroutines public  subroutine get_charges (mol, qvec, dqdr, dqdL) Obtain charges from electronegativity equilibration model Arguments Type Intent Optional Attributes Name type(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(out), contiguous :: qvec (:) Atomic partial charges real(kind=wp), intent(out), optional, contiguous :: dqdr (:,:,:) Derivative of the partial charges w.r.t. the Cartesian coordinates real(kind=wp), intent(out), optional, contiguous :: dqdL (:,:,:) Derivative of the partial charges w.r.t. strain deformations","tags":"","url":"module/dftd4_charge.html"},{"title":"dftd4_data_r4r2 – DFT-D4","text":"Uses mctc_io_convert mctc_io_symbols mctc_env Variables Type Visibility Attributes Name Initial integer, private :: idum integer, private, parameter :: max_elem = 118 real(kind=wp), private, parameter :: r4_over_r2 (max_elem) = [8.0589_wp, 3.4698_wp, 29.0974_wp, 14.8517_wp, 11.8799_wp, 7.8715_wp, 5.5588_wp, 4.7566_wp, 3.8025_wp, 3.1036_wp, 26.1552_wp, 17.2304_wp, 17.7210_wp, 12.7442_wp, 9.5361_wp, 8.1652_wp, 6.7463_wp, 5.6004_wp, 29.2012_wp, 22.3934_wp, 19.0598_wp, 16.8590_wp, 15.4023_wp, 12.5589_wp, 13.4788_wp, 12.2309_wp, 11.2809_wp, 10.5569_wp, 10.1428_wp, 9.4907_wp, 13.4606_wp, 10.8544_wp, 8.9386_wp, 8.1350_wp, 7.1251_wp, 6.1971_wp, 30.0162_wp, 24.4103_wp, 20.3537_wp, 17.4780_wp, 13.5528_wp, 11.8451_wp, 11.0355_wp, 10.1997_wp, 9.5414_wp, 9.0061_wp, 8.6417_wp, 8.9975_wp, 14.0834_wp, 11.8333_wp, 10.0179_wp, 9.3844_wp, 8.4110_wp, 7.5152_wp, 32.7622_wp, 27.5708_wp, 23.1671_wp, 21.6003_wp, 20.9615_wp, 20.4562_wp, 20.1010_wp, 19.7475_wp, 19.4828_wp, 15.6013_wp, 19.2362_wp, 17.4717_wp, 17.8321_wp, 17.4237_wp, 17.1954_wp, 17.1631_wp, 14.5716_wp, 15.8758_wp, 13.8989_wp, 12.4834_wp, 11.4421_wp, 10.2671_wp, 8.3549_wp, 7.8496_wp, 7.3278_wp, 7.4820_wp, 13.5124_wp, 11.6554_wp, 10.0959_wp, 9.7340_wp, 8.8584_wp, 8.0125_wp, 29.8135_wp, 26.3157_wp, 19.1885_wp, 15.8542_wp, 16.1305_wp, 15.6161_wp, 15.1226_wp, 16.1576_wp, 14.6510_wp, 14.7178_wp, 13.9108_wp, 13.5623_wp, 13.2326_wp, 12.9189_wp, 12.6133_wp, 12.3142_wp, 14.8326_wp, 12.3771_wp, 10.6378_wp, 9.3638_wp, 8.2297_wp, 7.5667_wp, 6.9456_wp, 6.3946_wp, 5.9159_wp, 5.4929_wp, 6.7286_wp, 6.5144_wp, 10.9169_wp, 10.3600_wp, 9.4723_wp, 8.6641_wp] real(kind=wp), private, parameter :: sqrt_z_r4_over_r2 (max_elem) = sqrt(0.5_wp*(r4_over_r2*[(sqrt(real(idum, wp)), idum=1, max_elem)])) Interfaces public        interface get_r4r2_val Get r4/r2 expectation value private elemental function get_r4r2_val_num (num) result(rad) Get r4/r2 expectation value for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) r4/r2 expectation value private elemental function get_r4r2_val_sym (sym) result(rad) Get r4/r2 expectation value for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) r4/r2 expectation value Functions private elemental function get_r4r2_val_num (num) result(rad) Get r4/r2 expectation value for a given atomic number Arguments Type Intent Optional Attributes Name integer, intent(in) :: num Atomic number Return Value real(kind=wp) r4/r2 expectation value private elemental function get_r4r2_val_sym (sym) result(rad) Get r4/r2 expectation value for a given element symbol Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: sym Element symbol Return Value real(kind=wp) r4/r2 expectation value","tags":"","url":"module/dftd4_data_r4r2.html"},{"title":"dftd4_model_d4s – DFT-D4","text":"Definition of the D4S dispersion model for the evaluation of C6 coefficients. Uses dftd4_data dftd4_model_type iso_fortran_env mctc_env mctc_io ieee_arithmetic dftd4_reference mctc_io_constants dftd4_model_utils Variables Type Visibility Attributes Name Initial real(kind=wp), private, parameter :: ga_default = 3.0_wp Default maximum charge scaling height for partial charge extrapolation real(kind=wp), private, parameter :: gc_default = 2.0_wp Default charge scaling steepness for partial charge extrapolation Interfaces public        interface new_d4s_model Create new D4 dispersion model from molecular structure input private  subroutine new_d4s_model_no_checks (d4, mol, ga, gc, ref) Create new dispersion model from molecular structure input without\nchecking for supported elements (old/compatibility version) Arguments Type Intent Optional Attributes Name type( d4s_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness integer, intent(in), optional :: ref Reference charge selection private  subroutine new_d4s_model_with_checks (error, d4, mol, ga, gc, ref) Create new D4S dispersion model from molecular structure input Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error Error handling type( d4s_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness integer, intent(in), optional :: ref Reference charge selection Derived Types type, public, extends( dispersion_model ) :: d4s_model D4S dispersion model to evaluate C6 coefficients Components Type Visibility Attributes Name Initial real(kind=wp), public, allocatable :: aiw (:,:,:) Reference dynamic polarizabilities real(kind=wp), public, allocatable :: c6 (:,:,:,:) Reference C6 coefficients real(kind=wp), public, allocatable :: cn (:,:) Reference coordination numbers real(kind=wp), public, allocatable :: en (:) Electronegativity real(kind=wp), public, allocatable :: eta (:) Chemical hardness real(kind=wp), public :: ga Charge scaling height real(kind=wp), public :: gc Charge scaling steepness integer, public :: ncoup Number of atoms coupled to by pairwise parameters integer, public, allocatable :: ngw (:,:) Number of Gaussian weights for each reference real(kind=wp), public, allocatable :: q (:,:) Reference partial charges real(kind=wp), public, allocatable :: r4r2 (:) Expectation values for C8 extrapolation real(kind=wp), public, allocatable :: rcov (:) Covalent radii for coordination number integer, public, allocatable :: ref (:) Number of reference systems real(kind=wp), public, allocatable :: wf (:,:) Weighting factors for CN interpolation real(kind=wp), public, allocatable :: zeff (:) Effective nuclear charges Type-Bound Procedures procedure, public :: get_atomic_c6 Evaluate C6 coefficient procedure, public :: get_polarizabilities Evaluate atomic polarizabilities procedure, public :: weight_references Generate weights for all reference systems Subroutines private  subroutine get_atomic_c6 (self, mol, gwvec, gwdcn, gwdq, c6, dc6dcn, dc6dq) Calculate atomic dispersion coefficients and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( d4s_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Pairwise weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the pairwise weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the pairwise weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: c6 (:,:) C6 coefficients for all atom pairs. real(kind=wp), intent(out), optional :: dc6dcn (:,:) Derivative of the C6 w.r.t. the coordination number real(kind=wp), intent(out), optional :: dc6dq (:,:) Derivative of the C6 w.r.t. the partial charge private  subroutine get_polarizabilities (self, mol, gwvec, gwdcn, gwdq, alpha, dadcn, dadq) Calculate atomic polarizabilities and their derivatives w.r.t.\nthe coordination numbers and atomic partial charges. Arguments Type Intent Optional Attributes Name class( d4s_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: gwvec (:,:,:) Pairwise weighting function for the atomic reference systems real(kind=wp), intent(in), optional :: gwdcn (:,:,:) Derivative of the pairwise weighting function w.r.t. the coordination number real(kind=wp), intent(in), optional :: gwdq (:,:,:) Derivative of the pairwise weighting function w.r.t. the partial charge real(kind=wp), intent(out) :: alpha (:) Static polarizabilities for all atoms. real(kind=wp), intent(out), optional :: dadcn (:) Derivative of the polarizibility w.r.t. the coordination number real(kind=wp), intent(out), optional :: dadq (:) Derivative of the polarizibility w.r.t. the partial charge private  subroutine new_d4s_model_no_checks (d4, mol, ga, gc, ref) Create new dispersion model from molecular structure input without\nchecking for supported elements (old/compatibility version) Arguments Type Intent Optional Attributes Name type( d4s_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness integer, intent(in), optional :: ref Reference charge selection private  subroutine new_d4s_model_with_checks (error, d4, mol, ga, gc, ref) Create new D4S dispersion model from molecular structure input Arguments Type Intent Optional Attributes Name type(error_type), intent(out), allocatable :: error Error handling type( d4s_model ), intent(out) :: d4 Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in), optional :: ga Charge scaling height real(kind=wp), intent(in), optional :: gc Charge scaling steepness integer, intent(in), optional :: ref Reference charge selection private  subroutine weight_references (self, mol, cn, q, gwvec, gwdcn, gwdq) Calculate the weights of the reference system and the derivatives w.r.t.\ncoordination number for later use. Arguments Type Intent Optional Attributes Name class( d4s_model ), intent(in) :: self Instance of the dispersion model class(structure_type), intent(in) :: mol Molecular structure data real(kind=wp), intent(in) :: cn (:) Coordination number of every atom real(kind=wp), intent(in) :: q (:) Partial charge of every atom real(kind=wp), intent(out) :: gwvec (:,:,:) Pairwise weighting for the atomic reference systems real(kind=wp), intent(out), optional :: gwdcn (:,:,:) derivative of the pairwise weighting function w.r.t. the coordination number real(kind=wp), intent(out), optional :: gwdq (:,:,:) derivative of the pairwise weighting function w.r.t. the charge scaling","tags":"","url":"module/dftd4_model_d4s.html"},{"title":"dftd4_data – DFT-D4","text":"Element specific data needed for the DFT-D4 model Uses dftd4_data_r4r2 dftd4_data_en dftd4_data_wfpair dftd4_data_covrad dftd4_data_hardness dftd4_data_zeff","tags":"","url":"module/dftd4_data.html"},{"title":"en.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the GNU Lesser General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! GNU Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_data_en use mctc_env , only : wp use mctc_io_symbols , only : to_number implicit none private public :: get_electronegativity interface get_electronegativity module procedure :: get_electronegativity_num module procedure :: get_electronegativity_sym end interface get_electronegativity integer , parameter :: max_elem = 118 !> Pauling electronegativities, used for the covalent coordination number. real ( wp ), parameter :: pauling_en ( max_elem ) = [ & & 2.20_wp , 3.00_wp , & ! H,He & 0.98_wp , 1.57_wp , 2.04_wp , 2.55_wp , 3.04_wp , 3.44_wp , 3.98_wp , 4.50_wp , & ! Li-Ne & 0.93_wp , 1.31_wp , 1.61_wp , 1.90_wp , 2.19_wp , 2.58_wp , 3.16_wp , 3.50_wp , & ! Na-Ar & 0.82_wp , 1.00_wp , & ! K,Ca & 1.36_wp , 1.54_wp , 1.63_wp , 1.66_wp , 1.55_wp , & ! Sc- & 1.83_wp , 1.88_wp , 1.91_wp , 1.90_wp , 1.65_wp , & ! -Zn & 1.81_wp , 2.01_wp , 2.18_wp , 2.55_wp , 2.96_wp , 3.00_wp , & ! Ga-Kr & 0.82_wp , 0.95_wp , & ! Rb,Sr & 1.22_wp , 1.33_wp , 1.60_wp , 2.16_wp , 1.90_wp , & ! Y- & 2.20_wp , 2.28_wp , 2.20_wp , 1.93_wp , 1.69_wp , & ! -Cd & 1.78_wp , 1.96_wp , 2.05_wp , 2.10_wp , 2.66_wp , 2.60_wp , & ! In-Xe & 0.79_wp , 0.89_wp , & ! Cs,Ba & 1.10_wp , 1.12_wp , 1.13_wp , 1.14_wp , 1.15_wp , 1.17_wp , 1.18_wp , & ! La-Eu & 1.20_wp , 1.21_wp , 1.22_wp , 1.23_wp , 1.24_wp , 1.25_wp , 1.26_wp , & ! Gd-Yb & 1.27_wp , 1.30_wp , 1.50_wp , 2.36_wp , 1.90_wp , & ! Lu- & 2.20_wp , 2.20_wp , 2.28_wp , 2.54_wp , 2.00_wp , & ! -Hg & 1.62_wp , 2.33_wp , 2.02_wp , 2.00_wp , 2.20_wp , 2.20_wp , & ! Tl-Rn & 0.79_wp , 0.90_wp , & ! Fr,Ra & 1.10_wp , 1.30_wp , 1.50_wp , 1.38_wp , 1.36_wp , 1.28_wp , 1.30_wp , & ! Ac-Am & 1.30_wp , 1.30_wp , 1.30_wp , 1.30_wp , 1.30_wp , 1.30_wp , 1.30_wp , & ! Cm-No & 1.30_wp , & ! Lr ! only dummies below & 1.50_wp , 1.50_wp , 1.50_wp , 1.50_wp , & ! Rf-Bh & 1.50_wp , 1.50_wp , 1.50_wp , 1.50_wp , 1.50_wp , & ! Hs-Cn & 1.50_wp , 1.50_wp , 1.50_wp , 1.50_wp , 1.50_wp , 1.50_wp ] ! Nh-Og contains !> Get electronegativity for a given element symbol elemental function get_electronegativity_sym ( sym ) result ( en ) !DEC$ ATTRIBUTES DLLEXPORT :: get_electronegativity_sym !> Element symbol character ( len =* ), intent ( in ) :: sym !> Electronegativity real ( wp ) :: en en = get_electronegativity ( to_number ( sym )) end function get_electronegativity_sym !> Get electronegativity for a given atomic number elemental function get_electronegativity_num ( num ) result ( en ) !DEC$ ATTRIBUTES DLLEXPORT :: get_electronegativity_num !> Atomic number integer , intent ( in ) :: num !> Electronegativity real ( wp ) :: en if ( num > 0 . and . num <= size ( pauling_en )) then en = pauling_en ( num ) else en = 0.0_wp end if end function get_electronegativity_num end module dftd4_data_en","tags":"","url":"sourcefile/en.f90.html"},{"title":"rational.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Implementation of the rational (Becke--Johnson) damping function. module dftd4_damping_rational use dftd4_damping , only : damping_param use dftd4_damping_atm , only : get_atm_dispersion use dftd4_data , only : get_r4r2_val use mctc_env , only : wp use mctc_io , only : structure_type implicit none private public :: rational_damping_param !> Rational (Becke-Johnson) damping model type , extends ( damping_param ) :: rational_damping_param real ( wp ) :: s6 = 1.0_wp real ( wp ) :: s8 real ( wp ) :: s9 = 1.0_wp real ( wp ) :: a1 real ( wp ) :: a2 real ( wp ) :: alp = 1 6.0_wp contains !> Evaluate pairwise dispersion energy expression procedure :: get_dispersion2 !> Evaluate ATM three-body dispersion energy expression procedure :: get_dispersion3 !> Evaluate pairwise representation of additive dispersion energy procedure :: get_pairwise_dispersion2 !> Evaluate pairwise representation of non-additive dispersion energy procedure :: get_pairwise_dispersion3 end type rational_damping_param contains !> Evaluation of the dispersion energy expression subroutine get_dispersion2 ( self , mol , trans , cutoff , r4r2 , c6 , dc6dcn , dc6dq , & & energy , dEdcn , dEdq , gradient , sigma ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dispersion2 !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ), optional :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ), optional :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ), optional :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ), optional :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ), optional :: sigma (:, :) logical :: grad if ( abs ( self % s6 ) < epsilon ( 1.0_wp ) . and . abs ( self % s8 ) < epsilon ( 1.0_wp )) return grad = present ( dc6dcn ) . and . present ( dEdcn ) . and . present ( dc6dq ) & & . and . present ( dEdq ) . and . present ( gradient ) . and . present ( sigma ) if ( grad ) then call get_dispersion_derivs ( self , mol , trans , cutoff , r4r2 , c6 , dc6dcn , dc6dq , & & energy , dEdcn , dEdq , gradient , sigma ) else call get_dispersion_energy ( self , mol , trans , cutoff , r4r2 , c6 , energy ) end if end subroutine get_dispersion2 !> Evaluation of the dispersion energy expression subroutine get_dispersion_energy ( self , mol , trans , cutoff , r4r2 , c6 , energy ) !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) integer :: iat , jat , izp , jzp , jtr real ( wp ) :: vec ( 3 ), r2 , cutoff2 , r0ij , rrij , c6ij , t6 , t8 , edisp , dE ! Thread-private array for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:) cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, self, c6, trans, cutoff2, r4r2) & !$omp private(iat, jat, izp, jzp, jtr, vec, r2, r0ij, rrij, c6ij, & !$omp& t6, t8, edisp, dE) & !$omp shared(energy) & !$omp private(energy_local) allocate ( energy_local ( size ( energy , 1 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) rrij = 3 * r4r2 ( izp ) * r4r2 ( jzp ) r0ij = self % a1 * sqrt ( rrij ) + self % a2 c6ij = c6 ( jat , iat ) do jtr = 1 , size ( trans , 2 ) vec (:) = mol % xyz (:, iat ) - ( mol % xyz (:, jat ) + trans (:, jtr )) r2 = vec ( 1 ) * vec ( 1 ) + vec ( 2 ) * vec ( 2 ) + vec ( 3 ) * vec ( 3 ) if ( r2 > cutoff2 . or . r2 < epsilon ( 1.0_wp )) cycle t6 = 1.0_wp / ( r2 ** 3 + r0ij ** 6 ) t8 = 1.0_wp / ( r2 ** 4 + r0ij ** 8 ) edisp = self % s6 * t6 + self % s8 * rrij * t8 dE = - c6ij * edisp * 0.5_wp energy_local ( iat ) = energy_local ( iat ) + dE if ( iat /= jat ) then energy_local ( jat ) = energy_local ( jat ) + dE end if end do end do end do !$omp end do !$omp critical (get_dispersion_energy_) energy (:) = energy (:) + energy_local (:) !$omp end critical (get_dispersion_energy_) deallocate ( energy_local ) !$omp end parallel end subroutine get_dispersion_energy !> Evaluation of the dispersion energy expression subroutine get_dispersion_derivs ( self , mol , trans , cutoff , r4r2 , c6 , dc6dcn , dc6dq , & & energy , dEdcn , dEdq , gradient , sigma ) !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ) :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ) :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ) :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ) :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ) :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ) :: sigma (:, :) integer :: iat , jat , izp , jzp , jtr real ( wp ) :: vec ( 3 ), r2 , cutoff2 , r0ij , rrij , c6ij , t6 , t8 , d6 , d8 , edisp , gdisp real ( wp ) :: dE , dG ( 3 ), dS ( 3 , 3 ) ! Thread-private arrays for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:) real ( wp ), allocatable :: dEdcn_local (:) real ( wp ), allocatable :: dEdq_local (:) real ( wp ), allocatable :: gradient_local (:, :) real ( wp ), allocatable :: sigma_local (:, :) cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, self, c6, dc6dcn, dc6dq, trans, cutoff2, r4r2) & !$omp private(iat, jat, izp, jzp, jtr, vec, r2, r0ij, rrij, c6ij, t6, t8, & !$omp& d6, d8, edisp, gdisp, dE, dG, dS) & !$omp shared(energy, gradient, sigma, dEdcn, dEdq) & !$omp private(energy_local, gradient_local, sigma_local, dEdcn_local, & !$omp& dEdq_local) allocate ( energy_local ( size ( energy , 1 )), source = 0.0_wp ) allocate ( dEdcn_local ( size ( dEdcn , 1 )), source = 0.0_wp ) allocate ( dEdq_local ( size ( dEdq , 1 )), source = 0.0_wp ) allocate ( gradient_local ( size ( gradient , 1 ), size ( gradient , 2 )), source = 0.0_wp ) allocate ( sigma_local ( size ( sigma , 1 ), size ( sigma , 2 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) rrij = 3 * r4r2 ( izp ) * r4r2 ( jzp ) r0ij = self % a1 * sqrt ( rrij ) + self % a2 c6ij = c6 ( jat , iat ) do jtr = 1 , size ( trans , 2 ) vec (:) = mol % xyz (:, iat ) - ( mol % xyz (:, jat ) + trans (:, jtr )) r2 = vec ( 1 ) * vec ( 1 ) + vec ( 2 ) * vec ( 2 ) + vec ( 3 ) * vec ( 3 ) if ( r2 > cutoff2 . or . r2 < epsilon ( 1.0_wp )) cycle t6 = 1.0_wp / ( r2 ** 3 + r0ij ** 6 ) t8 = 1.0_wp / ( r2 ** 4 + r0ij ** 8 ) d6 = - 6 * r2 ** 2 * t6 ** 2 d8 = - 8 * r2 ** 3 * t8 ** 2 edisp = self % s6 * t6 + self % s8 * rrij * t8 gdisp = self % s6 * d6 + self % s8 * rrij * d8 dE = - c6ij * edisp * 0.5_wp dG (:) = - c6ij * gdisp * vec dS (:, :) = spread ( dG , 1 , 3 ) * spread ( vec , 2 , 3 ) * 0.5_wp energy_local ( iat ) = energy_local ( iat ) + dE dEdcn_local ( iat ) = dEdcn_local ( iat ) - dc6dcn ( iat , jat ) * edisp dEdq_local ( iat ) = dEdq_local ( iat ) - dc6dq ( iat , jat ) * edisp sigma_local (:, :) = sigma_local + dS if ( iat /= jat ) then energy_local ( jat ) = energy_local ( jat ) + dE dEdcn_local ( jat ) = dEdcn_local ( jat ) - dc6dcn ( jat , iat ) * edisp dEdq_local ( jat ) = dEdq_local ( jat ) - dc6dq ( jat , iat ) * edisp gradient_local (:, iat ) = gradient_local (:, iat ) + dG gradient_local (:, jat ) = gradient_local (:, jat ) - dG sigma_local (:, :) = sigma_local + dS end if end do end do end do !$omp end do !$omp critical (get_dispersion_derivs_) energy (:) = energy (:) + energy_local (:) dEdcn (:) = dEdcn (:) + dEdcn_local (:) dEdq (:) = dEdq (:) + dEdq_local (:) gradient (:, :) = gradient (:, :) + gradient_local (:, :) sigma (:, :) = sigma (:, :) + sigma_local (:, :) !$omp end critical (get_dispersion_derivs_) deallocate ( energy_local ) deallocate ( dEdcn_local ) deallocate ( dEdq_local ) deallocate ( gradient_local ) deallocate ( sigma_local ) !$omp end parallel end subroutine get_dispersion_derivs !> Evaluation of the dispersion energy expression subroutine get_dispersion3 ( self , mol , trans , cutoff , r4r2 , c6 , dc6dcn , dc6dq , & & energy , dEdcn , dEdq , gradient , sigma ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dispersion3 !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ), optional :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ), optional :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ), optional :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ), optional :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ), optional :: sigma (:, :) call get_atm_dispersion ( mol , trans , cutoff , self % s9 , self % a1 , self % a2 , & & self % alp , r4r2 , c6 , dc6dcn , dc6dq , energy , dEdcn , dEdq , & & gradient , sigma ) end subroutine get_dispersion3 !> Evaluation of the dispersion energy expression projected on atomic pairs subroutine get_pairwise_dispersion2 ( self , mol , trans , cutoff , r4r2 , c6 , energy ) !DEC$ ATTRIBUTES DLLEXPORT :: get_pairwise_dispersion2 !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:, :) integer :: iat , jat , izp , jzp , jtr real ( wp ) :: vec ( 3 ), r2 , cutoff2 , r0ij , rrij , c6ij , t6 , t8 , edisp , dE ! Thread-private array for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:, :) if ( abs ( self % s6 ) < epsilon ( 1.0_wp ) . and . abs ( self % s8 ) < epsilon ( 1.0_wp )) return cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, self, c6, trans, cutoff2, r4r2) & !$omp private(iat, jat, izp, jzp, jtr, vec, r2, r0ij, rrij, c6ij, & !$omp& t6, t8, edisp, dE) & !$omp shared(energy) & !$omp private(energy_local) allocate ( energy_local ( size ( energy , 1 ), size ( energy , 2 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) rrij = 3 * r4r2 ( izp ) * r4r2 ( jzp ) r0ij = self % a1 * sqrt ( rrij ) + self % a2 c6ij = c6 ( jat , iat ) do jtr = 1 , size ( trans , 2 ) vec (:) = mol % xyz (:, iat ) - ( mol % xyz (:, jat ) + trans (:, jtr )) r2 = vec ( 1 ) * vec ( 1 ) + vec ( 2 ) * vec ( 2 ) + vec ( 3 ) * vec ( 3 ) if ( r2 > cutoff2 . or . r2 < epsilon ( 1.0_wp )) cycle t6 = 1.0_wp / ( r2 ** 3 + r0ij ** 6 ) t8 = 1.0_wp / ( r2 ** 4 + r0ij ** 8 ) edisp = self % s6 * t6 + self % s8 * rrij * t8 dE = - c6ij * edisp * 0.5_wp energy_local ( jat , iat ) = energy_local ( jat , iat ) + dE if ( iat /= jat ) then energy_local ( iat , jat ) = energy_local ( iat , jat ) + dE end if end do end do end do !$omp end do !$omp critical (get_pairwise_dispersion2_) energy (:, :) = energy (:, :) + energy_local (:, :) !$omp end critical (get_pairwise_dispersion2_) deallocate ( energy_local ) !$omp end parallel end subroutine get_pairwise_dispersion2 !> Evaluation of the dispersion energy expression subroutine get_pairwise_dispersion3 ( self , mol , trans , cutoff , r4r2 , c6 , energy ) !DEC$ ATTRIBUTES DLLEXPORT :: get_pairwise_dispersion3 !> Damping parameters class ( rational_damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:, :) integer :: iat , jat , kat , izp , jzp , kzp , jtr , ktr real ( wp ) :: vij ( 3 ), vjk ( 3 ), vik ( 3 ), r2ij , r2jk , r2ik , c6ij , c6jk , c6ik , triple real ( wp ) :: r0ij , r0jk , r0ik , r0 , r1 , r2 , r3 , r5 , rr , fdmp , ang real ( wp ) :: cutoff2 , c9 , dE ! Thread-private arrays for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:, :) if ( abs ( self % s9 ) < epsilon ( 1.0_wp )) return cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, trans, c6, r4r2, cutoff2, self) & !$omp private(iat, jat, kat, izp, jzp, kzp, jtr, ktr, vij, vjk, vik, & !$omp& r2ij, r2jk, r2ik, c6ij, c6jk, c6ik, triple, r0ij, r0jk, r0ik, r0, & !$omp& r1, r2, r3, r5, rr, fdmp, ang, c9, dE) & !$omp shared(energy) & !$omp private(energy_local) allocate ( energy_local ( size ( energy , 1 ), size ( energy , 2 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) c6ij = c6 ( jat , iat ) r0ij = self % a1 * sqrt ( 3 * r4r2 ( jzp ) * r4r2 ( izp )) + self % a2 do jtr = 1 , size ( trans , 2 ) vij (:) = mol % xyz (:, jat ) + trans (:, jtr ) - mol % xyz (:, iat ) r2ij = vij ( 1 ) * vij ( 1 ) + vij ( 2 ) * vij ( 2 ) + vij ( 3 ) * vij ( 3 ) if ( r2ij > cutoff2 . or . r2ij < epsilon ( 1.0_wp )) cycle do kat = 1 , jat kzp = mol % id ( kat ) c6ik = c6 ( kat , iat ) c6jk = c6 ( kat , jat ) c9 = - self % s9 * sqrt ( abs ( c6ij * c6ik * c6jk )) r0ik = self % a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( izp )) + self % a2 r0jk = self % a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( jzp )) + self % a2 r0 = r0ij * r0ik * r0jk triple = triple_scale ( iat , jat , kat ) do ktr = 1 , size ( trans , 2 ) vik (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, iat ) r2ik = vik ( 1 ) * vik ( 1 ) + vik ( 2 ) * vik ( 2 ) + vik ( 3 ) * vik ( 3 ) if ( r2ik > cutoff2 . or . r2ik < epsilon ( 1.0_wp )) cycle vjk (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, jat ) & & - trans (:, jtr ) r2jk = vjk ( 1 ) * vjk ( 1 ) + vjk ( 2 ) * vjk ( 2 ) + vjk ( 3 ) * vjk ( 3 ) if ( r2jk > cutoff2 . or . r2jk < epsilon ( 1.0_wp )) cycle r2 = r2ij * r2ik * r2jk r1 = sqrt ( r2 ) r3 = r2 * r1 r5 = r3 * r2 fdmp = 1.0_wp / ( 1.0_wp + 6.0_wp * ( r0 / r1 ) ** ( self % alp / 3.0_wp )) ang = 0.375_wp * ( r2ij + r2jk - r2ik ) * ( r2ij - r2jk + r2ik )& & * ( - r2ij + r2jk + r2ik ) / r5 + 1.0_wp / r3 rr = ang * fdmp dE = rr * c9 * triple / 6 energy_local ( jat , iat ) = energy_local ( jat , iat ) - dE energy_local ( kat , iat ) = energy_local ( kat , iat ) - dE energy_local ( iat , jat ) = energy_local ( iat , jat ) - dE energy_local ( kat , jat ) = energy_local ( kat , jat ) - dE energy_local ( iat , kat ) = energy_local ( iat , kat ) - dE energy_local ( jat , kat ) = energy_local ( jat , kat ) - dE end do end do end do end do end do !$omp end do !$omp critical (get_pairwise_dispersion3_) energy (:, :) = energy (:, :) + energy_local (:, :) !$omp end critical (get_pairwise_dispersion3_) deallocate ( energy_local ) !$omp end parallel end subroutine get_pairwise_dispersion3 !> Logic exercise to distribute a triple energy to atomwise energies. elemental function triple_scale ( ii , jj , kk ) result ( triple ) !> Atom indices integer , intent ( in ) :: ii , jj , kk !> Fraction of energy real ( wp ) :: triple if ( ii == jj ) then if ( ii == kk ) then ! ii'i\" -> 1/6 triple = 1.0_wp / 6.0_wp else ! ii'j -> 1/2 triple = 0.5_wp end if else if ( ii /= kk . and . jj /= kk ) then ! ijk -> 1 (full) triple = 1.0_wp else ! ijj' and iji' -> 1/2 triple = 0.5_wp end if end if end function triple_scale end module dftd4_damping_rational","tags":"","url":"sourcefile/rational.f90.html"},{"title":"zeff.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the GNU Lesser General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! GNU Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_data_zeff use mctc_env , only : wp use mctc_io_symbols , only : to_number implicit none private public :: get_effective_charge interface get_effective_charge module procedure :: get_effective_charge_num module procedure :: get_effective_charge_sym end interface get_effective_charge integer , parameter :: max_elem = 118 !> Effective nuclear charges from the def2-ECPs used for calculating the !> reference polarizabilities for DFT-D4. real ( wp ), parameter :: effective_nuclear_charge ( max_elem ) = [ & & 1 , 2 , & ! H-He & 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , & ! Li-Ne & 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , & ! Na-Ar & 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , & ! K-Kr & 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , & ! Rb-Xe & 9 , 10 , 11 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , & ! Cs-Lu & 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , & ! Hf-Rn !  just copy & paste from above & 9 , 10 , 11 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , & ! Fr-Lr & 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 ] ! Rf-Og contains !> Get effective nuclear charge for a given element symbol elemental function get_effective_charge_sym ( sym ) result ( zeff ) !> Element symbol character ( len =* ), intent ( in ) :: sym !> Effective nuclear charge real ( wp ) :: zeff zeff = get_effective_charge ( to_number ( sym )) end function get_effective_charge_sym !> Get effective nuclear charge for a given atomic number elemental function get_effective_charge_num ( num ) result ( zeff ) !> Atomic number integer , intent ( in ) :: num !> Effective nuclear charge real ( wp ) :: zeff if ( num > 0 . and . num <= size ( effective_nuclear_charge )) then zeff = effective_nuclear_charge ( num ) else zeff = 0.0_wp end if end function get_effective_charge_num end module dftd4_data_zeff","tags":"","url":"sourcefile/zeff.f90.html"},{"title":"param.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_param use mctc_env , only : wp use dftd4_damping , only : damping_param use dftd4_damping_rational , only : rational_damping_param use dftd4_utils , only : lowercase implicit none private public :: functional_group public :: get_rational_damping , get_functionals , get_functional_id public :: p_r2scan_3c enum , bind ( C ) enumerator :: p_invalid , & & p_hf , p_blyp , p_bpbe , p_bp , p_bpw , p_lb94 , p_mpwlyp , p_mpwpw , & & p_olyp , p_opbe , p_pbe , p_rpbe , p_revpbe , p_pw86pbe , & & p_rpw86pbe , p_pw91 , p_pwp , p_xlyp , p_b97 , p_tpss , p_revtpss , & & p_scan , p_rscan , p_r2scan , p_b1lyp , p_b3lyp , p_bhlyp , p_b1p , & & p_b3p , p_b1pw , p_b3pw , p_o3lyp , p_revpbe0 , p_revpbe38 , & & p_pbe0 , p_pwp1 , p_pw1pw , p_mpw1pw , p_mpw1lyp , p_pw6b95 , & & p_tpssh , p_tpss0 , p_x3lyp , p_m06l , p_m06 , p_b97d , & & p_wb97 , p_wb97x_2008 , p_b97m , p_wb97m , p_camb3lyp , p_lcblyp , & & p_lh07tsvwn , p_lh07ssvwn , p_lh12ctssirpw92 , p_lh12ctssifpw92 , & & p_lh14tcalpbe , p_lh20t , p_b2plyp , p_b2gpplyp , p_mpw2plyp , p_pwpb95 , & & p_dsdblyp , p_dsdpbe , p_dsdpbeb95 , p_dsdpbep86 , p_dsdsvwn , & & p_dodblyp , p_dodpbe , p_dodpbeb95 , p_dodpbep86 , p_dodsvwn , & & p_pbe0_2 , p_pbe0_dh , p_hsesol , p_dftb_3ob , p_dftb_mio , p_dftb_ob2 , & & p_dftb_matsci , p_dftb_pbc , p_b1b95 , p_pbesol , p_hse06 , p_mpwb1k , & & p_hse03 , p_revtpssh , p_mn12sx , p_glyp , p_mpw1b95 , & & p_revpbe0dh , p_revtpss0 , p_revdsdpbep86 , p_revdsdpbe , & & p_revdsdblyp , p_revdodpbep86 , p_am05 , p_hse12 , p_hse12s , & & p_r2scanh , p_r2scan0 , p_r2scan50 , p_r2scan_3c , p_camqtp01 , & & p_lcwpbe , p_lcwpbeh , p_wb97x_rev , p_wb97m_rev , & & p_wb97x_3c , p_wr2scan , p_r2scan0_dh , p_r2scan_cidh , & & p_r2scan_qidh , p_r2scan0_2 , p_pr2scan50 , p_pr2scan69 , & & p_kpr2scan50 , p_wpr2scan50 , p_wb97x , p_last end enum integer , parameter :: df_enum = kind ( p_invalid ) !> Group different spellings/names of functionals type functional_group character ( len = :), allocatable :: names (:) end type functional_group !> Retrieve rational damping parameters from functional name or ID interface get_rational_damping module procedure :: get_rational_damping_name module procedure :: get_rational_damping_id end interface get_rational_damping contains !> Create a new group of functional names function new_funcgroup ( input_names ) result ( group ) !> List of spellings/names of the functional character ( len =* ), intent ( in ) :: input_names (:) !> Functional with possibly different spellings type ( functional_group ) :: group integer :: n , i , max_len n = size ( input_names ) ! Determine the length of the longest name max_len = 0 do i = 1 , n max_len = max ( max_len , len_trim ( input_names ( i ))) end do ! Allocate based on the longest name's length allocate ( character ( len = max_len ) :: group % names ( n )) do i = 1 , n group % names ( i ) = trim ( input_names ( i )) end do end function new_funcgroup !> Collect all supported functionals subroutine get_functionals ( funcs ) !DEC$ ATTRIBUTES DLLEXPORT :: get_functionals !> Collection of functionals with possibly different spellings/names type ( functional_group ), allocatable , intent ( out ) :: funcs (:) allocate ( funcs ( p_last - 1 )) funcs ( p_hf ) = new_funcgroup ([ character ( len = 20 ) :: 'hf' ]) funcs ( p_am05 ) = new_funcgroup ([ character ( len = 20 ) :: 'am05' ]) funcs ( p_blyp ) = new_funcgroup ([ character ( len = 20 ) :: 'b-lyp' , 'blyp' ]) funcs ( p_bpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'bpbe' ]) funcs ( p_bp ) = new_funcgroup ([ character ( len = 20 ) :: 'b-p' , 'bp86' , 'bp' , 'b-p86' ]) funcs ( p_bpw ) = new_funcgroup ([ character ( len = 20 ) :: 'bpw' , 'b-pw' ]) funcs ( p_lb94 ) = new_funcgroup ([ character ( len = 20 ) :: 'lb94' ]) funcs ( p_mpwlyp ) = new_funcgroup ([ character ( len = 20 ) :: 'mpwlyp' , 'mpw-lyp' ]) funcs ( p_mpwpw ) = new_funcgroup ([ character ( len = 20 ) :: 'mpwpw' , 'mpw-pw' , 'mpwpw91' ]) funcs ( p_olyp ) = new_funcgroup ([ character ( len = 20 ) :: 'o-lyp' , 'olyp' ]) funcs ( p_opbe ) = new_funcgroup ([ character ( len = 20 ) :: 'opbe' ]) funcs ( p_pbe ) = new_funcgroup ([ character ( len = 20 ) :: 'pbe' ]) funcs ( p_rpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'rpbe' ]) funcs ( p_revpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'revpbe' ]) funcs ( p_pw86pbe ) = new_funcgroup ([ character ( len = 20 ) :: 'pw86pbe' ]) funcs ( p_rpw86pbe ) = new_funcgroup ([ character ( len = 20 ) :: 'rpw86pbe' ]) funcs ( p_pw91 ) = new_funcgroup ([ character ( len = 20 ) :: 'pw91' ]) funcs ( p_pwp ) = new_funcgroup ([ character ( len = 20 ) :: 'pwp' , 'pw-p' , 'pw91p86' ]) funcs ( p_xlyp ) = new_funcgroup ([ character ( len = 20 ) :: 'x-lyp' , 'xlyp' ]) funcs ( p_b97 ) = new_funcgroup ([ character ( len = 20 ) :: 'b97' ]) funcs ( p_tpss ) = new_funcgroup ([ character ( len = 20 ) :: 'tpss' ]) funcs ( p_revtpss ) = new_funcgroup ([ character ( len = 20 ) :: 'revtpss' ]) funcs ( p_scan ) = new_funcgroup ([ character ( len = 20 ) :: 'scan' ]) funcs ( p_rscan ) = new_funcgroup ([ character ( len = 20 ) :: 'rscan' ]) funcs ( p_r2scan ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan' , 'r²scan' ]) funcs ( p_r2scanh ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scanh' , 'r²scanh' ]) funcs ( p_r2scan0 ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan0' , 'r²scan0' ]) funcs ( p_r2scan50 ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan50' , 'r²scan50' ]) funcs ( p_r2scan_3c ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan-3c' , & & 'r²scan-3c' , 'r2scan_3c' , 'r²scan_3c' , 'r2scan3c' ]) funcs ( p_wr2scan ) = new_funcgroup ([ character ( len = 20 ) :: 'wr2scan' , 'wr²scan' ]) funcs ( p_r2scan0_dh ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan0-dh' , & & 'r²scan0-dh' , 'r2scan0dh' , 'r²scan0dh' ]) funcs ( p_r2scan_cidh ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan-cidh' , & & 'r²scan-cidh' , 'r2scancidh' , 'r²scancidh' ]) funcs ( p_r2scan_qidh ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan-qidh' , & & 'r²scan-qidh' , 'r2scanqidh' , 'r²scanqidh' ]) funcs ( p_r2scan0_2 ) = new_funcgroup ([ character ( len = 20 ) :: 'r2scan0-2' , & & 'r²scan0-2' , 'r2scan02' , 'r²scan02' ]) funcs ( p_pr2scan50 ) = new_funcgroup ([ character ( len = 20 ) :: 'pr2scan50' , & & 'pr²scan50' , 'pr2scan50' , 'pr²scan50' ]) funcs ( p_pr2scan69 ) = new_funcgroup ([ character ( len = 20 ) :: 'pr2scan69' , & & 'pr²scan69' , 'pr2scan69' , 'pr²scan69' ]) funcs ( p_kpr2scan50 ) = new_funcgroup ([ character ( len = 20 ) :: 'kpr2scan50' , & & 'kpr²scan50' , 'kpr2scan50' , 'kpr²scan50' ]) funcs ( p_wpr2scan50 ) = new_funcgroup ([ character ( len = 20 ) :: 'wpr2scan50' , & & 'wpr²scan50' , 'wpr2scan50' , 'wpr²scan50' ]) funcs ( p_b1lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'b1lyp' , 'b1-lyp' ]) funcs ( p_b3lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'b3-lyp' , 'b3lyp' ]) funcs ( p_bhlyp ) = new_funcgroup ([ character ( len = 20 ) :: 'bh-lyp' , 'bhlyp' ]) funcs ( p_b1p ) = new_funcgroup ([ character ( len = 20 ) :: 'b1p' , 'b1-p' , 'b1p86' ]) funcs ( p_b3p ) = new_funcgroup ([ character ( len = 20 ) :: 'b3p' , 'b3-p' , 'b3p86' ]) funcs ( p_b1pw ) = new_funcgroup ([ character ( len = 20 ) :: 'b1pw' , 'b1-pw' , 'b1pw91' ]) funcs ( p_b3pw ) = new_funcgroup ([ character ( len = 20 ) :: 'b3pw' , 'b3-pw' , 'b3pw91' ]) funcs ( p_o3lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'o3-lyp' , 'o3lyp' ]) funcs ( p_revpbe0 ) = new_funcgroup ([ character ( len = 20 ) :: 'revpbe0' ]) funcs ( p_revpbe38 ) = new_funcgroup ([ character ( len = 20 ) :: 'revpbe38' ]) funcs ( p_pbe0 ) = new_funcgroup ([ character ( len = 20 ) :: 'pbe0' ]) funcs ( p_pwp1 ) = new_funcgroup ([ character ( len = 20 ) :: 'pwp1' ]) funcs ( p_pw1pw ) = new_funcgroup ([ character ( len = 20 ) :: 'pw1pw' , 'pw1-pw' ]) funcs ( p_mpw1pw ) = new_funcgroup ([ character ( len = 20 ) :: 'mpw1pw' , 'mpw1-pw' , 'mpw1pw91' ]) funcs ( p_mpw1lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'mpw1lyp' , 'mpw1-lyp' ]) funcs ( p_pw6b95 ) = new_funcgroup ([ character ( len = 20 ) :: 'pw6b95' ]) funcs ( p_tpssh ) = new_funcgroup ([ character ( len = 20 ) :: 'tpssh' ]) funcs ( p_tpss0 ) = new_funcgroup ([ character ( len = 20 ) :: 'tpss0' ]) funcs ( p_x3lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'x3-lyp' , 'x3lyp' ]) funcs ( p_m06 ) = new_funcgroup ([ character ( len = 20 ) :: 'm06' ]) funcs ( p_m06l ) = new_funcgroup ([ character ( len = 20 ) :: 'm06l' ]) funcs ( p_mn12sx ) = new_funcgroup ([ character ( len = 20 ) :: 'mn12sx' , 'mn12-sx' ]) funcs ( p_b97d ) = new_funcgroup ([ character ( len = 20 ) :: 'b97d' ]) funcs ( p_lh07tsvwn ) = new_funcgroup ([ character ( len = 20 ) :: 'lh07tsvwn' , 'lh07t-svwn' ]) funcs ( p_lh07ssvwn ) = new_funcgroup ([ character ( len = 20 ) :: 'lh07ssvwn' , 'lh07s-svwn' ]) funcs ( p_lh12ctssirpw92 ) = new_funcgroup ([ character ( len = 20 ) :: 'lh12ctssirpw92' , 'lh12ct-ssirpw92' ]) funcs ( p_lh12ctssifpw92 ) = new_funcgroup ([ character ( len = 20 ) :: 'lh12ctssifpw92' , 'lh12ct-ssifpw92' ]) funcs ( p_lh14tcalpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'lh14tcalpbe' , 'lh14t-calpbe' ]) funcs ( p_lh20t ) = new_funcgroup ([ character ( len = 20 ) :: 'lh20t' ]) funcs ( p_b2plyp ) = new_funcgroup ([ character ( len = 20 ) :: 'b2plyp' , 'b2-plyp' ]) funcs ( p_b2gpplyp ) = new_funcgroup ([ character ( len = 20 ) :: 'b2gpplyp' , 'b2gp-plyp' ]) funcs ( p_mpw2plyp ) = new_funcgroup ([ character ( len = 20 ) :: 'mpw2plyp' ]) funcs ( p_pwpb95 ) = new_funcgroup ([ character ( len = 20 ) :: 'pwpb95' ]) funcs ( p_dsdblyp ) = new_funcgroup ([ character ( len = 20 ) :: 'dsdblyp' , 'dsd-blyp' ]) funcs ( p_dsdpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'dsdpbe' , 'dsd-pbe' ]) funcs ( p_dsdpbeb95 ) = new_funcgroup ([ character ( len = 20 ) :: 'dsdpbeb95' , 'dsd-pbeb95' ]) funcs ( p_dsdpbep86 ) = new_funcgroup ([ character ( len = 20 ) :: 'dsdpbep86' , 'dsd-pbep86' ]) funcs ( p_dsdsvwn ) = new_funcgroup ([ character ( len = 20 ) :: 'dsdsvwn' , 'dsd-svwn' ]) funcs ( p_dodblyp ) = new_funcgroup ([ character ( len = 20 ) :: 'dodblyp' , 'dod-blyp' ]) funcs ( p_dodpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'dodpbe' , 'dod-pbe' ]) funcs ( p_dodpbeb95 ) = new_funcgroup ([ character ( len = 20 ) :: 'dodpbeb95' , 'dod-pbeb95' ]) funcs ( p_dodpbep86 ) = new_funcgroup ([ character ( len = 20 ) :: 'dodpbep86' , 'dod-pbep86' ]) funcs ( p_dodsvwn ) = new_funcgroup ([ character ( len = 20 ) :: 'dodsvwn' , 'dod-svwn' ]) funcs ( p_pbe0_2 ) = new_funcgroup ([ character ( len = 20 ) :: 'pbe02' , 'pbe0-2' ]) funcs ( p_pbe0_dh ) = new_funcgroup ([ character ( len = 20 ) :: 'pbe0dh' , 'pbe0-dh' ]) funcs ( p_dftb_3ob ) = new_funcgroup ([ character ( len = 20 ) :: 'dftb3' , 'dftb(3ob)' ]) funcs ( p_dftb_mio ) = new_funcgroup ([ character ( len = 20 ) :: 'dftb(mio)' ]) funcs ( p_dftb_pbc ) = new_funcgroup ([ character ( len = 20 ) :: 'dftb(pbc)' ]) funcs ( p_dftb_matsci ) = new_funcgroup ([ character ( len = 20 ) :: 'dftb(matsci)' ]) funcs ( p_dftb_ob2 ) = new_funcgroup ([ character ( len = 20 ) :: 'lc-dftb' , 'dftb(ob2)' ]) funcs ( p_b1b95 ) = new_funcgroup ([ character ( len = 20 ) :: 'b1b95' ]) funcs ( p_pbesol ) = new_funcgroup ([ character ( len = 20 ) :: 'pbesol' ]) funcs ( p_mpwb1k ) = new_funcgroup ([ character ( len = 20 ) :: 'mpwb1k' ]) funcs ( p_mpw1b95 ) = new_funcgroup ([ character ( len = 20 ) :: 'mpw1b95' ]) funcs ( p_hse03 ) = new_funcgroup ([ character ( len = 20 ) :: 'hse03' ]) funcs ( p_hse06 ) = new_funcgroup ([ character ( len = 20 ) :: 'hse06' ]) funcs ( p_hse12 ) = new_funcgroup ([ character ( len = 20 ) :: 'hse12' ]) funcs ( p_hse12s ) = new_funcgroup ([ character ( len = 20 ) :: 'hse12s' ]) funcs ( p_hsesol ) = new_funcgroup ([ character ( len = 20 ) :: 'hsesol' ]) funcs ( p_revtpssh ) = new_funcgroup ([ character ( len = 20 ) :: 'revtpssh' ]) funcs ( p_glyp ) = new_funcgroup ([ character ( len = 20 ) :: 'glyp' , 'g-lyp' ]) funcs ( p_revpbe0dh ) = new_funcgroup ([ character ( len = 20 ) :: 'revpbe0dh' , 'revpbe0-dh' ]) funcs ( p_revtpss0 ) = new_funcgroup ([ character ( len = 20 ) :: 'revtpss0' ]) funcs ( p_revdsdpbep86 ) = new_funcgroup ([ character ( len = 20 ) :: 'revdsd-pbep86' , 'revdsdpbep86' ]) funcs ( p_revdsdpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'revdsd-pbe' , 'revdsd-pbepbe' , 'revdsdpbe' , 'revdsdpbepbe' ]) funcs ( p_revdsdblyp ) = new_funcgroup ([ character ( len = 20 ) :: 'revdsd-blyp' , 'revdsdblyp' ]) funcs ( p_revdodpbep86 ) = new_funcgroup ([ character ( len = 20 ) :: 'revdod-pbep86' , 'revdodpbep86' ]) funcs ( p_b97m ) = new_funcgroup ([ character ( len = 20 ) :: 'b97m' ]) funcs ( p_wb97m ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97m' , 'ωb97m' , 'omegab97m' ]) funcs ( p_wb97m_rev ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97m-rev' , & & 'ωb97m-rev' , 'omegab97m-rev' , 'wb97m_rev' , 'ωb97m_rev' , 'omegab97m_rev' ]) funcs ( p_wb97 ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97' , 'ωb97' , 'omegab97' ]) funcs ( p_wb97x_2008 ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97x_2008' , & & 'ωb97x_2008' , 'omegab97x_2008' , 'wb97x-2008' , 'ωb97x-2008' , & & 'omegab97x-2008' ]) funcs ( p_wb97x ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97x' , 'ωb97x' , & & 'omegab97x' ]) funcs ( p_wb97x_rev ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97x-rev' , & & 'ωb97x-rev' , 'omegab97x-rev' , 'wb97x_rev' , 'ωb97x_rev' , 'omegab97x_rev' ]) funcs ( p_wb97x_3c ) = new_funcgroup ([ character ( len = 20 ) :: 'wb97x-3c' , & & 'ωb97x-3c' , 'omegab97x-3c' , 'wb97x_3c' , 'ωb97x_3c' , 'omegab97x_3c' ]) funcs ( p_camb3lyp ) = new_funcgroup ([ character ( len = 20 ) :: 'cam-b3lyp' , 'camb3lyp' ]) funcs ( p_camqtp01 ) = new_funcgroup ([ character ( len = 20 ) :: 'cam-qtp01' , & & 'camqtp01' , 'camqtp(01)' , 'cam-qtp(01)' ]) funcs ( p_lcblyp ) = new_funcgroup ([ character ( len = 20 ) :: 'lc-blyp' , 'lcblyp' ]) funcs ( p_lcwpbe ) = new_funcgroup ([ character ( len = 20 ) :: 'lc-wpbe' , & & 'lcwpbe' , 'lc-ωpbe' , 'lcωpbe' , 'lc-omegapbe' , 'lcomegapbe' ]) funcs ( p_lcwpbeh ) = new_funcgroup ([ character ( len = 20 ) :: 'lc-wpbeh' , & & 'lcwpbeh' , 'lc-ωpbeh' , 'lcωpbeh' , 'lc-omegapbeh' , 'lcomegapbeh' ]) end subroutine get_functionals !> Retrieve rational damping parameters from functional name subroutine get_rational_damping_name ( functional , param , s9 ) !DEC$ ATTRIBUTES DLLEXPORT :: get_rational_damping_name !> Functional name for which to retrieve the damping parameters character ( len =* ), intent ( in ) :: functional !> Damping parameters for the functional class ( damping_param ), allocatable , intent ( out ) :: param !> Scaling factor for the three-body term real ( wp ), intent ( in ), optional :: s9 character ( len = :), allocatable :: fname integer :: is , id is = index ( functional , '/' ) if ( is == 0 ) is = len_trim ( functional ) + 1 fname = lowercase ( functional (: is - 1 )) id = get_functional_id ( fname ) call get_rational_damping_id ( id , param , s9 = s9 ) end subroutine get_rational_damping_name !> Retrieve rational damping parameters from functional ID subroutine get_rational_damping_id ( id , param , s9 ) !DEC$ ATTRIBUTES DLLEXPORT :: get_rational_damping_id !> Functional ID for which to retrieve the damping parameters integer , intent ( in ) :: id !> Damping parameters for the functional class ( damping_param ), allocatable , intent ( out ) :: param !> Scaling factor for the three-body term real ( wp ), intent ( in ), optional :: s9 logical :: mbd mbd = . true . if ( present ( s9 )) mbd = abs ( s9 ) > epsilon ( s9 ) if ( mbd ) then call get_d4eeq_bjatm_parameter ( id , param , s9 ) if (. not . allocated ( param )) then call get_d4eeq_bj_parameter ( id , param , s9 ) end if else call get_d4eeq_bj_parameter ( id , param , s9 ) if (. not . allocated ( param )) then call get_d4eeq_bjatm_parameter ( id , param , s9 ) end if end if end subroutine get_rational_damping_id subroutine get_d4eeq_bj_parameter ( dfnum , param , s9 ) integer ( df_enum ), intent ( in ) :: dfnum class ( damping_param ), allocatable , intent ( out ) :: param real ( wp ), intent ( in ), optional :: s9 select case ( dfnum ) case ( p_dftb_3ob ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 0.4727337_wp , a1 = 0.5467502_wp , a2 = 4.4955068_wp ) case ( p_dftb_matsci ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 2.7711819_wp , a1 = 0.4681712_wp , a2 = 5.2918629_wp ) case ( p_dftb_mio ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 1.1948145_wp , a1 = 0.6074567_wp , a2 = 4.9336133_wp ) case ( p_dftb_ob2 ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 2.7611320_wp , a1 = 0.6037249_wp , a2 = 5.3900004_wp ) case ( p_dftb_pbc ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 1.7303734_wp , a1 = 0.5546548_wp , a2 = 4.7973454_wp ) end select contains pure function dftd_param ( s6 , s8 , a1 , a2 , alp ) result ( par ) real ( wp ), intent ( in ) :: s8 , a1 , a2 real ( wp ), intent ( in ), optional :: s6 , alp type ( rational_damping_param ) :: par real ( wp ) :: s6_ , alp_ , s9_ s6_ = 1.0_wp if ( present ( s6 )) s6_ = s6 s9_ = 0.0_wp if ( present ( s9 )) s9_ = s9 alp_ = 1 6.0_wp if ( present ( alp )) alp_ = alp par = rational_damping_param (& & s6 = s6_ , & & s8 = s8 , a1 = a1 , a2 = a2 , & & s9 = s9_ , & & alp = alp_ ) end function dftd_param end subroutine get_d4eeq_bj_parameter subroutine get_d4eeq_bjatm_parameter ( dfnum , param , s9 ) integer ( df_enum ), intent ( in ) :: dfnum class ( damping_param ), allocatable , intent ( out ) :: param real ( wp ), intent ( in ), optional :: s9 select case ( dfnum ) case ( p_b1b95 ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 1.27701162_wp , a1 = 0.40554715_wp , a2 = 4.63323074_wp ) !  Fitset: MD= 0.22852 MAD= 0.35189 RMSD= 0.46982 case ( p_b1lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.98553711_wp , a1 = 0.39309040_wp , a2 = 4.55465145_wp ) !  Fitset: MD= -0.04797 MAD= 0.25597 RMSD= 0.38778 case ( p_b1p ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.36115015_wp , a1 = 0.48665293_wp , a2 = 5.05219572_wp ) !  Fitset: MD= -0.01406 MAD= 0.27441 RMSD= 0.47328 case ( p_b1pw ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 3.02227550_wp , a1 = 0.47396846_wp , a2 = 4.49845309_wp ) !  Fitset: MD= 0.10485 MAD= 0.32175 RMSD= 0.48508 case ( p_b2gpplyp ) param = dftd_param ( & ! (SAW190107) & s6 = 0.5600_wp , s8 = 0.94633372_wp , a1 = 0.42907301_wp , a2 = 5.18802602_wp ) !  Fitset: MD= -0.05248 MAD= 0.18110 RMSD= 0.27365 case ( p_b2plyp ) param = dftd_param ( & ! (SAW190103) & s6 = 0.6400_wp , s8 = 1.16888646_wp , a1 = 0.44154604_wp , a2 = 4.73114642_wp ) !  Fitset: MD= -0.03761 MAD= 0.18247 RMSD= 0.27109 case ( p_b3lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.02929367_wp , a1 = 0.40868035_wp , a2 = 4.53807137_wp ) !  Fitset: MD= -0.05892 MAD= 0.26117 RMSD= 0.40531 case ( p_b3p ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.08822155_wp , a1 = 0.47324238_wp , a2 = 4.98682134_wp ) !  Fitset: MD= -0.02970 MAD= 0.26962 RMSD= 0.46761 case ( p_b3pw ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 2.88364295_wp , a1 = 0.46990860_wp , a2 = 4.51641422_wp ) !  Fitset: MD= 0.06643 MAD= 0.29151 RMSD= 0.45541 case ( p_b97 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.87854260_wp , a1 = 0.29319126_wp , a2 = 4.51647719_wp ) !  Fitset: MD= -0.13017 MAD= 0.24778 RMSD= 0.36116 case ( p_bhlyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.65281646_wp , a1 = 0.27263660_wp , a2 = 5.48634586_wp ) !  Fitset: MD= -0.15832 MAD= 0.34132 RMSD= 0.57342 case ( p_blyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.34076671_wp , a1 = 0.44488865_wp , a2 = 4.09330090_wp ) !  Fitset: MD= 0.04801 MAD= 0.28161 RMSD= 0.38321 case ( p_bpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.64405246_wp , a1 = 0.52905620_wp , a2 = 4.11311891_wp ) !  Fitset: MD= 0.19316 MAD= 0.41912 RMSD= 0.60452 case ( p_bp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.35497927_wp , a1 = 0.43645861_wp , a2 = 4.92406854_wp ) !  Fitset: MD= 0.08252 MAD= 0.32681 RMSD= 0.47063 case ( p_bpw ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.24571506_wp , a1 = 0.50050454_wp , a2 = 4.12346483_wp ) !  Fitset: MD= 0.20607 MAD= 0.41941 RMSD= 0.59589 case ( p_camb3lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.66041301_wp , a1 = 0.40267156_wp , a2 = 5.17432195_wp ) !  Fitset: MD= -0.19675 MAD= 0.34901 RMSD= 0.59087 case ( p_camqtp01 ) param = dftd_param ( & ! (10.1021/acs.jctc.3c00717) & s6 = 1.0000_wp , s8 = 1.156_wp , a1 = 0.461_wp , a2 = 6.375_wp ) case ( p_dodblyp ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4700_wp , s8 = 1.31146043_wp , a1 = 0.43407294_wp , a2 = 4.27914360_wp ) !  Fitset: MD= 0.03323 MAD= 0.13858 RMSD= 0.20861 case ( p_dodpbeb95 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.5600_wp , s8 = 0.01574635_wp , a1 = 0.43745720_wp , a2 = 3.69180763_wp ) !  Fitset: MD= 0.03704 MAD= 0.13343 RMSD= 0.18278 case ( p_dodpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4800_wp , s8 = 0.92051454_wp , a1 = 0.43037052_wp , a2 = 4.38067238_wp ) !  Fitset: MD= 0.01065 MAD= 0.13414 RMSD= 0.21424 case ( p_dodpbep86 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4600_wp , s8 = 0.71405681_wp , a1 = 0.42408665_wp , a2 = 4.52884439_wp ) !  Fitset: MD= -0.03740 MAD= 0.12467 RMSD= 0.18127 case ( p_dodsvwn ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4200_wp , s8 = 0.94500207_wp , a1 = 0.47449026_wp , a2 = 5.05316093_wp ) !  Fitset: MD= -0.07427 MAD= 0.16970 RMSD= 0.25286 case ( p_dsdblyp ) param = dftd_param ( & ! (SAW190103) & s6 = 0.5400_wp , s8 = 0.63018237_wp , a1 = 0.47591835_wp , a2 = 4.73713781_wp ) !  Fitset: MD= -0.01981 MAD= 0.14823 RMSD= 0.21530 case ( p_dsdpbeb95 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.5400_wp , s8 =- 0.14668670_wp , a1 = 0.46394587_wp , a2 = 3.64913860_wp ) !  Fitset: MD= 0.02996 MAD= 0.12414 RMSD= 0.16860 case ( p_dsdpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4500_wp , s8 = 0.70584116_wp , a1 = 0.45787085_wp , a2 = 4.44566742_wp ) !  Fitset: MD= 0.00866 MAD= 0.13406 RMSD= 0.21380 case ( p_dsdpbep86 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4700_wp , s8 = 0.37586675_wp , a1 = 0.53698768_wp , a2 = 5.13022435_wp ) !  Fitset: MD= -0.05273 MAD= 0.14259 RMSD= 0.21271 case ( p_dsdsvwn ) param = dftd_param ( & ! (SAW190103) & s6 = 0.4100_wp , s8 = 0.72914436_wp , a1 = 0.51347412_wp , a2 = 5.11858541_wp ) !  Fitset: MD= -0.08974 MAD= 0.32285 RMSD= 0.43146 case ( p_glyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 4.23798924_wp , a1 = 0.38426465_wp , a2 = 4.38412863_wp ) !  Fitset: MD= 0.63466 MAD= 0.89568 RMSD= 1.11309 case ( p_hf ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.61679827_wp , a1 = 0.44959224_wp , a2 = 3.35743605_wp ) !  Fitset: MD= -0.02597 MAD= 0.34732 RMSD= 0.49719 case ( p_lb94 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.59538499_wp , a1 = 0.42088944_wp , a2 = 3.28193223_wp ) !  Fitset: MD= 0.31701 MAD= 0.53196 RMSD= 0.74553 case ( p_lcblyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.60344180_wp , a1 = 0.45769839_wp , a2 = 7.86924893_wp ) !  Fitset: MD= -0.39724 MAD= 0.72327 RMSD= 1.18218 case ( p_lcwpbe ) param = dftd_param ( & ! (10.1021/acs.jctc.3c00717) & s6 = 1.0000_wp , s8 = 1.170_wp , a1 = 0.378_wp , a2 = 4.816_wp ) case ( p_lcwpbeh ) param = dftd_param ( & ! (10.1021/acs.jctc.3c00717) & s6 = 1.0000_wp , s8 = 1.318_wp , a1 = 0.386_wp , a2 = 5.010_wp ) case ( p_lh07ssvwn ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.16675531_wp , a1 = 0.35965552_wp , a2 = 4.31947614_wp ) !  Fitset: MD= 0.32224 MAD= 0.59006 RMSD= 0.86272 case ( p_lh07tsvwn ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.09333001_wp , a1 = 0.35025189_wp , a2 = 4.34166515_wp ) !  Fitset: MD= 0.24243 MAD= 0.43497 RMSD= 0.61671 case ( p_lh12ctssifpw92 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.68467610_wp , a1 = 0.34190416_wp , a2 = 3.91039666_wp ) !  Fitset: MD= 0.55106 MAD= 0.80783 RMSD= 1.11048 case ( p_lh12ctssirpw92 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.48973402_wp , a1 = 0.34026075_wp , a2 = 3.96948081_wp ) !  Fitset: MD= 0.47785 MAD= 0.71188 RMSD= 0.98422 case ( p_lh14tcalpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.28130770_wp , a1 = 0.38822021_wp , a2 = 4.92501211_wp ) !  Fitset: MD= -0.02105 MAD= 0.22968 RMSD= 0.36045 case ( p_lh20t ) param = dftd_param ( & ! (10.1021/acs.jctc.0c00498) & s6 = 1.000_wp , s8 = 0.113_wp , a1 = 0.479_wp , a2 = 4.635_wp ) case ( p_m06 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.16366729_wp , a1 = 0.53456413_wp , a2 = 6.06192174_wp ) !  Fitset: MD= 0.01788 MAD= 0.24914 RMSD= 0.38604 case ( p_m06l ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.59493760_wp , a1 = 0.71422359_wp , a2 = 6.35314182_wp ) !  Fitset: MD= 0.08395 MAD= 0.24888 RMSD= 0.34879 case ( p_mn12sx ) param = dftd_param ( & ! (SAW211021) & s6 = 1.0000_wp , s8 = 0.85964873_wp , a1 = 0.62662681_wp , a2 = 5.62088906_wp ) !  Fitset: MD= 0.16131 MAD= 0.34142 RMSD= 0.47113 case ( p_mpw1b95 ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 0.50093024_wp , a1 = 0.41585097_wp , a2 = 4.99154869_wp ) !  Fitset: MD= 0.00585 MAD= 0.15695 RMSD= 0.21297 case ( p_mpw1lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.15591153_wp , a1 = 0.25603493_wp , a2 = 5.32083895_wp ) !  Fitset: MD= -0.26979 MAD= 0.41542 RMSD= 0.60678 case ( p_mpw1pw ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.80841716_wp , a1 = 0.42961819_wp , a2 = 4.68892341_wp ) !  Fitset: MD= -0.08840 MAD= 0.26815 RMSD= 0.45231 case ( p_mpw2plyp ) param = dftd_param ( & ! (SAW190107) & s6 = 0.7500_wp , s8 = 0.45788846_wp , a1 = 0.42997704_wp , a2 = 5.07650682_wp ) !  Fitset: MD= -0.18921 MAD= 0.30115 RMSD= 0.44049 case ( p_mpwb1k ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 0.57338313_wp , a1 = 0.44687975_wp , a2 = 5.21266777_wp ) !  Fitset: MD= -0.00870 MAD= 0.17226 RMSD= 0.23614 case ( p_mpwlyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.25842942_wp , a1 = 0.25773894_wp , a2 = 5.02319542_wp ) !  Fitset: MD= -0.24426 MAD= 0.39145 RMSD= 0.54503 case ( p_mpwpw ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.82596836_wp , a1 = 0.34526745_wp , a2 = 4.84620734_wp ) !  Fitset: MD= -0.06278 MAD= 0.27913 RMSD= 0.43988 case ( p_o3lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.75762508_wp , a1 = 0.10348980_wp , a2 = 6.16233282_wp ) !  Fitset: MD= -0.19268 MAD= 0.38577 RMSD= 0.62168 case ( p_olyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 2.74836820_wp , a1 = 0.60184498_wp , a2 = 2.53292167_wp ) !  Fitset: MD= 0.12352 MAD= 0.37113 RMSD= 0.58291 case ( p_opbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 3.06917417_wp , a1 = 0.68267534_wp , a2 = 2.22849018_wp ) !  Fitset: MD= 0.26699 MAD= 0.55308 RMSD= 0.85023 case ( p_pbe0_2 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.5000_wp , s8 = 0.64299082_wp , a1 = 0.76542115_wp , a2 = 5.78578675_wp ) !  Fitset: MD= -0.04260 MAD= 0.21186 RMSD= 0.34045 case ( p_pbe0 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.20065498_wp , a1 = 0.40085597_wp , a2 = 5.02928789_wp ) !  Fitset: MD= -0.17892 MAD= 0.30557 RMSD= 0.51050 case ( p_pbe0_dh ) param = dftd_param ( & ! (SAW190103) & s6 = 0.8750_wp , s8 = 0.96811578_wp , a1 = 0.47592488_wp , a2 = 5.08622873_wp ) !  Fitset: MD= -0.13857 MAD= 0.27919 RMSD= 0.47256 case ( p_pbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.95948085_wp , a1 = 0.38574991_wp , a2 = 4.80688534_wp ) !  Fitset: MD= -0.20544 MAD= 0.33635 RMSD= 0.51168 case ( p_pbesol ) param = dftd_param ( & ! (SAW211021) & s6 = 1.0000_wp , s8 = 1.71885698_wp , a1 = 0.47901421_wp , a2 = 5.96771589_wp ) !  Fitset: MD= -0.28899 MAD= 0.52215 RMSD= 0.93584 case ( p_am05 ) param = dftd_param ( & ! (SAW211021) & s6 = 1.0000_wp , s8 = 1.71885838_wp , a1 = 0.47901431_wp , a2 = 5.96771581_wp ) !  Fitset: MD= -0.28899 MAD= 0.52215 RMSD= 0.93584 case ( p_pw1pw ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.96850170_wp , a1 = 0.42427511_wp , a2 = 5.02060636_wp ) !  Fitset: MD= -0.27325 MAD= 0.42206 RMSD= 0.64119 case ( p_pw6b95 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 =- 0.31926054_wp , a1 = 0.04142919_wp , a2 = 5.84655608_wp ) !  Fitset: MD= -0.04767 MAD= 0.14330 RMSD= 0.18958 case ( p_pw86pbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.21362856_wp , a1 = 0.40510366_wp , a2 = 4.66737724_wp ) !  Fitset: MD= -0.11505 MAD= 0.24691 RMSD= 0.38101 case ( p_pw91 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.77283111_wp , a1 = 0.39581542_wp , a2 = 4.93405761_wp ) !  Fitset: MD= -0.33019 MAD= 0.48611 RMSD= 0.68110 case ( p_pwp1 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.60492565_wp , a1 = 0.46855837_wp , a2 = 5.76921413_wp ) !  Fitset: MD= -0.35321 MAD= 0.54026 RMSD= 0.86629 case ( p_pwpb95 ) param = dftd_param ( & ! (SAW190103) & s6 = 0.8200_wp , s8 =- 0.34639127_wp , a1 = 0.41080636_wp , a2 = 3.83878274_wp ) !  Fitset: MD= 0.02143 MAD= 0.13040 RMSD= 0.17599 case ( p_pwp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 0.32801227_wp , a1 = 0.35874687_wp , a2 = 6.05861168_wp ) !  Fitset: MD= -0.42482 MAD= 0.62607 RMSD= 0.91840 case ( p_revpbe0 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.57185414_wp , a1 = 0.38705966_wp , a2 = 4.11028876_wp ) !  Fitset: MD= 0.02724 MAD= 0.21587 RMSD= 0.36040 case ( p_revpbe0dh ) param = dftd_param ( & ! (SAW190103) & s6 = 0.8750_wp , s8 = 1.24456037_wp , a1 = 0.36730560_wp , a2 = 4.71126482_wp ) !  Fitset: MD= -0.01089 MAD= 0.20910 RMSD= 0.33564 case ( p_revpbe38 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.66597472_wp , a1 = 0.39476833_wp , a2 = 4.39026628_wp ) !  Fitset: MD= -0.01326 MAD= 0.22598 RMSD= 0.36210 case ( p_revpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.74676530_wp , a1 = 0.53634900_wp , a2 = 3.07261485_wp ) !  Fitset: MD= 0.05649 MAD= 0.25212 RMSD= 0.40863 case ( p_revtpss0 ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 1.54664499_wp , a1 = 0.45890964_wp , a2 = 4.78426405_wp ) !  Fitset: MD= -0.05298 MAD= 0.19965 RMSD= 0.32081 case ( p_revtpss ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.53089454_wp , a1 = 0.44880597_wp , a2 = 4.64042317_wp ) !  Fitset: MD= -0.01904 MAD= 0.19568 RMSD= 0.29618 case ( p_revtpssh ) param = dftd_param ( & ! (SAW190107) & s6 = 1.0000_wp , s8 = 1.52740307_wp , a1 = 0.45161957_wp , a2 = 4.70779483_wp ) !  Fitset: MD= -0.03731 MAD= 0.19133 RMSD= 0.29091 case ( p_rpbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.31183787_wp , a1 = 0.46169493_wp , a2 = 3.15711757_wp ) !  Fitset: MD= -0.07156 MAD= 0.26348 RMSD= 0.38671 case ( p_rpw86pbe ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.12624034_wp , a1 = 0.38151218_wp , a2 = 4.75480472_wp ) !  Fitset: MD= -0.12740 MAD= 0.26294 RMSD= 0.40614 case ( p_scan ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.46126056_wp , a1 = 0.62930855_wp , a2 = 6.31284039_wp ) !  Fitset: MD= -0.13170 MAD= 0.28640 RMSD= 0.51183 case ( p_rscan ) param = dftd_param ( & ! (10.1063/5.0041008) & s6 = 1.0000_wp , s8 = 0.87728975_wp , a1 = 0.49116966_wp , a2 = 5.75859346_wp ) case ( p_r2scan ) param = dftd_param ( & ! (10.1063/5.0041008) & s6 = 1.0000_wp , s8 = 0.60187490_wp , a1 = 0.51559235_wp , a2 = 5.77342911_wp ) case ( p_r2scanh ) param = dftd_param ( & ! (10.1063/5.0086040) & s6 = 1.0_wp , s8 = 0.8324_wp , a1 = 0.4944_wp , a2 = 5.9019_wp ) case ( p_r2scan0 ) param = dftd_param ( & ! (10.1063/5.0086040) & s6 = 1.0_wp , s8 = 0.8992_wp , a1 = 0.4778_wp , a2 = 5.8779_wp ) case ( p_r2scan50 ) param = dftd_param ( & ! (10.1063/5.0086040) & s6 = 1.0_wp , s8 = 1.0471_wp , a1 = 0.4574_wp , a2 = 5.8969_wp ) case ( p_r2scan_3c ) param = dftd_param ( & ! (10.1063/5.0040021) & s6 = 1.0_wp , s8 = 0.00_wp , a1 = 0.42_wp , a2 = 5.65_wp ) case ( p_tpss0 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.62438102_wp , a1 = 0.40329022_wp , a2 = 4.80537871_wp ) !  Fitset: MD= -0.09569 MAD= 0.26733 RMSD= 0.44767 case ( p_tpss ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.76596355_wp , a1 = 0.42822303_wp , a2 = 4.54257102_wp ) !  Fitset: MD= -0.09296 MAD= 0.27505 RMSD= 0.42537 case ( p_tpssh ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.85897750_wp , a1 = 0.44286966_wp , a2 = 4.60230534_wp ) !  Fitset: MD=  0.02238 MAD= 0.16042 RMSD= 0.33519 case ( p_b97d ) param = dftd_param ( & ! (SAW201029) & s6 = 1.0000_wp , s8 = 1.69460052_wp , a1 = 0.28904684_wp , a2 = 4.13407323_wp ) !  Fitset: MD= -0.09858 MAD= 0.26757 RMSD= 0.42380 case ( p_wb97 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 6.55792598_wp , a1 = 0.76666802_wp , a2 = 8.36027334_wp ) !  Fitset: MD= -0.12779 MAD= 0.36152 RMSD= 0.49991 case ( p_wb97x_2008 ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 =- 0.07519516_wp , a1 = 0.45094893_wp , a2 = 6.78425255_wp ) !  S22x5: MD= 0.05 MAD= 0.16 RMSD= 0.22 !  S66x8: MD= 0.06 MAD= 0.16 RMSD= 0.21 !  NCI10: MD= 0.08 MAD= 0.15 RMSD= 0.25 case ( p_wb97x ) param = dftd_param ( & ! (10.1002/jcc.26411) & s6 = 1.0000_wp , s8 = 0.5093_wp , a1 = 0.0662_wp , a2 = 5.4487_wp ) case ( p_wb97x_rev ) param = dftd_param ( & ! (10.1063/5.0133026) & s6 = 1.0000_wp , s8 = 0.4485_wp , a1 = 0.3306_wp , a2 = 4.279_wp ) case ( p_wb97x_3c ) param = dftd_param ( & ! (10.1063/5.0133026) & s6 = 1.0000_wp , s8 = 0.0_wp , a1 = 0.2464_wp , a2 = 4.737_wp ) case ( p_b97m ) param = dftd_param ( & ! (10.1002/jcc.26411) & s6 = 1.0000_wp , s8 = 0.6633_wp , a1 = 0.4288_wp , a2 = 3.9935_wp ) !  S22x5: MD= 0.03 MAD= 0.12 RMSD= 0.18 !  S66x8: MD= 0.09 MAD= 0.17 RMSD= 0.22 !  NCI10: MD= 0.09 MAD= 0.15 RMSD= 0.32 case ( p_wb97m ) param = dftd_param ( & ! (10.1002/jcc.26411) & s6 = 1.0000_wp , s8 = 0.7761_wp , a1 = 0.7514_wp , a2 = 2.7099_wp ) !  Fitset: MD= -0.20216 MAD= 0.34696 RMSD= 0.53641 case ( p_wb97m_rev ) param = dftd_param ( & ! (10.1021/acs.jctc.3c00717) & s6 = 1.0000_wp , s8 = 0.842_wp , a1 = 0.359_wp , a2 = 4.668_wp ) case ( p_x3lyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.54701429_wp , a1 = 0.20318443_wp , a2 = 5.61852648_wp ) !  Fitset: MD= -0.15607 MAD= 0.31342 RMSD= 0.49546 case ( p_xlyp ) param = dftd_param ( & ! (SAW190103) & s6 = 1.0000_wp , s8 = 1.62972054_wp , a1 = 0.11268673_wp , a2 = 5.40786417_wp ) !  Fitset: MD= -0.03900 MAD= 0.27562 RMSD= 0.38491 case ( p_revdsdpbep86 ) param = dftd_param ( & ! (WTMAD2) & s6 = 0.5132_wp , s8 = 0.00000000_wp , a1 = 0.44000000_wp , a2 = 3.60000000_wp ) case ( p_revdsdpbe ) param = dftd_param ( & ! (WTMAD2) & s6 = 0.6706_wp , s8 = 0.00000000_wp , a1 = 0.40000000_wp , a2 = 3.60000000_wp ) case ( p_revdsdblyp ) param = dftd_param ( & !(WTMAD2) & s6 = 0.6141_wp , s8 = 0.00000000_wp , a1 = 0.38000000_wp , a2 = 3.52000000_wp ) case ( p_revdodpbep86 ) param = dftd_param ( & !(WTMAD2) & s6 = 0.5552_wp , s8 = 0.00000000_wp , a1 = 0.44000000_wp , a2 = 3.60000000_wp ) case ( p_dftb_3ob ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 0.6635015_wp , a1 = 0.5523240_wp , a2 = 4.3537076_wp ) case ( p_dftb_matsci ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 3.3157614_wp , a1 = 0.4826330_wp , a2 = 5.3811976_wp ) case ( p_dftb_mio ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 1.2916225_wp , a1 = 0.5965326_wp , a2 = 4.8778602_wp ) case ( p_dftb_ob2 ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 2.9692689_wp , a1 = 0.6068916_wp , a2 = 5.4476789_wp ) case ( p_dftb_pbc ) param = dftd_param ( & ! (SAW191202) & s6 = 1.0_wp , s8 = 2.1667394_wp , a1 = 0.5646391_wp , a2 = 4.9576353_wp ) case ( p_hse03 ) param = dftd_param ( & ! (SAW211107) & s6 = 1.0_wp , s8 = 1.19812280_wp , a1 = 0.38662939_wp , a2 = 5.22925796_wp ) case ( p_hse06 ) param = dftd_param ( & ! (SAW211107) & s6 = 1.0_wp , s8 = 1.19528249_wp , a1 = 0.38663183_wp , a2 = 5.19133469_wp ) case ( p_hse12 ) param = dftd_param ( & ! (SAW211107) & s6 = 1.0_wp , s8 = 1.23500792_wp , a1 = 0.39226921_wp , a2 = 5.22036266_wp ) case ( p_hse12s ) param = dftd_param ( & ! (SAW211107) & s6 = 1.0_wp , s8 = 1.23767762_wp , a1 = 0.39989137_wp , a2 = 5.34809245_wp ) case ( p_hsesol ) param = dftd_param ( & ! (SAW211107) & s6 = 1.0_wp , s8 = 1.82207807_wp , a1 = 0.45646268_wp , a2 = 5.59662251_wp ) case ( p_wr2scan ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 1.0_wp , s8 = 1.0_wp , a1 = 0.3834_wp , a2 = 5.7889_wp ) case ( p_r2scan0_dh ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.9424_wp , s8 = 0.3856_wp , a1 = 0.4271_wp , a2 = 5.8565_wp ) case ( p_r2scan_cidh ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.8666_wp , s8 = 0.5336_wp , a1 = 0.4171_wp , a2 = 5.9125_wp ) case ( p_r2scan_qidh ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.7867_wp , s8 = 0.2955_wp , a1 = 0.4001_wp , a2 = 5.8300_wp ) case ( p_r2scan0_2 ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.7386_wp , s8 = 0.0000_wp , a1 = 0.4030_wp , a2 = 5.5142_wp ) case ( p_pr2scan50 ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.7964_wp , s8 = 0.3421_wp , a1 = 0.4663_wp , a2 = 5.7916_wp ) case ( p_pr2scan69 ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.7167_wp , s8 = 0.0000_wp , a1 = 0.4644_wp , a2 = 5.2563_wp ) case ( p_kpr2scan50 ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.8402_wp , s8 = 0.1212_wp , a1 = 0.4382_wp , a2 = 5.8232_wp ) case ( p_wpr2scan50 ) ! (10.1063/5.0174988) param = dftd_param ( & & s6 = 0.8143_wp , s8 = 0.3842_wp , a1 = 0.4135_wp , a2 = 5.8773_wp ) end select contains pure function dftd_param ( s6 , s8 , a1 , a2 , alp ) result ( par ) real ( wp ), intent ( in ) :: s8 , a1 , a2 real ( wp ), intent ( in ), optional :: s6 , alp type ( rational_damping_param ) :: par real ( wp ) :: s6_ , alp_ , s9_ s6_ = 1.0_wp if ( present ( s6 )) s6_ = s6 s9_ = 1.0_wp if ( present ( s9 )) s9_ = s9 alp_ = 1 6.0_wp if ( present ( alp )) alp_ = alp par = rational_damping_param (& & s6 = s6_ , & & s8 = s8 , a1 = a1 , a2 = a2 , & & s9 = s9_ , & & alp = alp_ ) end function dftd_param end subroutine get_d4eeq_bjatm_parameter !> Get the unique identifier for most functionals, returns none if !> the functional was not known at the time I implemented this mapping pure function get_functional_id ( df ) result ( num ) integer ( df_enum ) :: num character ( len =* ), intent ( in ) :: df select case ( df ) case default num = p_invalid case ( 'hf' ) num = p_hf case ( 'am05' , 'gga_x_am05:gga_c_am05' ) num = p_am05 case ( 'b-lyp' , 'blyp' , 'gga_x_b88:gga_c_lyp' ) num = p_blyp case ( 'bpbe' , 'gga_x_b88:gga_c_pbe' ) num = p_bpbe case ( 'b-p' , 'bp86' , 'bp' , 'b-p86' , 'gga_x_b88:gga_c_p86' ) num = p_bp case ( 'bpw' , 'b-pw' , 'gga_x_b88:gga_c_pw91' ) num = p_bpw case ( 'lb94' , 'gga_x_lb' ) ! no gga_c_lb num = p_lb94 case ( 'mpwlyp' , 'mpw-lyp' , 'gga_x_mpw91:gga_c_lyp' ) num = p_mpwlyp case ( 'mpwpw' , 'mpw-pw' , 'mpwpw91' , 'gga_x_mpw91:gga_c_pw91' ) num = p_mpwpw case ( 'o-lyp' , 'olyp' , 'gga_x_optx:gga_c_lyp' ) num = p_olyp case ( 'opbe' , 'gga_x_optx:gga_c_pbe' ) num = p_opbe case ( 'pbe' , 'gga_x_pbe:gga_c_pbe' ) num = p_pbe case ( 'rpbe' , 'gga_x_rpbe:gga_c_pbe' ) num = p_rpbe case ( 'revpbe' , 'gga_x_pbe_r:gga_c_pbe' ) num = p_revpbe case ( 'pbesol' , 'gga_x_pbe_sol:gga_c_pbe_sol' ) num = p_pbesol case ( 'pw86pbe' , 'gga_x_pw86:gga_c_pbe' ) num = p_pw86pbe case ( 'rpw86pbe' , 'gga_x_rpw86:gga_c_pbe' ) num = p_rpw86pbe case ( 'pw91' , 'gga_x_pw91:gga_c_pw91' ) num = p_pw91 case ( 'pwp' , 'pw-p' , 'pw91p86' , 'gga_x_pw91:gga_c_p86' ) num = p_pwp case ( 'x-lyp' , 'xlyp' , 'gga_xc_xlyp' ) num = p_xlyp case ( 'b97' , 'hyb_gga_xc_b97' ) num = p_b97 case ( 'b97d' , 'gga_xc_b97_d' ) num = p_b97d case ( 'tpss' , 'mgga_c_tpss:mgga_x_tpss' ) num = p_tpss case ( 'revtpss' , 'mgga_c_revtpss:mgga_x_revtpss' ) num = p_revtpss case ( 'scan' , 'mgga_x_scan:mgga_c_scan' ) num = p_scan case ( 'rscan' , 'mgga_x_rscan:mgga_c_rscan' ) num = p_rscan case ( 'r2scan' , 'r²scan' , 'mgga_x_r2scan:mgga_c_r2scan' ) num = p_r2scan case ( 'r2scanh' , 'r²scanh' , 'hyb_mgga_xc_r2scanh' ) num = p_r2scanh case ( 'r2scan0' , 'r²scan0' , 'hyb_mgga_xc_r2scan0' ) num = p_r2scan0 case ( 'r2scan50' , 'r²scan50' , 'hyb_mgga_xc_r2scan50' ) num = p_r2scan50 case ( 'r2scan-3c' , 'r²scan-3c' , 'r2scan_3c' , 'r²scan_3c' , 'r2scan3c' ) num = p_r2scan_3c case ( 'b1lyp' , 'b1-lyp' , 'hyb_gga_xc_b1lyp' ) num = p_b1lyp case ( 'b3-lyp' , 'b3lyp' , 'hyb_gga_xc_b3lyp' , 'hyb_gga_xc_b3lyp3' , 'hyb_gga_xc_b3lyp5' ) num = p_b3lyp case ( 'bh-lyp' , 'bhlyp' , 'hyb_gga_xc_bhandh' , 'hyb_gga_xc_bhandhlyp' ) num = p_bhlyp case ( 'b1p' , 'b1-p' , 'b1p86' ) ! 0.75 b88 + 0.25 hf; p86 (nonloc) + pw81 (loc) num = p_b1p case ( 'b3p' , 'b3-p' , 'b3p86' , 'hyb_gga_xc_b3p86' , 'hyb_gga_xc_b3p86_nwchem' ) num = p_b3p case ( 'b1pw' , 'b1-pw' , 'b1pw91' , 'hyb_gga_xc_b1pw91' ) num = p_b1pw case ( 'b3pw' , 'b3-pw' , 'b3pw91' , 'hyb_gga_xc_b3pw91' ) num = p_b3pw case ( 'o3-lyp' , 'o3lyp' , 'hyb_gga_xc_o3lyp' ) num = p_o3lyp case ( 'revpbe0' ) ! no libxc num = p_revpbe0 case ( 'revpbe38' ) ! no libxc num = p_revpbe38 case ( 'pbe0' , 'hyb_gga_xc_pbeh' ) num = p_pbe0 case ( 'pwp1' ) ! no libxc num = p_pwp1 case ( 'pw1pw' , 'pw1-pw' ) ! no libxc num = p_pw1pw case ( 'mpw1pw' , 'mpw1-pw' , 'mpw1pw91' , 'hyb_gga_xc_mpw1pw' ) num = p_mpw1pw case ( 'mpw1lyp' , 'mpw1-lyp' , 'hyb_gga_xc_mpw1lyp' ) num = p_mpw1lyp case ( 'pw6b95' , 'hyb_mgga_xc_pw6b95' ) num = p_pw6b95 case ( 'tpssh' , 'hyb_mgga_xc_tpssh' ) num = p_tpssh case ( 'tpss0' , 'hyb_mgga_xc_tpss0' ) num = p_tpss0 case ( 'x3-lyp' , 'x3lyp' , 'hyb_gga_xc_x3lyp' ) num = p_x3lyp case ( 'm06' , 'mgga_x_m06:mgga_c_m06' ) num = p_m06 case ( 'm06l' , 'mgga_x_m06_l:mgga_c_m06_l' ) num = p_m06l case ( 'mn12sx' , 'mn12-sx' , 'mgga_c_mn12_sx:mgga_c_mn12_sx' ) num = p_mn12sx case ( 'cam-b3lyp' , 'camb3lyp' , 'hyb_gga_xc_cam_b3lyp' ) num = p_camb3lyp case ( 'cam-qtp01' , 'camqtp01' , 'camqtp(01)' , 'cam-qtp(01)' , & & 'hyb_gga_xc_cam_qtp_01' ) num = p_camqtp01 case ( 'lc-blyp' , 'lcblyp' , 'hyb_gga_xc_lc_blyp' ) num = p_lcblyp case ( 'lc-wpbe' , 'lcwpbe' , 'lc-ωpbe' , 'lcωpbe' , 'lc-omegapbe' , 'lcomegapbe' , & & 'hyb_gga_xc_lc_wpbe' , 'hyb_gga_xc_lc_wpbe08_whs' , & & 'hyb_gga_xc_lc_wpbe_whs' , 'hyb_gga_xc_lrc_wpbe' ) num = p_lcwpbe case ( 'lc-wpbeh' , 'lcwpbeh' , 'lc-ωpbeh' , 'lcωpbeh' , 'lc-omegapbeh' , & & 'lcomegapbeh' , 'hyb_gga_xc_lc_wpbeh_whs' , 'hyb_gga_xc_lrc_wpbeh' ) num = p_lcwpbeh case ( 'lh07tsvwn' , 'lh07t-svwn' ) ! no libxc num = p_lh07tsvwn case ( 'lh07ssvwn' , 'lh07s-svwn' ) ! no libxc num = p_lh07ssvwn case ( 'lh12ctssirpw92' , 'lh12ct-ssirpw92' ) ! no libxc num = p_lh12ctssirpw92 case ( 'lh12ctssifpw92' , 'lh12ct-ssifpw92' ) ! no libxc num = p_lh12ctssifpw92 case ( 'lh14tcalpbe' , 'lh14t-calpbe' ) ! no libxc num = p_lh14tcalpbe case ( 'lh20t' ) ! no libxc num = p_lh20t case ( 'b2plyp' , 'b2-plyp' , 'xc_hyb_gga_xc_b2plyp' ) ! only in code num = p_b2plyp case ( 'b2gpplyp' , 'b2gp-plyp' , 'xc_hyb_gga_xc_b2gpplyp' ) ! only in code num = p_b2gpplyp case ( 'mpw2plyp' ) ! no libxc num = p_mpw2plyp case ( 'pwpb95' ) ! no libxc num = p_pwpb95 case ( 'dsdblyp' , 'dsd-blyp' ) ! no libxc num = p_dsdblyp case ( 'dsdpbe' , 'dsd-pbe' ) ! no libxc num = p_dsdpbe case ( 'dsdpbeb95' , 'dsd-pbeb95' ) ! no libxc num = p_dsdpbeb95 case ( 'dsdpbep86' , 'dsd-pbep86' ) ! no libxc num = p_dsdpbep86 case ( 'dsdsvwn' , 'dsd-svwn' ) ! no libxc num = p_dsdsvwn case ( 'dodblyp' , 'dod-blyp' ) ! no libxc num = p_dodblyp case ( 'dodpbe' , 'dod-pbe' ) ! no libxc num = p_dodpbe case ( 'dodpbeb95' , 'dod-pbeb95' ) ! no libxc num = p_dodpbeb95 case ( 'dodpbep86' , 'dod-pbep86' ) ! no libxc num = p_dodpbep86 case ( 'dodsvwn' , 'dod-svwn' ) ! no libxc num = p_dodsvwn case ( 'pbe02' , 'pbe0-2' ) ! no libxc num = p_pbe0_2 case ( 'pbe0dh' , 'pbe0-dh' ) ! no libxc num = p_pbe0_dh case ( 'dftb3' , 'dftb(3ob)' ) ! no libxc num = p_dftb_3ob case ( 'dftb(mio)' ) ! no libxc num = p_dftb_mio case ( 'dftb(pbc)' ) ! no libxc num = p_dftb_pbc case ( 'dftb(matsci)' ) ! no libxc num = p_dftb_matsci case ( 'lc-dftb' , 'dftb(ob2)' ) ! no libxc num = p_dftb_ob2 case ( 'b1b95' , 'hyb_mgga_xc_b88b95' ) num = p_b1b95 case ( 'mpwb1k' , 'hyb_mgga_xc_mpwb1k' ) num = p_mpwb1k case ( 'mpw1b95' , 'hyb_mgga_xc_mpw1b95' ) num = p_mpw1b95 case ( 'hse03' , 'hyb_gga_xc_hse03' ) num = p_hse03 case ( 'hse06' , 'hyb_gga_xc_hse06' ) num = p_hse06 case ( 'hse12' , 'hyb_gga_xc_hse12' ) num = p_hse12 case ( 'hse12s' , 'hyb_gga_xc_hse12s' ) num = p_hse12s case ( 'hsesol' , 'hyb_gga_xc_hse_sol' ) num = p_hsesol case ( 'glyp' , 'g-lyp' , 'gga_x_g96:gga_c_lyp' ) num = p_glyp case ( 'revpbe0dh' , 'revpbe0-dh' ) ! no libxc num = p_revpbe0dh case ( 'revtpssh' , 'hyb_mgga_xc_revtpssh' ) num = p_revtpssh case ( 'revtpss0' ) ! no libxc num = p_revtpss0 case ( 'revdsd-pbep86' , 'revdsdpbep86' ) ! no libxc num = p_revdsdpbep86 case ( 'revdsd-pbe' , 'revdsd-pbepbe' , 'revdsdpbe' , 'revdsdpbepbe' ) ! no libxc num = p_revdsdpbe case ( 'revdsd-blyp' , 'revdsdblyp' ) ! no libxc num = p_revdsdblyp case ( 'revdod-pbep86' , 'revdodpbep86' ) ! no libxc num = p_revdodpbep86 case ( 'b97m' , 'mgga_xc_b97m_v' ) num = p_b97m case ( 'wb97m' , 'ωb97m' , 'omegab97m' , 'hyb_mgga_xc_wb97m_v' ) num = p_wb97m case ( 'wb97m-rev' , 'ωb97m-rev' , 'omegab97m-rev' , 'wb97m_rev' , 'ωb97m_rev' , & & 'omegab97m_rev' ) ! D4 re-parametrization num = p_wb97m_rev case ( 'wb97' , 'ωb97' , 'omegab97' , 'hyb_gga_xc_wb97' ) num = p_wb97 case ( 'wb97x-2008' , 'ωb97x-2008' , 'omegab97x-2008' , 'hyb_gga_xc_wb97x' , & & 'wb97x_2008' , 'ωb97x_2008' , 'omegab97x_2008' ) num = p_wb97x_2008 case ( 'wb97x' , 'ωb97x' , 'omegab97x' , 'hyb_gga_xc_wb97x_v' ) num = p_wb97x case ( 'wb97x-rev' , 'ωb97x-rev' , 'omegab97x-rev' , 'wb97x_rev' , 'ωb97x_rev' , & & 'omegab97x_rev' ) ! D4 re-parametrization num = p_wb97x_rev case ( 'wb97x-3c' , 'ωb97x-3c' , 'omegab97x-3c' , 'wb97x_3c' , 'ωb97x_3c' , & & 'omegab97x_3c' ) ! no libxc num = p_wb97x_3c case ( 'wr2scan' , 'wr²scan' ) ! no libxc num = p_wr2scan case ( 'r2scan0-dh' , 'r²scan0-dh' , 'r2scan0dh' , 'r²scan0dh' ) ! no libxc num = p_r2scan0_dh case ( 'r2scan-cidh' , 'r²scan-cidh' , 'r2scancidh' , 'r²scancidh' ) ! no libxc num = p_r2scan_cidh case ( 'r2scan-qidh' , 'r²scan-qidh' , 'r2scanqidh' , 'r²scanqidh' ) ! no libxc num = p_r2scan_qidh case ( 'r2scan0-2' , 'r²scan0-2' , 'r2scan02' , 'r²scan02' ) ! no libxc num = p_r2scan0_2 case ( 'pr2scan50' , 'pr²scan50' ) ! no libxc num = p_pr2scan50 case ( 'pr2scan69' , 'pr²scan69' ) ! no libxc num = p_pr2scan69 case ( 'kpr2scan50' , 'kpr²scan50' ) ! no libxc num = p_kpr2scan50 case ( 'wpr2scan50' , 'wpr²scan50' ) ! no libxc num = p_wpr2scan50 end select end function get_functional_id end module dftd4_param","tags":"","url":"sourcefile/param.f90.html"},{"title":"ncoord.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_ncoord use , intrinsic :: iso_fortran_env , only : error_unit use mctc_env , only : error_type , wp use mctc_io , only : structure_type use mctc_ncoord , only : ncoord_type , new_ncoord , cn_count implicit none private public :: get_coordination_number , add_coordination_number_derivs !> Steepness of counting function real ( wp ), parameter :: default_kcn = 7.5_wp contains !> Geometric fractional coordination number, supports error function counting. subroutine get_coordination_number ( mol , trans , cutoff , rcov , en , cn , dcndr , dcndL ) !DEC$ ATTRIBUTES DLLEXPORT :: get_coordination_number !> Molecular structure data type ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Covalent radius real ( wp ), intent ( in ) :: rcov (:) !> Electronegativity real ( wp ), intent ( in ) :: en (:) !> Error function coordination number. real ( wp ), intent ( out ) :: cn (:) !> Derivative of the CN with respect to the Cartesian coordinates. real ( wp ), intent ( out ), optional :: dcndr (:, :, :) !> Derivative of the CN with respect to strain deformations. real ( wp ), intent ( out ), optional :: dcndL (:, :, :) class ( ncoord_type ), allocatable :: ncoord type ( error_type ), allocatable :: error call new_ncoord ( ncoord , mol , cn_count % dftd4 , & & kcn = default_kcn , cutoff = cutoff , rcov = rcov , en = en , error = error ) if ( allocated ( error )) then write ( error_unit , '(\"[Error]:\", 1x, a)' ) error % message error stop end if call ncoord % get_coordination_number ( mol , trans , cn , dcndr , dcndL ) end subroutine get_coordination_number subroutine add_coordination_number_derivs ( mol , trans , cutoff , rcov , en , dEdcn , gradient , sigma ) !> Molecular structure data type ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Covalent radius real ( wp ), intent ( in ) :: rcov (:) !> Electronegativity real ( wp ), intent ( in ) :: en (:) !> Derivative of expression with respect to the coordination number real ( wp ), intent ( in ) :: dEdcn (:) !> Derivative of the CN with respect to the Cartesian coordinates real ( wp ), intent ( inout ) :: gradient (:, :) !> Derivative of the CN with respect to strain deformations real ( wp ), intent ( inout ) :: sigma (:, :) class ( ncoord_type ), allocatable :: ncoord type ( error_type ), allocatable :: error call new_ncoord ( ncoord , mol , cn_count % dftd4 , & & kcn = default_kcn , cutoff = cutoff , rcov = rcov , en = en , error = error ) if ( allocated ( error )) then write ( error_unit , '(\"[Error]:\", 1x, a)' ) error % message error stop end if call ncoord % add_coordination_number_derivs ( mol , trans , dEdcn , gradient , sigma ) end subroutine add_coordination_number_derivs end module dftd4_ncoord","tags":"","url":"sourcefile/ncoord.f90.html"},{"title":"atm.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Implementation of the Axilrod-Teller-Muto triple dipole dispersion !> contribution with a modified zero (Chai--Head-Gordon) damping together !> with the critical radii from the rational (Becke--Johnson) damping. module dftd4_damping_atm use mctc_env , only : wp use mctc_io , only : structure_type implicit none public :: get_atm_dispersion contains !> Evaluation of the dispersion energy expression subroutine get_atm_dispersion ( mol , trans , cutoff , s9 , a1 , a2 , alp , r4r2 , & & c6 , dc6dcn , dc6dq , energy , dEdcn , dEdq , gradient , sigma ) !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Scaling for dispersion coefficients real ( wp ), intent ( in ) :: s9 !> Scaling parameter for critical radius real ( wp ), intent ( in ) :: a1 !> Offset parameter for critical radius real ( wp ), intent ( in ) :: a2 !> Exponent of zero damping function real ( wp ), intent ( in ) :: alp !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ), optional :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ), optional :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ), optional :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ), optional :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ), optional :: sigma (:, :) logical :: grad if ( abs ( s9 ) < epsilon ( 1.0_wp )) return grad = present ( dc6dcn ) . and . present ( dEdcn ) . and . present ( dc6dq ) & & . and . present ( dEdq ) . and . present ( gradient ) . and . present ( sigma ) if ( grad ) then call get_atm_dispersion_derivs ( mol , trans , cutoff , s9 , a1 , a2 , alp , r4r2 , & & c6 , dc6dcn , dc6dq , energy , dEdcn , dEdq , gradient , sigma ) else call get_atm_dispersion_energy ( mol , trans , cutoff , s9 , a1 , a2 , alp , r4r2 , & & c6 , energy ) end if end subroutine get_atm_dispersion !> Evaluation of the dispersion energy expression subroutine get_atm_dispersion_energy ( mol , trans , cutoff , s9 , a1 , a2 , alp , r4r2 , & & c6 , energy ) !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Scaling for dispersion coefficients real ( wp ), intent ( in ) :: s9 !> Scaling parameter for critical radius real ( wp ), intent ( in ) :: a1 !> Offset parameter for critical radius real ( wp ), intent ( in ) :: a2 !> Exponent of zero damping function real ( wp ), intent ( in ) :: alp !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) integer :: iat , jat , kat , izp , jzp , kzp , jtr , ktr real ( wp ) :: vij ( 3 ), vjk ( 3 ), vik ( 3 ), r2ij , r2jk , r2ik , c6ij , c6jk , c6ik , triple real ( wp ) :: r0ij , r0jk , r0ik , r0 , r1 , r2 , r3 , r5 , rr , fdmp , ang real ( wp ) :: cutoff2 , c9 , dE ! Thread-private arrays for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:) cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, trans, c6, s9, a1, a2, alp, r4r2, cutoff2) & !$omp private(iat, jat, kat, izp, jzp, kzp, jtr, ktr, vij, vjk, vik, & !$omp& r2ij, r2jk, r2ik, c6ij, c6jk, c6ik, triple, r0ij, r0jk, r0ik, r0, & !$omp& r1, r2, r3, r5, rr, fdmp, ang, c9, dE) & !$omp shared(energy) & !$omp private(energy_local) allocate ( energy_local ( size ( energy , 1 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) c6ij = c6 ( jat , iat ) r0ij = a1 * sqrt ( 3 * r4r2 ( jzp ) * r4r2 ( izp )) + a2 do jtr = 1 , size ( trans , 2 ) vij (:) = mol % xyz (:, jat ) + trans (:, jtr ) - mol % xyz (:, iat ) r2ij = vij ( 1 ) * vij ( 1 ) + vij ( 2 ) * vij ( 2 ) + vij ( 3 ) * vij ( 3 ) if ( r2ij > cutoff2 . or . r2ij < epsilon ( 1.0_wp )) cycle do kat = 1 , jat kzp = mol % id ( kat ) c6ik = c6 ( kat , iat ) c6jk = c6 ( kat , jat ) c9 = - s9 * sqrt ( abs ( c6ij * c6ik * c6jk )) r0ik = a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( izp )) + a2 r0jk = a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( jzp )) + a2 r0 = r0ij * r0ik * r0jk triple = triple_scale ( iat , jat , kat ) do ktr = 1 , size ( trans , 2 ) vik (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, iat ) r2ik = vik ( 1 ) * vik ( 1 ) + vik ( 2 ) * vik ( 2 ) + vik ( 3 ) * vik ( 3 ) if ( r2ik > cutoff2 . or . r2ik < epsilon ( 1.0_wp )) cycle vjk (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, jat ) & & - trans (:, jtr ) r2jk = vjk ( 1 ) * vjk ( 1 ) + vjk ( 2 ) * vjk ( 2 ) + vjk ( 3 ) * vjk ( 3 ) if ( r2jk > cutoff2 . or . r2jk < epsilon ( 1.0_wp )) cycle r2 = r2ij * r2ik * r2jk r1 = sqrt ( r2 ) r3 = r2 * r1 r5 = r3 * r2 fdmp = 1.0_wp / ( 1.0_wp + 6.0_wp * ( r0 / r1 ) ** ( alp / 3.0_wp )) ang = 0.375_wp * ( r2ij + r2jk - r2ik ) * ( r2ij - r2jk + r2ik )& & * ( - r2ij + r2jk + r2ik ) / r5 + 1.0_wp / r3 rr = ang * fdmp dE = rr * c9 * triple energy_local ( iat ) = energy_local ( iat ) - dE / 3 energy_local ( jat ) = energy_local ( jat ) - dE / 3 energy_local ( kat ) = energy_local ( kat ) - dE / 3 end do end do end do end do end do !$omp end do !$omp critical (get_atm_dispersion_energy_) energy (:) = energy (:) + energy_local (:) !$omp end critical (get_atm_dispersion_energy_) deallocate ( energy_local ) !$omp end parallel end subroutine get_atm_dispersion_energy !> Evaluation of the dispersion energy expression subroutine get_atm_dispersion_derivs ( mol , trans , cutoff , s9 , a1 , a2 , alp , r4r2 , & & c6 , dc6dcn , dc6dq , energy , dEdcn , dEdq , gradient , sigma ) !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Scaling for dispersion coefficients real ( wp ), intent ( in ) :: s9 !> Scaling parameter for critical radius real ( wp ), intent ( in ) :: a1 !> Offset parameter for critical radius real ( wp ), intent ( in ) :: a2 !> Exponent of zero damping function real ( wp ), intent ( in ) :: alp !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ) :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ) :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ) :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ) :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ) :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ) :: sigma (:, :) integer :: iat , jat , kat , izp , jzp , kzp , jtr , ktr real ( wp ) :: vij ( 3 ), vjk ( 3 ), vik ( 3 ), r2ij , r2jk , r2ik , c6ij , c6jk , c6ik , triple real ( wp ) :: r0ij , r0jk , r0ik , r0 , r1 , r2 , r3 , r5 , rr , fdmp , dfdmp , ang , dang real ( wp ) :: cutoff2 , c9 , dE , dGij ( 3 ), dGjk ( 3 ), dGik ( 3 ), dS ( 3 , 3 ) ! Thread-private arrays for reduction ! Set to 0 explicitly as the shared variants are potentially non-zero (inout) real ( wp ), allocatable :: energy_local (:) real ( wp ), allocatable :: dEdcn_local (:) real ( wp ), allocatable :: dEdq_local (:) real ( wp ), allocatable :: gradient_local (:, :) real ( wp ), allocatable :: sigma_local (:, :) cutoff2 = cutoff * cutoff !$omp parallel default(none) & !$omp shared(mol, trans, c6, s9, a1, a2, alp, r4r2, cutoff2, dc6dcn, dc6dq) & !$omp private(iat, jat, kat, izp, jzp, kzp, jtr, ktr, vij, vjk, vik, & !$omp& r2ij, r2jk, r2ik, c6ij, c6jk, c6ik, triple, r0ij, r0jk, r0ik, r0, & !$omp& r1, r2, r3, r5, rr, fdmp, dfdmp, ang, dang, c9, dE, dGij, dGjk, & !$omp& dGik, dS) & !$omp shared(energy, gradient, sigma, dEdcn, dEdq) & !$omp private(energy_local, gradient_local, sigma_local, dEdcn_local, & !$omp& dEdq_local) allocate ( energy_local ( size ( energy , 1 )), source = 0.0_wp ) allocate ( dEdcn_local ( size ( dEdcn , 1 )), source = 0.0_wp ) allocate ( dEdq_local ( size ( dEdq , 1 )), source = 0.0_wp ) allocate ( gradient_local ( size ( gradient , 1 ), size ( gradient , 2 )), source = 0.0_wp ) allocate ( sigma_local ( size ( sigma , 1 ), size ( sigma , 2 )), source = 0.0_wp ) !$omp do schedule(runtime) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) c6ij = c6 ( jat , iat ) r0ij = a1 * sqrt ( 3 * r4r2 ( jzp ) * r4r2 ( izp )) + a2 do jtr = 1 , size ( trans , 2 ) vij (:) = mol % xyz (:, jat ) + trans (:, jtr ) - mol % xyz (:, iat ) r2ij = vij ( 1 ) * vij ( 1 ) + vij ( 2 ) * vij ( 2 ) + vij ( 3 ) * vij ( 3 ) if ( r2ij > cutoff2 . or . r2ij < epsilon ( 1.0_wp )) cycle do kat = 1 , jat kzp = mol % id ( kat ) c6ik = c6 ( kat , iat ) c6jk = c6 ( kat , jat ) c9 = - s9 * sqrt ( abs ( c6ij * c6ik * c6jk )) r0ik = a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( izp )) + a2 r0jk = a1 * sqrt ( 3 * r4r2 ( kzp ) * r4r2 ( jzp )) + a2 r0 = r0ij * r0ik * r0jk triple = triple_scale ( iat , jat , kat ) do ktr = 1 , size ( trans , 2 ) vik (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, iat ) r2ik = vik ( 1 ) * vik ( 1 ) + vik ( 2 ) * vik ( 2 ) + vik ( 3 ) * vik ( 3 ) if ( r2ik > cutoff2 . or . r2ik < epsilon ( 1.0_wp )) cycle vjk (:) = mol % xyz (:, kat ) + trans (:, ktr ) - mol % xyz (:, jat ) & & - trans (:, jtr ) r2jk = vjk ( 1 ) * vjk ( 1 ) + vjk ( 2 ) * vjk ( 2 ) + vjk ( 3 ) * vjk ( 3 ) if ( r2jk > cutoff2 . or . r2jk < epsilon ( 1.0_wp )) cycle r2 = r2ij * r2ik * r2jk r1 = sqrt ( r2 ) r3 = r2 * r1 r5 = r3 * r2 fdmp = 1.0_wp / ( 1.0_wp + 6.0_wp * ( r0 / r1 ) ** ( alp / 3.0_wp )) ang = 0.375_wp * ( r2ij + r2jk - r2ik ) * ( r2ij - r2jk + r2ik )& & * ( - r2ij + r2jk + r2ik ) / r5 + 1.0_wp / r3 rr = ang * fdmp dfdmp = - 2.0_wp * alp * ( r0 / r1 ) ** ( alp / 3.0_wp ) * fdmp ** 2 ! d/drij dang = - 0.375_wp * ( r2ij ** 3 + r2ij ** 2 * ( r2jk + r2ik )& & + r2ij * ( 3.0_wp * r2jk ** 2 + 2.0_wp * r2jk * r2ik & & + 3.0_wp * r2ik ** 2 )& & - 5.0_wp * ( r2jk - r2ik ) ** 2 * ( r2jk + r2ik )) / r5 dGij (:) = c9 * ( - dang * fdmp + ang * dfdmp ) / r2ij * vij ! d/drik dang = - 0.375_wp * ( r2ik ** 3 + r2ik ** 2 * ( r2jk + r2ij )& & + r2ik * ( 3.0_wp * r2jk ** 2 + 2.0_wp * r2jk * r2ij & & + 3.0_wp * r2ij ** 2 )& & - 5.0_wp * ( r2jk - r2ij ) ** 2 * ( r2jk + r2ij )) / r5 dGik (:) = c9 * ( - dang * fdmp + ang * dfdmp ) / r2ik * vik ! d/drjk dang = - 0.375_wp * ( r2jk ** 3 + r2jk ** 2 * ( r2ik + r2ij )& & + r2jk * ( 3.0_wp * r2ik ** 2 + 2.0_wp * r2ik * r2ij & & + 3.0_wp * r2ij ** 2 )& & - 5.0_wp * ( r2ik - r2ij ) ** 2 * ( r2ik + r2ij )) / r5 dGjk (:) = c9 * ( - dang * fdmp + ang * dfdmp ) / r2jk * vjk dE = rr * c9 * triple energy_local ( iat ) = energy_local ( iat ) - dE / 3 energy_local ( jat ) = energy_local ( jat ) - dE / 3 energy_local ( kat ) = energy_local ( kat ) - dE / 3 gradient_local (:, iat ) = gradient_local (:, iat ) - dGij - dGik gradient_local (:, jat ) = gradient_local (:, jat ) + dGij - dGjk gradient_local (:, kat ) = gradient_local (:, kat ) + dGik + dGjk dS (:, :) = spread ( dGij , 1 , 3 ) * spread ( vij , 2 , 3 )& & + spread ( dGik , 1 , 3 ) * spread ( vik , 2 , 3 )& & + spread ( dGjk , 1 , 3 ) * spread ( vjk , 2 , 3 ) sigma_local (:, :) = sigma_local + dS * triple dEdcn_local ( iat ) = dEdcn_local ( iat ) - dE * 0.5_wp & & * ( dc6dcn ( iat , jat ) / c6ij + dc6dcn ( iat , kat ) / c6ik ) dEdcn_local ( jat ) = dEdcn_local ( jat ) - dE * 0.5_wp & & * ( dc6dcn ( jat , iat ) / c6ij + dc6dcn ( jat , kat ) / c6jk ) dEdcn_local ( kat ) = dEdcn_local ( kat ) - dE * 0.5_wp & & * ( dc6dcn ( kat , iat ) / c6ik + dc6dcn ( kat , jat ) / c6jk ) dEdq_local ( iat ) = dEdq_local ( iat ) - dE * 0.5_wp & & * ( dc6dq ( iat , jat ) / c6ij + dc6dq ( iat , kat ) / c6ik ) dEdq_local ( jat ) = dEdq_local ( jat ) - dE * 0.5_wp & & * ( dc6dq ( jat , iat ) / c6ij + dc6dq ( jat , kat ) / c6jk ) dEdq_local ( kat ) = dEdq_local ( kat ) - dE * 0.5_wp & & * ( dc6dq ( kat , iat ) / c6ik + dc6dq ( kat , jat ) / c6jk ) end do end do end do end do end do !$omp end do !$omp critical (get_atm_dispersion_derivs_) energy (:) = energy (:) + energy_local (:) dEdcn (:) = dEdcn (:) + dEdcn_local (:) dEdq (:) = dEdq (:) + dEdq_local (:) gradient (:, :) = gradient (:, :) + gradient_local (:, :) sigma (:, :) = sigma (:, :) + sigma_local (:, :) !$omp end critical (get_atm_dispersion_derivs_) deallocate ( energy_local ) deallocate ( dEdcn_local ) deallocate ( dEdq_local ) deallocate ( gradient_local ) deallocate ( sigma_local ) !$omp end parallel end subroutine get_atm_dispersion_derivs !> Logic exercise to distribute a triple energy to atomwise energies. elemental function triple_scale ( ii , jj , kk ) result ( triple ) !> Atom indices integer , intent ( in ) :: ii , jj , kk !> Fraction of energy real ( wp ) :: triple if ( ii == jj ) then if ( ii == kk ) then ! ii'i\" -> 1/6 triple = 1.0_wp / 6.0_wp else ! ii'j -> 1/2 triple = 0.5_wp end if else if ( ii /= kk . and . jj /= kk ) then ! ijk -> 1 (full) triple = 1.0_wp else ! ijj' and iji' -> 1/2 triple = 0.5_wp end if end if end function triple_scale end module dftd4_damping_atm","tags":"","url":"sourcefile/atm.f90.html"},{"title":"type.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Definition of the abstract base dispersion model for the evaluation of C6 coefficients. module dftd4_model_type use mctc_env , only : wp use mctc_io , only : structure_type implicit none private public :: dispersion_model , d4_ref !> Abstract base dispersion model to evaluate C6 coefficients type , abstract :: dispersion_model !> Number of atoms coupled to by pairwise parameters integer :: ncoup !> Charge scaling height real ( wp ) :: ga !> Charge scaling steepness real ( wp ) :: gc !> Effective nuclear charges real ( wp ), allocatable :: zeff (:) !> Chemical hardness real ( wp ), allocatable :: eta (:) !> Electronegativity real ( wp ), allocatable :: en (:) !> Covalent radii for coordination number real ( wp ), allocatable :: rcov (:) !> Expectation values for C8 extrapolation real ( wp ), allocatable :: r4r2 (:) !> Number of reference systems integer , allocatable :: ref (:) !> Number of Gaussian weights for each reference integer , allocatable :: ngw (:, :) !> Reference coordination numbers real ( wp ), allocatable :: cn (:, :) !> Reference partial charges real ( wp ), allocatable :: q (:, :) !> Reference dynamic polarizabilities real ( wp ), allocatable :: aiw (:, :, :) !> Reference C6 coefficients real ( wp ), allocatable :: c6 (:, :, :, :) contains !> Generate weights for all reference systems procedure ( weight_references ), deferred :: weight_references !> Evaluate C6 coefficient procedure ( get_atomic_c6 ), deferred :: get_atomic_c6 !> Evaluate atomic polarizabilities procedure ( get_polarizabilities ), deferred :: get_polarizabilities end type dispersion_model abstract interface !> Calculate the weights of the reference system and the derivatives w.r.t. !> coordination number for later use. subroutine weight_references ( self , mol , cn , q , gwvec , gwdcn , gwdq ) import dispersion_model , structure_type , wp !> Instance of the dispersion model class ( dispersion_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Coordination number of every atom: [nat] real ( wp ), intent ( in ) :: cn (:) !> Partial charge of every atom: [nat] real ( wp ), intent ( in ) :: q (:) !> weighting for the atomic reference systems: [nref, nat, ncoup] real ( wp ), intent ( out ) :: gwvec (:, :, :) !> derivative of the weighting function w.r.t. the coordination number: [nref, nat, ncoup] real ( wp ), intent ( out ), optional :: gwdcn (:, :, :) !> derivative of the weighting function w.r.t. the charge scaling: [nref, nat, ncoup] real ( wp ), intent ( out ), optional :: gwdq (:, :, :) end subroutine !> Calculate atomic dispersion coefficients and their derivatives w.r.t. !> the coordination numbers and atomic partial charges. subroutine get_atomic_c6 ( self , mol , gwvec , gwdcn , gwdq , c6 , dc6dcn , dc6dq ) import dispersion_model , structure_type , wp !> Instance of the dispersion model class ( dispersion_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Weighting function for the atomic reference systems real ( wp ), intent ( in ) :: gwvec (:, :, :) !> Derivative of the weighting function w.r.t. the coordination number real ( wp ), intent ( in ), optional :: gwdcn (:, :, :) !> Derivative of the weighting function w.r.t. the partial charge real ( wp ), intent ( in ), optional :: gwdq (:, :, :) !> C6 coefficients for all atom pairs. real ( wp ), intent ( out ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( out ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charge real ( wp ), intent ( out ), optional :: dc6dq (:, :) end subroutine get_atomic_c6 !> Calculate atomic polarizabilities and their derivatives w.r.t. !> the coordination numbers and atomic partial charges. subroutine get_polarizabilities ( self , mol , gwvec , gwdcn , gwdq , alpha , dadcn , dadq ) import dispersion_model , structure_type , wp !> Instance of the dispersion model class ( dispersion_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Weighting function for the atomic reference systems real ( wp ), intent ( in ) :: gwvec (:, :, :) !> Derivative of the weighting function w.r.t. the coordination number real ( wp ), intent ( in ), optional :: gwdcn (:, :, :) !> Derivative of the weighting function w.r.t. the partial charge real ( wp ), intent ( in ), optional :: gwdq (:, :, :) !> Static polarizabilities for all atoms. real ( wp ), intent ( out ) :: alpha (:) !> Derivative of the polarizibility w.r.t. the coordination number real ( wp ), intent ( out ), optional :: dadcn (:) !> Derivative of the polarizibility w.r.t. the partial charge real ( wp ), intent ( out ), optional :: dadq (:) end subroutine end interface !> Possible reference charges for D4 type :: enum_ref !> Electronegativity equilibration charges integer :: eeq = 1 !> GFN2-xTB Mulliken partial charges integer :: gfn2 = 2 end type enum_ref !> Actual enumerator for D4 reference charges type ( enum_ref ), parameter :: d4_ref = enum_ref () !DEC$ ATTRIBUTES DLLEXPORT :: d4_ref end module dftd4_model_type","tags":"","url":"sourcefile/type.f90.html"},{"title":"blas.F90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Interface to BLAS library #ifndef IK #define IK i4 #endif module dftd4_blas use mctc_env , only : sp , dp , ik => IK implicit none private public :: d4_gemv , blas_gemv !> Performs one of the matrix-vector operations !> !>    y := alpha*A*x + beta*y,   or   y := alpha*A**T*x + beta*y, !> !> where alpha and beta are scalars, x and y are vectors and A is an !> m by n matrix. interface d4_gemv module procedure :: d4_sgemv module procedure :: d4_dgemv module procedure :: d4_sgemv312 module procedure :: d4_sgemv321 module procedure :: d4_dgemv312 module procedure :: d4_dgemv321 end interface d4_gemv !> Performs one of the matrix-vector operations !> !>    y := alpha*A*x + beta*y,   or   y := alpha*A**T*x + beta*y, !> !> where alpha and beta are scalars, x and y are vectors and A is an !> m by n matrix. interface blas_gemv pure subroutine sgemv ( trans , m , n , alpha , a , lda , x , incx , beta , y , incy ) import :: sp , ik integer ( ik ), intent ( in ) :: lda real ( sp ), intent ( in ) :: a ( lda , * ) real ( sp ), intent ( in ) :: x ( * ) real ( sp ), intent ( inout ) :: y ( * ) real ( sp ), intent ( in ) :: alpha real ( sp ), intent ( in ) :: beta character ( len = 1 ), intent ( in ) :: trans integer ( ik ), intent ( in ) :: incx integer ( ik ), intent ( in ) :: incy integer ( ik ), intent ( in ) :: m integer ( ik ), intent ( in ) :: n end subroutine sgemv pure subroutine dgemv ( trans , m , n , alpha , a , lda , x , incx , beta , y , incy ) import :: dp , ik integer ( ik ), intent ( in ) :: lda real ( dp ), intent ( in ) :: a ( lda , * ) real ( dp ), intent ( in ) :: x ( * ) real ( dp ), intent ( inout ) :: y ( * ) real ( dp ), intent ( in ) :: alpha real ( dp ), intent ( in ) :: beta character ( len = 1 ), intent ( in ) :: trans integer ( ik ), intent ( in ) :: incx integer ( ik ), intent ( in ) :: incy integer ( ik ), intent ( in ) :: m integer ( ik ), intent ( in ) :: n end subroutine dgemv end interface blas_gemv contains subroutine d4_sgemv312 ( amat , xvec , yvec , alpha , beta , trans ) real ( sp ), intent ( in ), contiguous , target :: amat (:, :, :) real ( sp ), intent ( in ) :: xvec (:) real ( sp ), intent ( inout ), contiguous , target :: yvec (:, :) real ( sp ), intent ( in ), optional :: alpha real ( sp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( sp ), pointer :: aptr (:, :), yptr (:) character ( len = 1 ) :: tra if ( present ( trans )) then tra = trans else tra = 'n' end if if ( any ( tra == [ 'n' , 'N' ])) then aptr ( 1 : size ( amat , 1 ) * size ( amat , 2 ), 1 : size ( amat , 3 )) => amat yptr ( 1 : size ( yvec , 1 ) * size ( yvec , 2 )) => yvec else aptr ( 1 : size ( amat , 1 ), 1 : size ( amat , 2 ) * size ( amat , 3 )) => amat yptr ( 1 : size ( yvec , 1 ) * size ( yvec , 2 )) => yvec end if call d4_gemv ( aptr , xvec , yptr , alpha , beta , tra ) end subroutine d4_sgemv312 subroutine d4_sgemv321 ( amat , xvec , yvec , alpha , beta , trans ) real ( sp ), intent ( in ), contiguous , target :: amat (:, :, :) real ( sp ), intent ( in ), contiguous , target :: xvec (:, :) real ( sp ), intent ( inout ) :: yvec (:) real ( sp ), intent ( in ), optional :: alpha real ( sp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( sp ), pointer :: aptr (:, :), xptr (:) character ( len = 1 ) :: tra if ( present ( trans )) then tra = trans else tra = 'n' end if if ( any ( tra == [ 'n' , 'N' ])) then aptr ( 1 : size ( amat , 1 ), 1 : size ( amat , 2 ) * size ( amat , 3 )) => amat xptr ( 1 : size ( xvec , 1 ) * size ( xvec , 2 )) => xvec else aptr ( 1 : size ( amat , 1 ) * size ( amat , 2 ), 1 : size ( amat , 3 )) => amat xptr ( 1 : size ( xvec , 1 ) * size ( xvec , 2 )) => xvec end if call d4_gemv ( aptr , xptr , yvec , alpha , beta , tra ) end subroutine d4_sgemv321 subroutine d4_dgemv312 ( amat , xvec , yvec , alpha , beta , trans ) real ( dp ), intent ( in ), contiguous , target :: amat (:, :, :) real ( dp ), intent ( in ) :: xvec (:) real ( dp ), intent ( inout ), contiguous , target :: yvec (:, :) real ( dp ), intent ( in ), optional :: alpha real ( dp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( dp ), pointer :: aptr (:, :), yptr (:) character ( len = 1 ) :: tra if ( present ( trans )) then tra = trans else tra = 'n' end if if ( any ( tra == [ 'n' , 'N' ])) then aptr ( 1 : size ( amat , 1 ) * size ( amat , 2 ), 1 : size ( amat , 3 )) => amat yptr ( 1 : size ( yvec , 1 ) * size ( yvec , 2 )) => yvec else aptr ( 1 : size ( amat , 1 ), 1 : size ( amat , 2 ) * size ( amat , 3 )) => amat yptr ( 1 : size ( yvec , 1 ) * size ( yvec , 2 )) => yvec end if call d4_gemv ( aptr , xvec , yptr , alpha , beta , tra ) end subroutine d4_dgemv312 subroutine d4_dgemv321 ( amat , xvec , yvec , alpha , beta , trans ) real ( dp ), intent ( in ), contiguous , target :: amat (:, :, :) real ( dp ), intent ( in ), contiguous , target :: xvec (:, :) real ( dp ), intent ( inout ) :: yvec (:) real ( dp ), intent ( in ), optional :: alpha real ( dp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( dp ), pointer :: aptr (:, :), xptr (:) character ( len = 1 ) :: tra if ( present ( trans )) then tra = trans else tra = 'n' end if if ( any ( tra == [ 'n' , 'N' ])) then aptr ( 1 : size ( amat , 1 ), 1 : size ( amat , 2 ) * size ( amat , 3 )) => amat xptr ( 1 : size ( xvec , 1 ) * size ( xvec , 2 )) => xvec else aptr ( 1 : size ( amat , 1 ) * size ( amat , 2 ), 1 : size ( amat , 3 )) => amat xptr ( 1 : size ( xvec , 1 ) * size ( xvec , 2 )) => xvec end if call d4_gemv ( aptr , xptr , yvec , alpha , beta , tra ) end subroutine d4_dgemv321 pure subroutine d4_sgemv ( amat , xvec , yvec , alpha , beta , trans ) real ( sp ), intent ( in ) :: amat (:, :) real ( sp ), intent ( in ) :: xvec (:) real ( sp ), intent ( inout ) :: yvec (:) real ( sp ), intent ( in ), optional :: alpha real ( sp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( sp ) :: a , b character ( len = 1 ) :: tra integer ( ik ) :: incx , incy , m , n , lda if ( present ( alpha )) then a = alpha else a = 1.0_sp end if if ( present ( beta )) then b = beta else b = 0 end if if ( present ( trans )) then tra = trans else tra = 'n' end if incx = 1 incy = 1 lda = max ( 1 , size ( amat , 1 )) m = size ( amat , 1 ) n = size ( amat , 2 ) call blas_gemv ( tra , m , n , a , amat , lda , xvec , incx , b , yvec , incy ) end subroutine d4_sgemv pure subroutine d4_dgemv ( amat , xvec , yvec , alpha , beta , trans ) real ( dp ), intent ( in ) :: amat (:, :) real ( dp ), intent ( in ) :: xvec (:) real ( dp ), intent ( inout ) :: yvec (:) real ( dp ), intent ( in ), optional :: alpha real ( dp ), intent ( in ), optional :: beta character ( len = 1 ), intent ( in ), optional :: trans real ( dp ) :: a , b character ( len = 1 ) :: tra integer ( ik ) :: incx , incy , m , n , lda if ( present ( alpha )) then a = alpha else a = 1.0_dp end if if ( present ( beta )) then b = beta else b = 0 end if if ( present ( trans )) then tra = trans else tra = 'n' end if incx = 1 incy = 1 lda = max ( 1 , size ( amat , 1 )) m = size ( amat , 1 ) n = size ( amat , 2 ) call blas_gemv ( tra , m , n , a , amat , lda , xvec , incx , b , yvec , incy ) end subroutine d4_dgemv end module dftd4_blas","tags":"","url":"sourcefile/blas.f90.html"},{"title":"disp.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> High-level wrapper to obtain the dispersion energy for a DFT-D4 calculation module dftd4_disp use dftd4_blas , only : d4_gemv use dftd4_charge , only : get_charges use dftd4_cutoff , only : realspace_cutoff , get_lattice_points use dftd4_damping , only : damping_param use dftd4_data , only : get_covalent_rad use dftd4_model , only : dispersion_model use dftd4_ncoord , only : get_coordination_number , add_coordination_number_derivs use mctc_env , only : wp use mctc_io , only : structure_type use mctc_io_convert , only : autoaa implicit none private public :: get_dispersion , get_properties , get_pairwise_dispersion contains !> Wrapper to handle the evaluation of dispersion energy and derivatives subroutine get_dispersion ( mol , disp , param , cutoff , energy , gradient , sigma ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dispersion !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp !> Damping parameters class ( damping_param ), intent ( in ) :: param !> Realspace cutoffs type ( realspace_cutoff ), intent ( in ) :: cutoff !> Dispersion energy real ( wp ), intent ( out ) :: energy !> Dispersion gradient real ( wp ), intent ( out ), contiguous , optional :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( out ), contiguous , optional :: sigma (:, :) logical :: grad integer :: mref real ( wp ), allocatable :: cn (:) real ( wp ), allocatable :: q (:), dqdr (:, :, :), dqdL (:, :, :) real ( wp ), allocatable :: gwvec (:, :, :), gwdcn (:, :, :), gwdq (:, :, :) real ( wp ), allocatable :: c6 (:, :), dc6dcn (:, :), dc6dq (:, :) real ( wp ), allocatable :: dEdcn (:), dEdq (:), energies (:) real ( wp ), allocatable :: lattr (:, :) mref = maxval ( disp % ref ) grad = present ( gradient ). or . present ( sigma ) allocate ( cn ( mol % nat )) call get_lattice_points ( mol % periodic , mol % lattice , cutoff % cn , lattr ) call get_coordination_number ( mol , lattr , cutoff % cn , disp % rcov , disp % en , cn ) allocate ( q ( mol % nat )) if ( grad ) allocate ( dqdr ( 3 , mol % nat , mol % nat ), dqdL ( 3 , 3 , mol % nat )) call get_charges ( mol , q , dqdr , dqdL ) allocate ( gwvec ( mref , mol % nat , disp % ncoup )) if ( grad ) allocate ( gwdcn ( mref , mol % nat , disp % ncoup ), gwdq ( mref , mol % nat , disp % ncoup )) call disp % weight_references ( mol , cn , q , gwvec , gwdcn , gwdq ) allocate ( c6 ( mol % nat , mol % nat )) if ( grad ) allocate ( dc6dcn ( mol % nat , mol % nat ), dc6dq ( mol % nat , mol % nat )) call disp % get_atomic_c6 ( mol , gwvec , gwdcn , gwdq , c6 , dc6dcn , dc6dq ) allocate ( energies ( mol % nat )) energies (:) = 0.0_wp if ( grad ) then allocate ( dEdcn ( mol % nat ), dEdq ( mol % nat )) dEdcn (:) = 0.0_wp dEdq (:) = 0.0_wp gradient (:, :) = 0.0_wp sigma (:, :) = 0.0_wp end if call get_lattice_points ( mol % periodic , mol % lattice , cutoff % disp2 , lattr ) call param % get_dispersion2 ( mol , lattr , cutoff % disp2 , disp % r4r2 , & & c6 , dc6dcn , dc6dq , energies , dEdcn , dEdq , gradient , sigma ) if ( grad ) then call d4_gemv ( dqdr , dEdq , gradient , beta = 1.0_wp ) call d4_gemv ( dqdL , dEdq , sigma , beta = 1.0_wp ) end if q (:) = 0.0_wp call disp % weight_references ( mol , cn , q , gwvec , gwdcn , gwdq ) call disp % get_atomic_c6 ( mol , gwvec , gwdcn , gwdq , c6 , dc6dcn , dc6dq ) call get_lattice_points ( mol % periodic , mol % lattice , cutoff % disp3 , lattr ) call param % get_dispersion3 ( mol , lattr , cutoff % disp3 , disp % r4r2 , & & c6 , dc6dcn , dc6dq , energies , dEdcn , dEdq , gradient , sigma ) if ( grad ) then call add_coordination_number_derivs ( mol , lattr , cutoff % cn , & & disp % rcov , disp % en , dEdcn , gradient , sigma ) end if energy = sum ( energies ) end subroutine get_dispersion !> Wrapper to handle the evaluation of properties related to this dispersion model subroutine get_properties ( mol , disp , cutoff , cn , q , c6 , alpha ) !DEC$ ATTRIBUTES DLLEXPORT :: get_properties !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp !> Realspace cutoffs type ( realspace_cutoff ), intent ( in ) :: cutoff !> Coordination number real ( wp ), intent ( out ) :: cn (:) !> Atomic partial charges real ( wp ), intent ( out ), contiguous :: q (:) !> C6 coefficients real ( wp ), intent ( out ) :: c6 (:, :) !> Static polarizabilities real ( wp ), intent ( out ) :: alpha (:) integer :: mref real ( wp ), allocatable :: gwvec (:, :, :), lattr (:, :) mref = maxval ( disp % ref ) call get_lattice_points ( mol % periodic , mol % lattice , cutoff % cn , lattr ) call get_coordination_number ( mol , lattr , cutoff % cn , disp % rcov , disp % en , cn ) call get_charges ( mol , q ) allocate ( gwvec ( mref , mol % nat , disp % ncoup )) call disp % weight_references ( mol , cn , q , gwvec ) call disp % get_atomic_c6 ( mol , gwvec , c6 = c6 ) call disp % get_polarizabilities ( mol , gwvec , alpha = alpha ) end subroutine get_properties !> Wrapper to handle the evaluation of pairwise representation of the dispersion energy subroutine get_pairwise_dispersion ( mol , disp , param , cutoff , energy2 , energy3 ) !DEC$ ATTRIBUTES DLLEXPORT :: get_pairwise_dispersion !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp !> Damping parameters class ( damping_param ), intent ( in ) :: param !> Realspace cutoffs type ( realspace_cutoff ), intent ( in ) :: cutoff !> Pairwise representation of additive dispersion energy real ( wp ), intent ( out ) :: energy2 (:, :) !> Pairwise representation of non-additive dispersion energy real ( wp ), intent ( out ) :: energy3 (:, :) integer :: mref real ( wp ), allocatable :: cn (:), q (:), gwvec (:, :, :), c6 (:, :), lattr (:, :) mref = maxval ( disp % ref ) allocate ( cn ( mol % nat )) call get_lattice_points ( mol % periodic , mol % lattice , cutoff % cn , lattr ) call get_coordination_number ( mol , lattr , cutoff % cn , disp % rcov , disp % en , cn ) allocate ( q ( mol % nat )) call get_charges ( mol , q ) allocate ( gwvec ( mref , mol % nat , disp % ncoup )) call disp % weight_references ( mol , cn , q , gwvec ) allocate ( c6 ( mol % nat , mol % nat )) call disp % get_atomic_c6 ( mol , gwvec , c6 = c6 ) energy2 (:, :) = 0.0_wp energy3 (:, :) = 0.0_wp call get_lattice_points ( mol % periodic , mol % lattice , cutoff % disp2 , lattr ) call param % get_pairwise_dispersion2 ( mol , lattr , cutoff % disp2 , disp % r4r2 , & & c6 , energy2 ) q (:) = 0.0_wp call disp % weight_references ( mol , cn , q , gwvec ) call disp % get_atomic_c6 ( mol , gwvec , c6 = c6 ) call get_lattice_points ( mol % periodic , mol % lattice , cutoff % disp3 , lattr ) call param % get_pairwise_dispersion3 ( mol , lattr , cutoff % disp3 , disp % r4r2 , & & c6 , energy3 ) end subroutine get_pairwise_dispersion end module dftd4_disp","tags":"","url":"sourcefile/disp.f90.html"},{"title":"model.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Re-export of all dispersion models module dftd4_model use mctc_env , only : wp , error_type , fatal_error use mctc_io , only : structure_type use dftd4_utils , only : lowercase use dftd4_model_type , only : dispersion_model , d4_ref use dftd4_model_d4 , only : d4_model , new_d4_model use dftd4_model_d4s , only : d4s_model , new_d4s_model implicit none private public :: dispersion_model , d4_ref public :: d4_model , new_d4_model public :: d4s_model , new_d4s_model public :: new_dispersion_model contains !> Wrapper for creating a new dispersion model (D4 or D4S) from molecular !> structure input using a given model string. Defaults to D4 if no model !> is specified. subroutine new_dispersion_model ( error , d4 , mol , model , ga , gc , wf ) !> Error handling type ( error_type ), allocatable , intent ( out ) :: error !> Dispersion model to be returned class ( dispersion_model ), allocatable , intent ( out ) :: d4 !> Molecular structure data type ( structure_type ), intent ( in ) :: mol !> Dispersion model to be used character ( len =* ), intent ( in ), optional :: model !> Charge scaling height real ( wp ), intent ( in ), optional :: ga !> Charge scaling steepness real ( wp ), intent ( in ), optional :: gc !> Weighting factor for coordination number interpolation real ( wp ), intent ( in ), optional :: wf character ( len = :), allocatable :: mdl if ( present ( model )) then mdl = lowercase ( trim ( model )) else mdl = \"d4\" end if if ( mdl == \"d4\" ) then block type ( d4_model ), allocatable :: tmp allocate ( tmp ) call new_d4_model ( error , tmp , mol , ga = ga , gc = gc , wf = wf ) call move_alloc ( tmp , d4 ) end block else if ( mdl == \"d4s\" ) then block type ( d4s_model ), allocatable :: tmp allocate ( tmp ) call new_d4s_model ( error , tmp , mol , ga = ga , gc = gc ) call move_alloc ( tmp , d4 ) end block else call fatal_error ( error , \"Unknown model selected\" ) end if end subroutine new_dispersion_model end module dftd4_model","tags":"","url":"sourcefile/model.f90.html"},{"title":"d4.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Definition of the D4 dispersion model for the evaluation of C6 coefficients. module dftd4_model_d4 use , intrinsic :: iso_fortran_env , only : output_unit use ieee_arithmetic , only : ieee_is_nan use dftd4_model_type , only : dispersion_model , d4_ref use dftd4_data , only : get_covalent_rad , get_r4r2_val , get_effective_charge , & get_electronegativity , get_hardness use dftd4_reference use dftd4_model_utils use mctc_env , only : error_type , fatal_error , wp use mctc_io , only : structure_type use mctc_io_constants , only : pi implicit none private public :: d4_model , new_d4_model !> D4 dispersion model to evaluate C6 coefficients type , extends ( dispersion_model ) :: d4_model !> Weighting factor for CN interpolation real ( wp ) :: wf contains !> Generate weights for all reference systems procedure :: weight_references !> Evaluate C6 coefficient procedure :: get_atomic_c6 !> Evaluate atomic polarizabilities procedure :: get_polarizabilities end type d4_model !> Default maximum charge scaling height for partial charge extrapolation real ( wp ), parameter :: ga_default = 3.0_wp !> Default charge scaling steepness for partial charge extrapolation real ( wp ), parameter :: gc_default = 2.0_wp !> Default weighting factor for coordination number interpolation real ( wp ), parameter :: wf_default = 6.0_wp !> Create new D4 dispersion model from molecular structure input interface new_d4_model module procedure :: new_d4_model_no_checks module procedure :: new_d4_model_with_checks end interface new_d4_model contains !> Create new D4 dispersion model from molecular structure input subroutine new_d4_model_with_checks ( error , d4 , mol , ga , gc , wf , ref ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_with_checks !> Instance of the dispersion model type ( d4_model ), intent ( out ) :: d4 !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Error handling type ( error_type ), allocatable , intent ( out ) :: error !> Charge scaling height real ( wp ), intent ( in ), optional :: ga !> Charge scaling steepness real ( wp ), intent ( in ), optional :: gc !> Weighting factor for coordination number interpolation real ( wp ), intent ( in ), optional :: wf !> Reference charge selection integer , intent ( in ), optional :: ref integer :: isp , izp , iref , jsp , jzp , jref integer :: mref , ref_charge real ( wp ) :: aiw ( 23 ), c6 real ( wp ), parameter :: thopi = 3.0_wp / pi ! check for unsupported elements (104 (Rf) - 111 (Rg)) do isp = 1 , mol % nid if ( mol % num ( isp ) > 103 . and . mol % num ( isp ) < 112 ) then call fatal_error ( error , \"Structure contains unsupported element '\" // trim ( mol % sym ( isp )) // \"'\" ) return end if end do d4 % ncoup = 1 if ( present ( ref )) then ref_charge = ref else ref_charge = d4_ref % eeq end if if ( present ( ga )) then d4 % ga = ga else d4 % ga = ga_default end if if ( present ( gc )) then d4 % gc = gc else d4 % gc = gc_default end if if ( present ( wf )) then d4 % wf = wf else d4 % wf = wf_default end if allocate ( d4 % rcov ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % rcov ( isp ) = get_covalent_rad ( izp ) end do allocate ( d4 % en ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % en ( isp ) = get_electronegativity ( izp ) end do allocate ( d4 % zeff ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % zeff ( isp ) = get_effective_charge ( izp ) end do allocate ( d4 % eta ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % eta ( isp ) = get_hardness ( izp ) end do allocate ( d4 % r4r2 ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % r4r2 ( isp ) = get_r4r2_val ( izp ) end do allocate ( d4 % ref ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % ref ( isp ) = get_nref ( izp ) end do mref = maxval ( d4 % ref ) allocate ( d4 % cn ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refcn ( d4 % cn (:, isp ), izp ) end do allocate ( d4 % q ( mref , mol % nid )) allocate ( d4 % aiw ( 23 , mref , mol % nid )) select case ( ref_charge ) case default call fatal_error ( error , \"Unsupported option for reference charges\" ) return case ( d4_ref % eeq ) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_eeq ( d4 % q (:, isp ), izp ) call set_refalpha_eeq ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do case ( d4_ref % gfn2 ) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_gfn2 ( d4 % q (:, isp ), izp ) call set_refalpha_gfn2 ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do end select allocate ( d4 % ngw ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refgw ( d4 % ngw (:, isp ), izp ) end do allocate ( d4 % c6 ( mref , mref , mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , isp jzp = mol % num ( jsp ) do iref = 1 , d4 % ref ( isp ) do jref = 1 , d4 % ref ( jsp ) aiw (:) = d4 % aiw (:, iref , isp ) * d4 % aiw (:, jref , jsp ) c6 = thopi * trapzd ( aiw ) d4 % c6 ( jref , iref , jsp , isp ) = c6 d4 % c6 ( iref , jref , isp , jsp ) = c6 end do end do end do end do end subroutine new_d4_model_with_checks !> Create new dispersion model from molecular structure input without !> checking for supported elements (old/compatibility version) subroutine new_d4_model_no_checks ( d4 , mol , ga , gc , wf , ref ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_no_checks !> Instance of the dispersion model type ( d4_model ), intent ( out ) :: d4 !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Charge scaling height real ( wp ), intent ( in ), optional :: ga !> Charge scaling steepness real ( wp ), intent ( in ), optional :: gc !> Weighting factor for coordination number interpolation real ( wp ), intent ( in ), optional :: wf !> Reference charge selection integer , intent ( in ), optional :: ref integer :: isp , izp , iref , jsp , jzp , jref integer :: mref , ref_charge real ( wp ) :: aiw ( 23 ), c6 real ( wp ), parameter :: thopi = 3.0_wp / pi d4 % ncoup = 1 if ( present ( ref )) then ref_charge = ref else ref_charge = d4_ref % eeq end if if ( present ( ga )) then d4 % ga = ga else d4 % ga = ga_default end if if ( present ( gc )) then d4 % gc = gc else d4 % gc = gc_default end if if ( present ( wf )) then d4 % wf = wf else d4 % wf = wf_default end if allocate ( d4 % rcov ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % rcov ( isp ) = get_covalent_rad ( izp ) end do allocate ( d4 % en ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % en ( isp ) = get_electronegativity ( izp ) end do allocate ( d4 % zeff ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % zeff ( isp ) = get_effective_charge ( izp ) end do allocate ( d4 % eta ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % eta ( isp ) = get_hardness ( izp ) end do allocate ( d4 % r4r2 ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % r4r2 ( isp ) = get_r4r2_val ( izp ) end do allocate ( d4 % ref ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % ref ( isp ) = get_nref ( izp ) end do mref = maxval ( d4 % ref ) allocate ( d4 % cn ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refcn ( d4 % cn (:, isp ), izp ) end do allocate ( d4 % q ( mref , mol % nid )) allocate ( d4 % aiw ( 23 , mref , mol % nid )) if ( ref_charge == d4_ref % gfn2 ) then do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_gfn2 ( d4 % q (:, isp ), izp ) call set_refalpha_gfn2 ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do else if ( ref_charge /= d4_ref % eeq ) then write ( output_unit , '(a)' ) \"[Info] Unsupported option for reference charge. Defaulting to EEQ charges.\" end if do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_eeq ( d4 % q (:, isp ), izp ) call set_refalpha_eeq ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do end if allocate ( d4 % ngw ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refgw ( d4 % ngw (:, isp ), izp ) end do allocate ( d4 % c6 ( mref , mref , mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , isp jzp = mol % num ( jsp ) do iref = 1 , d4 % ref ( isp ) do jref = 1 , d4 % ref ( jsp ) aiw (:) = d4 % aiw (:, iref , isp ) * d4 % aiw (:, jref , jsp ) c6 = thopi * trapzd ( aiw ) d4 % c6 ( jref , iref , jsp , isp ) = c6 d4 % c6 ( iref , jref , isp , jsp ) = c6 end do end do end do end do end subroutine new_d4_model_no_checks !> Calculate the weights of the reference system and the derivatives w.r.t. !> coordination number for later use. subroutine weight_references ( self , mol , cn , q , gwvec , gwdcn , gwdq ) !DEC$ ATTRIBUTES DLLEXPORT :: weight_references !> Instance of the dispersion model class ( d4_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Coordination number of every atom real ( wp ), intent ( in ) :: cn (:) !> Partial charge of every atom real ( wp ), intent ( in ) :: q (:) !> weighting for the atomic reference systems real ( wp ), intent ( out ) :: gwvec (:, :, :) !> derivative of the weighting function w.r.t. the coordination number real ( wp ), intent ( out ), optional :: gwdcn (:, :, :) !> derivative of the weighting function w.r.t. the charge scaling real ( wp ), intent ( out ), optional :: gwdq (:, :, :) integer :: iat , izp , iref , igw real ( wp ) :: norm , dnorm , gw , expw , expd , gwk , dgwk , wf , zi , gi , maxcn if ( present ( gwdcn ) . and . present ( gwdq )) then gwvec (:, :, :) = 0.0_wp gwdcn (:, :, :) = 0.0_wp gwdq (:, :, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(gwvec, gwdcn, gwdq, mol, self, cn, q) private(iat, izp, iref, & !$omp& igw, norm, dnorm, gw, expw, expd, gwk, dgwk, wf, zi, gi, maxcn) do iat = 1 , mol % nat izp = mol % id ( iat ) zi = self % zeff ( izp ) gi = self % eta ( izp ) * self % gc norm = 0.0_wp dnorm = 0.0_wp do iref = 1 , self % ref ( izp ) do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf gw = weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) norm = norm + gw dnorm = dnorm + 2 * wf * ( self % cn ( iref , izp ) - cn ( iat )) * gw end do end do norm = 1.0_wp / norm do iref = 1 , self % ref ( izp ) expw = 0.0_wp expd = 0.0_wp do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf gw = weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) expw = expw + gw expd = expd + 2 * wf * ( self % cn ( iref , izp ) - cn ( iat )) * gw end do gwk = expw * norm if ( is_exceptional ( gwk )) then maxcn = maxval ( self % cn (: self % ref ( izp ), izp )) if ( abs ( maxcn - self % cn ( iref , izp )) < 1e-12_wp ) then gwk = 1.0_wp else gwk = 0.0_wp end if end if gwvec ( iref , iat , 1 ) = gwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) gwdq ( iref , iat , 1 ) = gwk * dzeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) dgwk = norm * ( expd - expw * dnorm * norm ) if ( is_exceptional ( dgwk )) then dgwk = 0.0_wp end if gwdcn ( iref , iat , 1 ) = dgwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) end do end do else gwvec (:, :, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(gwvec, mol, self, cn, q) & !$omp private(iat, izp, iref, igw, norm, gw, expw, gwk, wf, zi, gi, maxcn) do iat = 1 , mol % nat izp = mol % id ( iat ) zi = self % zeff ( izp ) gi = self % eta ( izp ) * self % gc norm = 0.0_wp do iref = 1 , self % ref ( izp ) do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf norm = norm + weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) end do end do norm = 1.0_wp / norm do iref = 1 , self % ref ( izp ) expw = 0.0_wp do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf expw = expw + weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) end do gwk = expw * norm if ( is_exceptional ( gwk )) then maxcn = maxval ( self % cn (: self % ref ( izp ), izp )) if ( abs ( maxcn - self % cn ( iref , izp )) < 1e-12_wp ) then gwk = 1.0_wp else gwk = 0.0_wp end if end if gwvec ( iref , iat , 1 ) = gwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) end do end do end if end subroutine weight_references !> Calculate atomic dispersion coefficients and their derivatives w.r.t. !> the coordination numbers and atomic partial charges. subroutine get_atomic_c6 ( self , mol , gwvec , gwdcn , gwdq , c6 , dc6dcn , dc6dq ) !DEC$ ATTRIBUTES DLLEXPORT :: get_atomic_c6 !> Instance of the dispersion model class ( d4_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Weighting function for the atomic reference systems real ( wp ), intent ( in ) :: gwvec (:, :, :) !> Derivative of the weighting function w.r.t. the coordination number real ( wp ), intent ( in ), optional :: gwdcn (:, :, :) !> Derivative of the weighting function w.r.t. the partial charge real ( wp ), intent ( in ), optional :: gwdq (:, :, :) !> C6 coefficients for all atom pairs. real ( wp ), intent ( out ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( out ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charge real ( wp ), intent ( out ), optional :: dc6dq (:, :) integer :: iat , jat , izp , jzp , iref , jref real ( wp ) :: refc6 , dc6 , dc6dcni , dc6dcnj , dc6dqi , dc6dqj if ( present ( gwdcn ). and . present ( dc6dcn ) & & . and . present ( gwdq ). and . present ( dc6dq )) then c6 (:, :) = 0.0_wp dc6dcn (:, :) = 0.0_wp dc6dq (:, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(c6, dc6dcn, dc6dq, mol, self, gwvec, gwdcn, gwdq) & !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6, dc6dqi, dc6dqj, & !$omp& dc6dcni, dc6dcnj) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) dc6 = 0.0_wp dc6dcni = 0.0_wp dc6dcnj = 0.0_wp dc6dqi = 0.0_wp dc6dqj = 0.0_wp do iref = 1 , self % ref ( izp ) do jref = 1 , self % ref ( jzp ) refc6 = self % c6 ( iref , jref , izp , jzp ) dc6 = dc6 + gwvec ( iref , iat , 1 ) * gwvec ( jref , jat , 1 ) * refc6 dc6dcni = dc6dcni + gwdcn ( iref , iat , 1 ) * gwvec ( jref , jat , 1 ) * refc6 dc6dcnj = dc6dcnj + gwvec ( iref , iat , 1 ) * gwdcn ( jref , jat , 1 ) * refc6 dc6dqi = dc6dqi + gwdq ( iref , iat , 1 ) * gwvec ( jref , jat , 1 ) * refc6 dc6dqj = dc6dqj + gwvec ( iref , iat , 1 ) * gwdq ( jref , jat , 1 ) * refc6 end do end do c6 ( iat , jat ) = dc6 c6 ( jat , iat ) = dc6 dc6dcn ( iat , jat ) = dc6dcni dc6dcn ( jat , iat ) = dc6dcnj dc6dq ( iat , jat ) = dc6dqi dc6dq ( jat , iat ) = dc6dqj end do end do else c6 (:, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(c6, mol, self, gwvec) & !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) dc6 = 0.0_wp do iref = 1 , self % ref ( izp ) do jref = 1 , self % ref ( jzp ) refc6 = self % c6 ( iref , jref , izp , jzp ) dc6 = dc6 + gwvec ( iref , iat , 1 ) * gwvec ( jref , jat , 1 ) * refc6 end do end do c6 ( iat , jat ) = dc6 c6 ( jat , iat ) = dc6 end do end do end if end subroutine get_atomic_c6 !> Calculate atomic polarizabilities and their derivatives w.r.t. !> the coordination numbers and atomic partial charges. subroutine get_polarizabilities ( self , mol , gwvec , gwdcn , gwdq , alpha , dadcn , dadq ) !DEC$ ATTRIBUTES DLLEXPORT :: get_polarizabilities !> Instance of the dispersion model class ( d4_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Weighting function for the atomic reference systems real ( wp ), intent ( in ) :: gwvec (:, :, :) !> Derivative of the weighting function w.r.t. the coordination number real ( wp ), intent ( in ), optional :: gwdcn (:, :, :) !> Derivative of the weighting function w.r.t. the partial charge real ( wp ), intent ( in ), optional :: gwdq (:, :, :) !> Static polarizabilities for all atoms. real ( wp ), intent ( out ) :: alpha (:) !> Derivative of the polarizibility w.r.t. the coordination number real ( wp ), intent ( out ), optional :: dadcn (:) !> Derivative of the polarizibility w.r.t. the partial charge real ( wp ), intent ( out ), optional :: dadq (:) integer :: iat , izp , iref real ( wp ) :: refa , da , dadcni , dadqi if ( present ( gwdcn ). and . present ( dadcn ) & & . and . present ( gwdq ). and . present ( dadq )) then alpha (:) = 0.0_wp dadcn (:) = 0.0_wp dadq (:) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(alpha, dadcn, dadq, mol, self, gwvec, gwdcn, gwdq) & !$omp private(iat, izp, iref, refa, da, dadqi, dadcni) do iat = 1 , mol % nat izp = mol % id ( iat ) da = 0.0_wp dadcni = 0.0_wp dadqi = 0.0_wp do iref = 1 , self % ref ( izp ) refa = self % aiw ( 1 , iref , izp ) da = da + gwvec ( iref , iat , 1 ) * refa dadcni = dadcni + gwdcn ( iref , iat , 1 ) * refa dadqi = dadqi + gwdq ( iref , iat , 1 ) * refa end do alpha ( iat ) = da dadcn ( iat ) = dadcni dadq ( iat ) = dadqi end do else alpha (:) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(alpha, mol, self, gwvec) private(iat, izp, iref, refa, da) do iat = 1 , mol % nat izp = mol % id ( iat ) da = 0.0_wp do iref = 1 , self % ref ( izp ) da = da + gwvec ( iref , iat , 1 ) * self % aiw ( 1 , iref , izp ) end do alpha ( iat ) = da end do end if end subroutine get_polarizabilities end module dftd4_model_d4","tags":"","url":"sourcefile/d4.f90.html"},{"title":"utils.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_utils use mctc_env , only : wp use mctc_io_math , only : matinv_3x3 implicit none public :: lowercase , wrap_to_central_cell contains subroutine wrap_to_central_cell ( xyz , lattice , periodic ) !DEC$ ATTRIBUTES DLLEXPORT :: wrap_to_central_cell real ( wp ), intent ( inout ) :: xyz (:, :) real ( wp ), intent ( in ) :: lattice (:, :) logical , intent ( in ) :: periodic (:) real ( wp ) :: invlat ( 3 , 3 ), vec ( 3 ) integer :: iat if (. not . any ( periodic )) return invlat = matinv_3x3 ( lattice ) do iat = 1 , size ( xyz , 2 ) vec (:) = matmul ( invlat , xyz (:, iat )) vec (:) = shift_back_abc ( vec ) xyz (:, iat ) = matmul ( lattice , vec ) end do end subroutine wrap_to_central_cell elemental function shift_back_abc ( in ) result ( out ) !> fractional coordinate in (-∞,+∞) real ( wp ), intent ( in ) :: in !> fractional coordinate in [0,1) real ( wp ) :: out real ( wp ), parameter :: p_pbc_eps = 1.0e-14_wp out = in if ( in < ( 0.0_wp - p_pbc_eps )) & out = in + real ( ceiling ( - in ), wp ) if ( in > ( 1.0_wp + p_pbc_eps )) & out = in - real ( floor ( in ), wp ) if ( abs ( in - 1.0_wp ) < p_pbc_eps ) & out = in - 1.0_wp end function shift_back_abc !> Convert string to lower case pure function lowercase ( str ) result ( lcstr ) character ( len =* ), intent ( in ) :: str character ( len = len_trim ( str )) :: lcstr integer :: ilen , ioffset , iquote , i , iav , iqc ilen = len_trim ( str ) ioffset = iachar ( 'A' ) - iachar ( 'a' ) iquote = 0 lcstr = str do i = 1 , ilen iav = iachar ( str ( i : i )) if ( iquote == 0 . and . ( iav == 34 . or . iav == 39 )) then iquote = 1 iqc = iav cycle endif if ( iquote == 1 . and . iav == iqc ) then iquote = 0 cycle endif if ( iquote == 1 ) cycle if ( iav >= iachar ( 'A' ) . and . iav <= iachar ( 'Z' )) then lcstr ( i : i ) = achar ( iav - ioffset ) else lcstr ( i : i ) = str ( i : i ) endif enddo end function lowercase end module dftd4_utils","tags":"","url":"sourcefile/utils.f90.html"},{"title":"version.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Versioning information on this library. module dftd4_version implicit none private public :: dftd4_version_string , dftd4_version_compact public :: get_dftd4_version !> String representation of the dftd4 version character ( len =* ), parameter :: dftd4_version_string = \"3.7.0\" !> Numeric representation of the dftd4 version integer , parameter :: dftd4_version_compact ( 3 ) = [ 3 , 7 , 0 ] contains !> Getter function to retrieve dftd4 version subroutine get_dftd4_version ( major , minor , patch , string ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dftd4_version !> Major version number of the dftd4 version integer , intent ( out ), optional :: major !> Minor version number of the dftd4 version integer , intent ( out ), optional :: minor !> Patch version number of the dftd4 version integer , intent ( out ), optional :: patch !> String representation of the dftd4 version character ( len = :), allocatable , intent ( out ), optional :: string if ( present ( major )) then major = dftd4_version_compact ( 1 ) end if if ( present ( minor )) then minor = dftd4_version_compact ( 2 ) end if if ( present ( patch )) then patch = dftd4_version_compact ( 3 ) end if if ( present ( string )) then string = dftd4_version_string end if end subroutine get_dftd4_version end module dftd4_version","tags":"","url":"sourcefile/version.f90.html"},{"title":"hardness.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the GNU Lesser General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! GNU Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_data_hardness use mctc_env , only : wp use mctc_io_symbols , only : to_number implicit none private public :: get_hardness interface get_hardness module procedure :: get_hardness_num module procedure :: get_hardness_sym end interface get_hardness integer , parameter :: max_elem = 118 !> Element-specific chemical hardnesses for the charge scaling function used !> to extrapolate the C6 coefficients in DFT-D4. real ( wp ), parameter :: chemical_hardness ( max_elem ) = [ & & 0.47259288_wp , 0.92203391_wp , 0.17452888_wp , 0.25700733_wp , 0.33949086_wp , & & 0.42195412_wp , 0.50438193_wp , 0.58691863_wp , 0.66931351_wp , 0.75191607_wp , & & 0.17964105_wp , 0.22157276_wp , 0.26348578_wp , 0.30539645_wp , 0.34734014_wp , & & 0.38924725_wp , 0.43115670_wp , 0.47308269_wp , 0.17105469_wp , 0.20276244_wp , & & 0.21007322_wp , 0.21739647_wp , 0.22471039_wp , 0.23201501_wp , 0.23933969_wp , & & 0.24665638_wp , 0.25398255_wp , 0.26128863_wp , 0.26859476_wp , 0.27592565_wp , & & 0.30762999_wp , 0.33931580_wp , 0.37235985_wp , 0.40273549_wp , 0.43445776_wp , & & 0.46611708_wp , 0.15585079_wp , 0.18649324_wp , 0.19356210_wp , 0.20063311_wp , & & 0.20770522_wp , 0.21477254_wp , 0.22184614_wp , 0.22891872_wp , 0.23598621_wp , & & 0.24305612_wp , 0.25013018_wp , 0.25719937_wp , 0.28784780_wp , 0.31848673_wp , & & 0.34912431_wp , 0.37976593_wp , 0.41040808_wp , 0.44105777_wp , 0.05019332_wp , & & 0.06762570_wp , 0.08504445_wp , 0.10247736_wp , 0.11991105_wp , 0.13732772_wp , & & 0.15476297_wp , 0.17218265_wp , 0.18961288_wp , 0.20704760_wp , 0.22446752_wp , & & 0.24189645_wp , 0.25932503_wp , 0.27676094_wp , 0.29418231_wp , 0.31159587_wp , & & 0.32902274_wp , 0.34592298_wp , 0.36388048_wp , 0.38130586_wp , 0.39877476_wp , & & 0.41614298_wp , 0.43364510_wp , 0.45104014_wp , 0.46848986_wp , 0.48584550_wp , & & 0.12526730_wp , 0.14268677_wp , 0.16011615_wp , 0.17755889_wp , 0.19497557_wp , & ! Tl-At & 0.21240778_wp , 0.07263525_wp , 0.09422158_wp , 0.09920295_wp , 0.10418621_wp , & ! Rn-Th & 0.14235633_wp , 0.16394294_wp , 0.18551941_wp , 0.22370139_wp , 0.25110000_wp , & ! Pa-Am & 0.25030000_wp , 0.28840000_wp , 0.31000000_wp , 0.33160000_wp , 0.35320000_wp , & ! Cm-Fm & 0.36820000_wp , 0.39630000_wp , 0.40140000_wp , 0.00000000_wp , 0.00000000_wp , & ! Md-Db & 0.00000000_wp , 0.00000000_wp , 0.00000000_wp , 0.00000000_wp , 0.00000000_wp , & ! Sg-Ds & 0.00000000_wp , 0.00000000_wp , 0.00000000_wp , 0.00000000_wp , 0.00000000_wp , & ! Rg-Mc & 0.00000000_wp , 0.00000000_wp , 0.00000000_wp ] ! Lv,Ts,Og contains !> Get chemical hardness for a given element symbol elemental function get_hardness_sym ( sym ) result ( eta ) !> Element symbol character ( len =* ), intent ( in ) :: sym !> Chemical hardness real ( wp ) :: eta eta = get_hardness ( to_number ( sym )) end function get_hardness_sym !> Get chemical hardness for a given atomic number elemental function get_hardness_num ( num ) result ( eta ) !> Atomic number integer , intent ( in ) :: num !> Chemical hardness real ( wp ) :: eta if ( num > 0 . and . num <= size ( chemical_hardness )) then eta = chemical_hardness ( num ) else eta = 0.0_wp end if end function get_hardness_num end module dftd4_data_hardness","tags":"","url":"sourcefile/hardness.f90.html"},{"title":"utils.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Utility functions for the dispersion models module dftd4_model_utils use ieee_arithmetic , only : ieee_is_nan use mctc_env , only : wp implicit none public :: is_exceptional , weight_cn , zeta , dzeta , trapzd contains !> Check whether we are dealing with an exceptional value, NaN or Inf elemental function is_exceptional ( val ) real ( wp ), intent ( in ) :: val logical :: is_exceptional is_exceptional = ieee_is_nan ( val ) . or . abs ( val ) > huge ( val ) end function is_exceptional elemental function weight_cn ( wf , cn , cnref ) result ( cngw ) real ( wp ), intent ( in ) :: wf , cn , cnref real ( wp ) :: cngw intrinsic :: exp cngw = exp ( - wf * ( cn - cnref ) ** 2 ) end function weight_cn !> charge scaling function elemental function zeta ( a , c , qref , qmod ) real ( wp ), intent ( in ) :: a real ( wp ), intent ( in ) :: c real ( wp ), intent ( in ) :: qref real ( wp ), intent ( in ) :: qmod real ( wp ) :: zeta intrinsic :: exp if ( qmod < 0.0_wp ) then zeta = exp ( a ) else zeta = exp ( a * ( 1.0_wp - exp ( c * ( 1.0_wp - qref / qmod ) ) ) ) endif end function zeta !> derivative of charge scaling function w.r.t. charge elemental function dzeta ( a , c , qref , qmod ) real ( wp ), intent ( in ) :: a real ( wp ), intent ( in ) :: c real ( wp ), intent ( in ) :: qref real ( wp ), intent ( in ) :: qmod real ( wp ) :: dzeta intrinsic :: exp if ( qmod < 0.0_wp ) then dzeta = 0.0_wp else dzeta = - a * c * exp ( c * ( 1.0_wp - qref / qmod ) ) & & * zeta ( a , c , qref , qmod ) * qref / ( qmod ** 2 ) endif end function dzeta !> numerical Casimir--Polder integration pure function trapzd ( pol ) real ( wp ), intent ( in ) :: pol ( 23 ) real ( wp ) :: trapzd real ( wp ), parameter :: freq ( 23 ) = [ & & 0.000001_wp , 0.050000_wp , 0.100000_wp , & & 0.200000_wp , 0.300000_wp , 0.400000_wp , & & 0.500000_wp , 0.600000_wp , 0.700000_wp , & & 0.800000_wp , 0.900000_wp , 1.000000_wp , & & 1.200000_wp , 1.400000_wp , 1.600000_wp , & & 1.800000_wp , 2.000000_wp , 2.500000_wp , & & 3.000000_wp , 4.000000_wp , 5.000000_wp , & & 7.500000_wp , 1 0.00000_wp ] real ( wp ), parameter :: weights ( 23 ) = 0.5_wp * [ & & ( freq ( 2 ) - freq ( 1 ) ), & & ( freq ( 2 ) - freq ( 1 ) ) + ( freq ( 3 ) - freq ( 2 ) ), & & ( freq ( 3 ) - freq ( 2 ) ) + ( freq ( 4 ) - freq ( 3 ) ), & & ( freq ( 4 ) - freq ( 3 ) ) + ( freq ( 5 ) - freq ( 4 ) ), & & ( freq ( 5 ) - freq ( 4 ) ) + ( freq ( 6 ) - freq ( 5 ) ), & & ( freq ( 6 ) - freq ( 5 ) ) + ( freq ( 7 ) - freq ( 6 ) ), & & ( freq ( 7 ) - freq ( 6 ) ) + ( freq ( 8 ) - freq ( 7 ) ), & & ( freq ( 8 ) - freq ( 7 ) ) + ( freq ( 9 ) - freq ( 8 ) ), & & ( freq ( 9 ) - freq ( 8 ) ) + ( freq ( 10 ) - freq ( 9 ) ), & & ( freq ( 10 ) - freq ( 9 ) ) + ( freq ( 11 ) - freq ( 10 ) ), & & ( freq ( 11 ) - freq ( 10 ) ) + ( freq ( 12 ) - freq ( 11 ) ), & & ( freq ( 12 ) - freq ( 11 ) ) + ( freq ( 13 ) - freq ( 12 ) ), & & ( freq ( 13 ) - freq ( 12 ) ) + ( freq ( 14 ) - freq ( 13 ) ), & & ( freq ( 14 ) - freq ( 13 ) ) + ( freq ( 15 ) - freq ( 14 ) ), & & ( freq ( 15 ) - freq ( 14 ) ) + ( freq ( 16 ) - freq ( 15 ) ), & & ( freq ( 16 ) - freq ( 15 ) ) + ( freq ( 17 ) - freq ( 16 ) ), & & ( freq ( 17 ) - freq ( 16 ) ) + ( freq ( 18 ) - freq ( 17 ) ), & & ( freq ( 18 ) - freq ( 17 ) ) + ( freq ( 19 ) - freq ( 18 ) ), & & ( freq ( 19 ) - freq ( 18 ) ) + ( freq ( 20 ) - freq ( 19 ) ), & & ( freq ( 20 ) - freq ( 19 ) ) + ( freq ( 21 ) - freq ( 20 ) ), & & ( freq ( 21 ) - freq ( 20 ) ) + ( freq ( 22 ) - freq ( 21 ) ), & & ( freq ( 22 ) - freq ( 21 ) ) + ( freq ( 23 ) - freq ( 22 ) ), & & ( freq ( 23 ) - freq ( 22 ) ) ] trapzd = sum ( pol * weights ) end function trapzd end module dftd4_model_utils","tags":"","url":"sourcefile/utils.f90~2.html"},{"title":"wfpair.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_data_wfpair use mctc_env , only : wp use mctc_io_symbols , only : to_number implicit none private public :: get_wfpair_val !> Get pairwise CN weighting factors interface get_wfpair_val module procedure :: get_wfpair_val_num module procedure :: get_wfpair_val_sym end interface get_wfpair_val integer , parameter :: max_elem = 118 !  Reduces weight factor exponents to improve smoothness of the potential !  Head-Gordon ... real ( wp ), protected :: weight_factors ( max_elem , max_elem ) data weight_factors (:, 1 ) / & & 3.673526786_wp , 6.000000000_wp , 1.133125000_wp , 0.758750000_wp , & & 2.256250000_wp , 2.978258929_wp , 3.566562500_wp , 4.395535714_wp , & & 4.983839286_wp , 5.786071429_wp , 0.651785714_wp , 0.357633929_wp , & & 1.614464286_wp , 1.881875000_wp , 2.202767857_wp , 2.496919643_wp , & & 2.817812500_wp , 3.005000000_wp , 0.330892857_wp , 0.945937500_wp , & & 0.732008929_wp , 0.812232143_wp , 0.785491071_wp , 0.919196429_wp , & & 0.544821429_wp , 0.571562500_wp , 1.079642857_wp , 1.079642857_wp , & & 1.667946429_wp , 1.293571429_wp , 1.694687500_wp , 1.828392857_wp , & & 2.069062500_wp , 2.229508929_wp , 2.416696429_wp , 2.523660714_wp , & & 0.250669643_wp , 0.865714286_wp , 0.598303571_wp , 0.812232143_wp , & & 0.785491071_wp , 1.106383929_wp , 0.384375000_wp , 0.544821429_wp , & & 1.106383929_wp , 1.133125000_wp , 1.614464286_wp , 2.684107143_wp , & & 1.587723214_wp , 1.587723214_wp , 1.774910714_wp , 1.881875000_wp , & & 2.042321429_wp , 2.069062500_wp , 0.250669643_wp , 1.159866071_wp , & & 0.544821429_wp , 1.881875000_wp , 0.464598214_wp , 0.491339286_wp , & & 0.491339286_wp , 0.491339286_wp , 0.651785714_wp , 0.625044643_wp , & & 0.544821429_wp , 0.571562500_wp , 0.518080357_wp , 0.518080357_wp , & & 0.544821429_wp , 0.571562500_wp , 0.598303571_wp , 0.972678571_wp , & & 1.026160714_wp , 0.518080357_wp , 0.464598214_wp , 0.598303571_wp , & & 2.202767857_wp , 2.042321429_wp , 1.908616071_wp , 2.256250000_wp , & & 1.614464286_wp , 1.507500000_wp , 1.667946429_wp , 1.774910714_wp , & & 1.881875000_wp , 1.935357143_wp , 0.785491071_wp , 0.812232143_wp , & & 0.785491071_wp , 1.106383929_wp , 1.079642857_wp , 0.892455357_wp , & & 1.293571429_wp , 0.758750000_wp , 1.828392857_wp , 0.945937500_wp , & & 1.079642857_wp , 2.924776786_wp , 0.732008929_wp , 1.052901786_wp , & & 1.079642857_wp , 1.106383929_wp , 1.079642857_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 2 ) / & & 6.000000000_wp , 6.000000000_wp , 2.069062500_wp , 1.026160714_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.919196429_wp , 0.544821429_wp , & & 5.277991071_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.705267857_wp , 3.005000000_wp , & & 1.213348214_wp , 1.320312500_wp , 1.347053571_wp , 1.266830357_wp , & & 0.732008929_wp , 0.732008929_wp , 1.774910714_wp , 1.721428571_wp , & & 4.074642857_wp , 1.881875000_wp , 5.277991071_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.464598214_wp , 2.764330357_wp , 1.026160714_wp , 1.320312500_wp , & & 1.320312500_wp , 1.587723214_wp , 0.491339286_wp , 0.705267857_wp , & & 1.694687500_wp , 1.507500000_wp , 4.101383929_wp , 2.015580357_wp , & & 4.903616071_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.785491071_wp , 1.748169643_wp , & & 0.865714286_wp , 6.000000000_wp , 0.705267857_wp , 0.732008929_wp , & & 0.732008929_wp , 0.732008929_wp , 1.052901786_wp , 0.892455357_wp , & & 0.785491071_wp , 0.812232143_wp , 0.758750000_wp , 0.758750000_wp , & & 0.785491071_wp , 0.812232143_wp , 0.838973214_wp , 1.667946429_wp , & & 1.801651786_wp , 0.705267857_wp , 0.598303571_wp , 0.785491071_wp , & & 2.336473214_wp , 3.058482143_wp , 6.000000000_wp , 3.085223214_wp , & & 4.716428571_wp , 5.358214286_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 1.748169643_wp , 3.218928571_wp , & & 1.988839286_wp , 2.791071429_wp , 3.780491071_wp , 1.240089286_wp , & & 3.245669643_wp , 2.710848214_wp , 2.443437500_wp , 2.550401786_wp , & & 3.593303571_wp , 3.459598214_wp , 2.764330357_wp , 3.620044643_wp , & & 3.673526786_wp , 3.700267857_wp , 2.550401786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 3 ) / & & 1.133125000_wp , 2.069062500_wp , 0.250669643_wp , 0.384375000_wp , & & 0.544821429_wp , 0.812232143_wp , 0.838973214_wp , 1.026160714_wp , & & 1.373794643_wp , 1.641205357_wp , 0.250669643_wp , 0.250669643_wp , & & 0.357633929_wp , 0.464598214_wp , 0.464598214_wp , 0.518080357_wp , & & 0.571562500_wp , 0.678526786_wp , 0.116964286_wp , 0.223928571_wp , & & 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , 0.277410714_wp , & & 0.277410714_wp , 0.304151786_wp , 0.277410714_wp , 0.277410714_wp , & & 0.411116071_wp , 0.330892857_wp , 0.384375000_wp , 0.437857143_wp , & & 0.464598214_wp , 0.437857143_wp , 0.491339286_wp , 0.571562500_wp , & & 0.090223214_wp , 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , & & 0.170446429_wp , 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , & & 0.250669643_wp , 0.304151786_wp , 0.411116071_wp , 0.330892857_wp , & & 0.330892857_wp , 0.384375000_wp , 0.411116071_wp , 0.411116071_wp , & & 0.437857143_wp , 0.437857143_wp , 0.090223214_wp , 0.197187500_wp , & & 0.170446429_wp , 0.384375000_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , & & 0.250669643_wp , 0.330892857_wp , 0.357633929_wp , 0.330892857_wp , & & 0.330892857_wp , 0.437857143_wp , 0.437857143_wp , 0.411116071_wp , & & 0.330892857_wp , 0.357633929_wp , 0.411116071_wp , 0.384375000_wp , & & 0.384375000_wp , 0.437857143_wp , 0.090223214_wp , 0.116964286_wp , & & 0.223928571_wp , 0.197187500_wp , 0.170446429_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.277410714_wp , 0.250669643_wp , & & 0.143705357_wp , 0.250669643_wp , 0.197187500_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 4 ) / & & 0.758750000_wp , 1.026160714_wp , 0.384375000_wp , 0.330892857_wp , & & 0.464598214_wp , 0.518080357_wp , 0.544821429_wp , 0.598303571_wp , & & 0.705267857_wp , 0.812232143_wp , 0.304151786_wp , 0.223928571_wp , & & 0.304151786_wp , 0.304151786_wp , 0.304151786_wp , 0.330892857_wp , & & 0.384375000_wp , 0.437857143_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.277410714_wp , 0.223928571_wp , 0.277410714_wp , & & 0.223928571_wp , 0.250669643_wp , 0.330892857_wp , 0.330892857_wp , & & 0.304151786_wp , 0.330892857_wp , 0.277410714_wp , 0.304151786_wp , & & 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , & & 0.170446429_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.277410714_wp , 0.170446429_wp , 0.223928571_wp , & & 0.277410714_wp , 0.304151786_wp , 0.277410714_wp , 0.277410714_wp , & & 0.277410714_wp , 0.277410714_wp , 0.250669643_wp , 0.250669643_wp , & & 0.277410714_wp , 0.277410714_wp , 0.116964286_wp , 0.197187500_wp , & & 0.223928571_wp , 0.250669643_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.250669643_wp , 0.250669643_wp , & & 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.330892857_wp , & & 0.304151786_wp , 0.250669643_wp , 0.197187500_wp , 0.223928571_wp , & & 0.277410714_wp , 0.277410714_wp , 0.277410714_wp , 0.277410714_wp , & & 0.277410714_wp , 0.250669643_wp , 0.250669643_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 5 ) / & & 2.256250000_wp , 6.000000000_wp , 0.544821429_wp , 0.464598214_wp , & & 1.480758929_wp , 1.935357143_wp , 2.630625000_wp , 3.539821429_wp , & & 4.021160714_wp , 4.876875000_wp , 0.357633929_wp , 0.197187500_wp , & & 0.972678571_wp , 1.320312500_wp , 1.881875000_wp , 2.176026786_wp , & & 2.443437500_wp , 2.523660714_wp , 0.143705357_wp , 0.437857143_wp , & & 0.330892857_wp , 0.384375000_wp , 0.304151786_wp , 0.544821429_wp , & & 0.357633929_wp , 0.357633929_wp , 0.491339286_wp , 0.518080357_wp , & & 0.972678571_wp , 0.598303571_wp , 1.052901786_wp , 1.320312500_wp , & & 1.721428571_wp , 1.988839286_wp , 2.202767857_wp , 2.176026786_wp , & & 0.116964286_wp , 0.411116071_wp , 0.330892857_wp , 0.384375000_wp , & & 0.357633929_wp , 0.518080357_wp , 0.250669643_wp , 0.357633929_wp , & & 0.464598214_wp , 0.544821429_wp , 0.945937500_wp , 0.625044643_wp , & & 0.999419643_wp , 1.106383929_wp , 1.400535714_wp , 1.667946429_wp , & & 1.748169643_wp , 1.774910714_wp , 0.116964286_wp , 0.384375000_wp , & & 0.277410714_wp , 1.560982143_wp , 0.250669643_wp , 0.250669643_wp , & & 0.250669643_wp , 0.250669643_wp , 0.330892857_wp , 0.304151786_wp , & & 0.277410714_wp , 0.277410714_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.277410714_wp , 0.304151786_wp , 0.491339286_wp , & & 0.464598214_wp , 0.330892857_wp , 0.304151786_wp , 0.384375000_wp , & & 0.651785714_wp , 1.159866071_wp , 1.454017857_wp , 0.919196429_wp , & & 1.855133929_wp , 0.945937500_wp , 1.213348214_wp , 1.454017857_wp , & & 1.721428571_wp , 1.641205357_wp , 0.357633929_wp , 0.384375000_wp , & & 0.357633929_wp , 0.437857143_wp , 0.357633929_wp , 0.411116071_wp , & & 0.919196429_wp , 0.330892857_wp , 0.732008929_wp , 0.411116071_wp , & & 0.357633929_wp , 0.705267857_wp , 0.330892857_wp , 0.357633929_wp , & & 0.384375000_wp , 0.411116071_wp , 0.464598214_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 6 ) / & & 2.978258929_wp , 6.000000000_wp , 0.812232143_wp , 0.518080357_wp , & & 1.935357143_wp , 1.828392857_wp , 2.336473214_wp , 3.245669643_wp , & & 3.887455357_wp , 4.716428571_wp , 0.384375000_wp , 0.250669643_wp , & & 1.480758929_wp , 1.534241071_wp , 1.694687500_wp , 1.855133929_wp , & & 2.069062500_wp , 2.309732143_wp , 0.170446429_wp , 1.026160714_wp , & & 0.518080357_wp , 0.625044643_wp , 0.491339286_wp , 0.651785714_wp , & & 0.384375000_wp , 0.384375000_wp , 0.812232143_wp , 0.812232143_wp , & & 1.560982143_wp , 0.892455357_wp , 1.507500000_wp , 1.480758929_wp , & & 1.614464286_wp , 1.694687500_wp , 1.855133929_wp , 1.935357143_wp , & & 0.143705357_wp , 0.865714286_wp , 0.464598214_wp , 0.625044643_wp , & & 0.571562500_wp , 0.785491071_wp , 0.250669643_wp , 0.384375000_wp , & & 0.758750000_wp , 0.812232143_wp , 1.454017857_wp , 0.972678571_wp , & & 1.427276786_wp , 1.347053571_wp , 1.400535714_wp , 1.454017857_wp , & & 1.534241071_wp , 1.587723214_wp , 0.116964286_wp , 0.838973214_wp , & & 0.411116071_wp , 1.454017857_wp , 0.304151786_wp , 0.304151786_wp , & & 0.304151786_wp , 0.330892857_wp , 0.491339286_wp , 0.384375000_wp , & & 0.357633929_wp , 0.357633929_wp , 0.330892857_wp , 0.330892857_wp , & & 0.330892857_wp , 0.357633929_wp , 0.384375000_wp , 0.838973214_wp , & & 0.812232143_wp , 0.357633929_wp , 0.304151786_wp , 0.411116071_wp , & & 1.159866071_wp , 1.293571429_wp , 1.507500000_wp , 1.560982143_wp , & & 1.347053571_wp , 1.347053571_wp , 1.347053571_wp , 1.373794643_wp , & & 1.427276786_wp , 1.507500000_wp , 0.838973214_wp , 0.999419643_wp , & & 0.705267857_wp , 0.919196429_wp , 0.838973214_wp , 0.518080357_wp , & & 0.812232143_wp , 0.544821429_wp , 1.347053571_wp , 1.186607143_wp , & & 1.026160714_wp , 0.812232143_wp , 1.774910714_wp , 1.454017857_wp , & & 1.427276786_wp , 1.507500000_wp , 1.106383929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 7 ) / & & 3.566562500_wp , 6.000000000_wp , 0.838973214_wp , 0.544821429_wp , & & 2.630625000_wp , 2.336473214_wp , 3.352633929_wp , 5.438437500_wp , & & 6.000000000_wp , 6.000000000_wp , 0.437857143_wp , 0.250669643_wp , & & 2.095803571_wp , 2.309732143_wp , 2.684107143_wp , 3.058482143_wp , & & 3.593303571_wp , 3.753750000_wp , 0.197187500_wp , 1.079642857_wp , & & 0.625044643_wp , 0.705267857_wp , 0.625044643_wp , 0.678526786_wp , & & 0.411116071_wp , 0.411116071_wp , 0.919196429_wp , 0.919196429_wp , & & 1.908616071_wp , 0.999419643_wp , 2.256250000_wp , 2.282991071_wp , & & 2.496919643_wp , 2.710848214_wp , 3.058482143_wp , 3.031741071_wp , & & 0.143705357_wp , 0.919196429_wp , 0.518080357_wp , 0.705267857_wp , & & 0.651785714_wp , 0.865714286_wp , 0.277410714_wp , 0.384375000_wp , & & 0.865714286_wp , 0.892455357_wp , 1.881875000_wp , 1.079642857_wp , & & 2.095803571_wp , 1.988839286_wp , 2.095803571_wp , 2.229508929_wp , & & 2.389955357_wp , 2.443437500_wp , 0.143705357_wp , 1.106383929_wp , & & 0.464598214_wp , 2.256250000_wp , 0.384375000_wp , 0.384375000_wp , & & 0.384375000_wp , 0.384375000_wp , 0.571562500_wp , 0.464598214_wp , & & 0.411116071_wp , 0.437857143_wp , 0.411116071_wp , 0.411116071_wp , & & 0.411116071_wp , 0.437857143_wp , 0.464598214_wp , 0.919196429_wp , & & 0.919196429_wp , 0.384375000_wp , 0.330892857_wp , 0.437857143_wp , & & 1.240089286_wp , 1.320312500_wp , 2.256250000_wp , 1.667946429_wp , & & 2.095803571_wp , 1.908616071_wp , 1.988839286_wp , 2.069062500_wp , & & 2.176026786_wp , 2.229508929_wp , 0.865714286_wp , 0.999419643_wp , & & 0.838973214_wp , 1.427276786_wp , 1.694687500_wp , 0.678526786_wp , & & 1.480758929_wp , 0.678526786_wp , 1.240089286_wp , 1.266830357_wp , & & 1.587723214_wp , 1.774910714_wp , 2.042321429_wp , 1.881875000_wp , & & 1.855133929_wp , 1.881875000_wp , 1.320312500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 8 ) / & & 4.395535714_wp , 6.000000000_wp , 1.026160714_wp , 0.598303571_wp , & & 3.539821429_wp , 3.245669643_wp , 5.438437500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.518080357_wp , 0.304151786_wp , & & 3.325892857_wp , 3.780491071_wp , 5.919776786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.223928571_wp , 1.373794643_wp , & & 0.678526786_wp , 0.785491071_wp , 0.705267857_wp , 0.758750000_wp , & & 0.437857143_wp , 0.437857143_wp , 0.999419643_wp , 0.999419643_wp , & & 2.256250000_wp , 1.079642857_wp , 3.218928571_wp , 3.940937500_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.197187500_wp , 1.052901786_wp , 0.571562500_wp , 0.758750000_wp , & & 0.732008929_wp , 0.919196429_wp , 0.304151786_wp , 0.437857143_wp , & & 0.945937500_wp , 0.945937500_wp , 2.309732143_wp , 1.159866071_wp , & & 3.058482143_wp , 3.459598214_wp , 5.545401786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.170446429_wp , 1.159866071_wp , & & 0.491339286_wp , 6.000000000_wp , 0.411116071_wp , 0.411116071_wp , & & 0.411116071_wp , 0.437857143_wp , 0.625044643_wp , 0.518080357_wp , & & 0.464598214_wp , 0.464598214_wp , 0.437857143_wp , 0.437857143_wp , & & 0.464598214_wp , 0.464598214_wp , 0.491339286_wp , 0.972678571_wp , & & 0.999419643_wp , 0.411116071_wp , 0.357633929_wp , 0.491339286_wp , & & 1.347053571_wp , 1.480758929_wp , 4.903616071_wp , 1.801651786_wp , & & 2.951517857_wp , 2.924776786_wp , 4.903616071_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.945937500_wp , 2.496919643_wp , & & 1.052901786_wp , 1.587723214_wp , 2.042321429_wp , 0.732008929_wp , & & 1.828392857_wp , 0.812232143_wp , 1.400535714_wp , 1.507500000_wp , & & 2.149285714_wp , 2.042321429_wp , 0.732008929_wp , 2.550401786_wp , & & 2.523660714_wp , 2.470178571_wp , 1.507500000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 9 ) / & & 4.983839286_wp , 6.000000000_wp , 1.373794643_wp , 0.705267857_wp , & & 4.021160714_wp , 3.887455357_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.625044643_wp , 0.357633929_wp , & & 3.620044643_wp , 4.181607143_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.384375000_wp , 1.774910714_wp , & & 0.785491071_wp , 0.892455357_wp , 0.838973214_wp , 0.919196429_wp , & & 0.518080357_wp , 0.518080357_wp , 1.159866071_wp , 1.159866071_wp , & & 2.630625000_wp , 1.240089286_wp , 3.780491071_wp , 4.368794643_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.250669643_wp , 1.293571429_wp , 0.651785714_wp , 0.892455357_wp , & & 0.838973214_wp , 1.052901786_wp , 0.357633929_wp , 0.491339286_wp , & & 1.133125000_wp , 1.052901786_wp , 2.630625000_wp , 1.347053571_wp , & & 3.566562500_wp , 3.753750000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.384375000_wp , 1.347053571_wp , & & 0.571562500_wp , 6.000000000_wp , 0.464598214_wp , 0.491339286_wp , & & 0.491339286_wp , 0.491339286_wp , 0.705267857_wp , 0.598303571_wp , & & 0.544821429_wp , 0.544821429_wp , 0.518080357_wp , 0.518080357_wp , & & 0.518080357_wp , 0.544821429_wp , 0.571562500_wp , 1.106383929_wp , & & 1.159866071_wp , 0.491339286_wp , 0.437857143_wp , 0.571562500_wp , & & 1.560982143_wp , 1.774910714_wp , 5.625625000_wp , 2.095803571_wp , & & 3.406116071_wp , 3.165446429_wp , 5.331473214_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 1.106383929_wp , 2.496919643_wp , & & 1.400535714_wp , 1.855133929_wp , 2.389955357_wp , 0.865714286_wp , & & 2.149285714_wp , 1.801651786_wp , 1.748169643_wp , 1.694687500_wp , & & 2.309732143_wp , 2.336473214_wp , 2.122544643_wp , 2.550401786_wp , & & 2.523660714_wp , 2.603883929_wp , 1.774910714_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 10 ) / & & 5.786071429_wp , 6.000000000_wp , 1.641205357_wp , 0.812232143_wp , & & 4.876875000_wp , 4.716428571_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.732008929_wp , 0.437857143_wp , & & 4.235089286_wp , 5.277991071_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.678526786_wp , 2.550401786_wp , & & 0.919196429_wp , 1.026160714_wp , 0.999419643_wp , 1.079642857_wp , & & 0.598303571_wp , 0.571562500_wp , 1.347053571_wp , 1.320312500_wp , & & 3.058482143_wp , 1.427276786_wp , 4.181607143_wp , 5.652366071_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.357633929_wp , 2.149285714_wp , 0.758750000_wp , 1.026160714_wp , & & 0.999419643_wp , 1.186607143_wp , 0.384375000_wp , 0.544821429_wp , & & 1.293571429_wp , 1.186607143_wp , 3.085223214_wp , 1.534241071_wp , & & 3.940937500_wp , 4.876875000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 1.079642857_wp , 1.400535714_wp , & & 0.651785714_wp , 6.000000000_wp , 0.544821429_wp , 0.544821429_wp , & & 0.571562500_wp , 0.571562500_wp , 0.812232143_wp , 0.678526786_wp , & & 0.598303571_wp , 0.625044643_wp , 0.571562500_wp , 0.598303571_wp , & & 0.598303571_wp , 0.625044643_wp , 0.651785714_wp , 1.240089286_wp , & & 1.373794643_wp , 0.544821429_wp , 0.491339286_wp , 0.625044643_wp , & & 1.774910714_wp , 2.095803571_wp , 6.000000000_wp , 2.363214286_wp , & & 3.780491071_wp , 3.940937500_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 1.320312500_wp , 2.871294643_wp , & & 1.534241071_wp , 2.095803571_wp , 2.737589286_wp , 0.919196429_wp , & & 2.470178571_wp , 2.042321429_wp , 1.935357143_wp , 1.935357143_wp , & & 2.844553571_wp , 2.710848214_wp , 2.336473214_wp , 3.031741071_wp , & & 3.031741071_wp , 3.005000000_wp , 1.935357143_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 11 ) / & & 0.651785714_wp , 0.919196429_wp , 0.250669643_wp , 0.304151786_wp , & & 0.357633929_wp , 0.384375000_wp , 0.437857143_wp , 0.518080357_wp , & & 0.625044643_wp , 0.732008929_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.170446429_wp , 0.197187500_wp , & & 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , 0.250669643_wp , & & 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , & & 0.223928571_wp , 0.277410714_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.143705357_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.223928571_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.250669643_wp , 0.223928571_wp , 0.250669643_wp , & & 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.197187500_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.197187500_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.143705357_wp , 0.197187500_wp , 0.170446429_wp , 0.143705357_wp , & & 0.170446429_wp , 0.143705357_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 12 ) / & & 0.357633929_wp , 0.544821429_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.250669643_wp , 0.250669643_wp , 0.304151786_wp , & & 0.357633929_wp , 0.437857143_wp , 0.250669643_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.197187500_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , 0.143705357_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.036741071_wp , 0.063482143_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.116964286_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 13 ) / & & 1.614464286_wp , 5.277991071_wp , 0.357633929_wp , 0.304151786_wp , & & 0.972678571_wp , 1.480758929_wp , 2.095803571_wp , 3.325892857_wp , & & 3.620044643_wp , 4.235089286_wp , 0.250669643_wp , 0.116964286_wp , & & 1.855133929_wp , 0.865714286_wp , 2.176026786_wp , 2.309732143_wp , & & 2.470178571_wp , 2.657366071_wp , 0.090223214_wp , 0.277410714_wp , & & 0.223928571_wp , 0.223928571_wp , 0.170446429_wp , 0.357633929_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 0.330892857_wp , & & 0.571562500_wp , 0.384375000_wp , 1.801651786_wp , 0.945937500_wp , & & 2.069062500_wp , 2.176026786_wp , 2.256250000_wp , 2.389955357_wp , & & 0.063482143_wp , 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.330892857_wp , 0.170446429_wp , 0.250669643_wp , & & 0.304151786_wp , 0.357633929_wp , 0.571562500_wp , 0.384375000_wp , & & 1.667946429_wp , 0.625044643_wp , 1.935357143_wp , 1.988839286_wp , & & 2.042321429_wp , 2.149285714_wp , 0.063482143_wp , 0.223928571_wp , & & 0.197187500_wp , 1.988839286_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.277410714_wp , & & 0.277410714_wp , 0.223928571_wp , 0.197187500_wp , 0.277410714_wp , & & 0.384375000_wp , 0.651785714_wp , 1.293571429_wp , 0.544821429_wp , & & 0.437857143_wp , 0.491339286_wp , 1.908616071_wp , 1.908616071_wp , & & 1.988839286_wp , 2.069062500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.250669643_wp , & & 1.079642857_wp , 0.197187500_wp , 0.357633929_wp , 0.250669643_wp , & & 0.197187500_wp , 0.304151786_wp , 0.223928571_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.277410714_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 14 ) / & & 1.881875000_wp , 6.000000000_wp , 0.464598214_wp , 0.304151786_wp , & & 1.320312500_wp , 1.534241071_wp , 2.309732143_wp , 3.780491071_wp , & & 4.181607143_wp , 5.277991071_wp , 0.223928571_wp , 0.116964286_wp , & & 0.865714286_wp , 1.133125000_wp , 1.908616071_wp , 2.496919643_wp , & & 2.844553571_wp , 2.844553571_wp , 0.090223214_wp , 0.357633929_wp , & & 0.250669643_wp , 0.277410714_wp , 0.223928571_wp , 0.411116071_wp , & & 0.250669643_wp , 0.250669643_wp , 0.384375000_wp , 0.437857143_wp , & & 0.812232143_wp , 0.491339286_wp , 1.801651786_wp , 1.186607143_wp , & & 1.962098214_wp , 2.389955357_wp , 2.523660714_wp , 2.309732143_wp , & & 0.063482143_wp , 0.330892857_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.411116071_wp , 0.170446429_wp , 0.250669643_wp , & & 0.357633929_wp , 0.437857143_wp , 0.812232143_wp , 0.491339286_wp , & & 1.855133929_wp , 0.945937500_wp , 1.427276786_wp , 1.962098214_wp , & & 2.202767857_wp , 1.908616071_wp , 0.063482143_wp , 0.330892857_wp , & & 0.223928571_wp , 1.667946429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.411116071_wp , & & 0.384375000_wp , 0.223928571_wp , 0.197187500_wp , 0.277410714_wp , & & 0.491339286_wp , 0.785491071_wp , 1.373794643_wp , 0.732008929_wp , & & 1.721428571_wp , 0.785491071_wp , 1.213348214_wp , 1.694687500_wp , & & 2.042321429_wp , 1.801651786_wp , 0.304151786_wp , 0.304151786_wp , & & 0.277410714_wp , 0.277410714_wp , 0.732008929_wp , 0.357633929_wp , & & 0.785491071_wp , 0.250669643_wp , 0.625044643_wp , 0.330892857_wp , & & 0.250669643_wp , 0.437857143_wp , 0.250669643_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.357633929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 15 ) / & & 2.202767857_wp , 6.000000000_wp , 0.464598214_wp , 0.304151786_wp , & & 1.881875000_wp , 1.694687500_wp , 2.684107143_wp , 5.919776786_wp , & & 6.000000000_wp , 6.000000000_wp , 0.250669643_wp , 0.143705357_wp , & & 2.176026786_wp , 1.908616071_wp , 2.630625000_wp , 3.566562500_wp , & & 3.887455357_wp , 4.342053571_wp , 0.090223214_wp , 0.491339286_wp , & & 0.304151786_wp , 0.357633929_wp , 0.250669643_wp , 0.411116071_wp , & & 0.250669643_wp , 0.250669643_wp , 0.464598214_wp , 0.518080357_wp , & & 1.106383929_wp , 0.571562500_wp , 2.015580357_wp , 1.962098214_wp , & & 2.630625000_wp , 3.218928571_wp , 3.432857143_wp , 3.727008929_wp , & & 0.090223214_wp , 0.437857143_wp , 0.304151786_wp , 0.357633929_wp , & & 0.330892857_wp , 0.491339286_wp , 0.170446429_wp , 0.250669643_wp , & & 0.437857143_wp , 0.518080357_wp , 1.133125000_wp , 0.598303571_wp , & & 1.962098214_wp , 1.667946429_wp , 2.470178571_wp , 2.844553571_wp , & & 2.978258929_wp , 3.165446429_wp , 0.063482143_wp , 0.437857143_wp , & & 0.250669643_wp , 2.791071429_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.304151786_wp , 0.277410714_wp , & & 0.250669643_wp , 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , 0.518080357_wp , & & 0.464598214_wp , 0.223928571_wp , 0.197187500_wp , 0.277410714_wp , & & 0.625044643_wp , 0.812232143_wp , 2.309732143_wp , 0.892455357_wp , & & 1.774910714_wp , 1.454017857_wp , 2.416696429_wp , 2.710848214_wp , & & 2.791071429_wp , 2.951517857_wp , 0.411116071_wp , 0.437857143_wp , & & 0.357633929_wp , 0.972678571_wp , 0.919196429_wp , 0.384375000_wp , & & 0.625044643_wp , 0.330892857_wp , 0.838973214_wp , 0.411116071_wp , & & 0.999419643_wp , 0.518080357_wp , 0.304151786_wp , 0.304151786_wp , & & 0.357633929_wp , 0.384375000_wp , 0.437857143_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 16 ) / & & 2.496919643_wp , 6.000000000_wp , 0.518080357_wp , 0.330892857_wp , & & 2.176026786_wp , 1.855133929_wp , 3.058482143_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.277410714_wp , 0.143705357_wp , & & 2.309732143_wp , 2.496919643_wp , 3.566562500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.116964286_wp , 0.571562500_wp , & & 0.357633929_wp , 0.411116071_wp , 0.304151786_wp , 0.437857143_wp , & & 0.250669643_wp , 0.277410714_wp , 0.544821429_wp , 0.571562500_wp , & & 1.293571429_wp , 0.625044643_wp , 2.122544643_wp , 2.657366071_wp , & & 3.860714286_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.090223214_wp , 0.518080357_wp , 0.330892857_wp , 0.411116071_wp , & & 0.384375000_wp , 0.544821429_wp , 0.197187500_wp , 0.277410714_wp , & & 0.518080357_wp , 0.571562500_wp , 1.320312500_wp , 0.678526786_wp , & & 2.069062500_wp , 2.256250000_wp , 3.673526786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.598303571_wp , & & 0.304151786_wp , 6.000000000_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.250669643_wp , 0.357633929_wp , 0.304151786_wp , & & 0.277410714_wp , 0.277410714_wp , 0.250669643_wp , 0.250669643_wp , & & 0.250669643_wp , 0.277410714_wp , 0.277410714_wp , 0.571562500_wp , & & 0.518080357_wp , 0.250669643_wp , 0.223928571_wp , 0.277410714_wp , & & 0.732008929_wp , 0.865714286_wp , 3.646785714_wp , 0.999419643_wp , & & 1.881875000_wp , 1.988839286_wp , 3.753750000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.491339286_wp , 0.518080357_wp , & & 0.437857143_wp , 0.999419643_wp , 1.186607143_wp , 0.437857143_wp , & & 0.758750000_wp , 0.357633929_wp , 0.919196429_wp , 0.491339286_wp , & & 1.133125000_wp , 0.598303571_wp , 0.357633929_wp , 0.411116071_wp , & & 1.962098214_wp , 1.721428571_wp , 0.518080357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 17 ) / & & 2.817812500_wp , 6.000000000_wp , 0.571562500_wp , 0.384375000_wp , & & 2.443437500_wp , 2.069062500_wp , 3.593303571_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.304151786_wp , 0.170446429_wp , & & 2.470178571_wp , 2.844553571_wp , 3.887455357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.116964286_wp , 0.651785714_wp , & & 0.411116071_wp , 0.464598214_wp , 0.357633929_wp , 0.491339286_wp , & & 0.277410714_wp , 0.304151786_wp , 0.598303571_wp , 0.625044643_wp , & & 1.480758929_wp , 0.705267857_wp , 2.309732143_wp , 3.085223214_wp , & & 4.208348214_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.090223214_wp , 0.598303571_wp , 0.384375000_wp , 0.464598214_wp , & & 0.437857143_wp , 0.598303571_wp , 0.197187500_wp , 0.304151786_wp , & & 0.571562500_wp , 0.625044643_wp , 1.507500000_wp , 0.732008929_wp , & & 2.256250000_wp , 2.630625000_wp , 4.021160714_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.090223214_wp , 0.838973214_wp , & & 0.330892857_wp , 6.000000000_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.277410714_wp , 0.384375000_wp , 0.330892857_wp , & & 0.304151786_wp , 0.304151786_wp , 0.277410714_wp , 0.277410714_wp , & & 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , 0.651785714_wp , & & 0.598303571_wp , 0.277410714_wp , 0.250669643_wp , 0.330892857_wp , & & 0.838973214_wp , 0.945937500_wp , 4.689687500_wp , 1.133125000_wp , & & 2.069062500_wp , 2.256250000_wp , 4.101383929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.571562500_wp , 2.176026786_wp , & & 0.518080357_wp , 1.052901786_wp , 1.293571429_wp , 0.518080357_wp , & & 0.865714286_wp , 0.437857143_wp , 1.133125000_wp , 0.571562500_wp , & & 1.266830357_wp , 0.732008929_wp , 0.411116071_wp , 0.945937500_wp , & & 1.988839286_wp , 1.881875000_wp , 0.625044643_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 18 ) / & & 3.005000000_wp , 6.000000000_wp , 0.678526786_wp , 0.437857143_wp , & & 2.523660714_wp , 2.309732143_wp , 3.753750000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.330892857_wp , 0.197187500_wp , & & 2.657366071_wp , 2.844553571_wp , 4.342053571_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.143705357_wp , 0.758750000_wp , & & 0.464598214_wp , 0.544821429_wp , 0.411116071_wp , 0.544821429_wp , & & 0.330892857_wp , 0.330892857_wp , 0.678526786_wp , 0.705267857_wp , & & 1.614464286_wp , 0.785491071_wp , 2.550401786_wp , 2.898035714_wp , & & 4.636205357_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.116964286_wp , 0.678526786_wp , 0.411116071_wp , 0.544821429_wp , & & 0.491339286_wp , 0.678526786_wp , 0.223928571_wp , 0.330892857_wp , & & 0.651785714_wp , 0.705267857_wp , 1.614464286_wp , 0.838973214_wp , & & 2.470178571_wp , 2.470178571_wp , 4.475758929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.090223214_wp , 0.945937500_wp , & & 0.357633929_wp , 6.000000000_wp , 0.304151786_wp , 0.304151786_wp , & & 0.304151786_wp , 0.304151786_wp , 0.437857143_wp , 0.384375000_wp , & & 0.330892857_wp , 0.330892857_wp , 0.330892857_wp , 0.330892857_wp , & & 0.330892857_wp , 0.330892857_wp , 0.357633929_wp , 0.705267857_wp , & & 0.678526786_wp , 0.304151786_wp , 0.277410714_wp , 0.357633929_wp , & & 0.945937500_wp , 1.079642857_wp , 3.727008929_wp , 1.240089286_wp , & & 2.309732143_wp , 2.229508929_wp , 3.807232143_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.651785714_wp , 2.363214286_wp , & & 0.598303571_wp , 1.159866071_wp , 1.454017857_wp , 0.544821429_wp , & & 1.026160714_wp , 0.491339286_wp , 1.159866071_wp , 0.651785714_wp , & & 1.373794643_wp , 0.892455357_wp , 0.464598214_wp , 1.320312500_wp , & & 2.149285714_wp , 1.935357143_wp , 0.732008929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 19 ) / & & 0.330892857_wp , 0.705267857_wp , 0.116964286_wp , 0.223928571_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , & & 0.384375000_wp , 0.678526786_wp , 0.170446429_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.036741071_wp , 0.063482143_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.063482143_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.036741071_wp , 0.063482143_wp , 0.063482143_wp , 0.116964286_wp , & & 0.090223214_wp , 0.090223214_wp , 0.143705357_wp , 0.116964286_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.063482143_wp , 0.090223214_wp , 0.063482143_wp , 0.063482143_wp , & & 0.090223214_wp , 0.090223214_wp , 0.036741071_wp , 0.036741071_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.063482143_wp , 0.063482143_wp , & & 0.090223214_wp , 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.090223214_wp , 0.036741071_wp , 0.036741071_wp , & & 0.036741071_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.036741071_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 20 ) / & & 0.945937500_wp , 3.005000000_wp , 0.223928571_wp , 0.250669643_wp , & & 0.437857143_wp , 1.026160714_wp , 1.079642857_wp , 1.373794643_wp , & & 1.774910714_wp , 2.550401786_wp , 0.197187500_wp , 0.116964286_wp , & & 0.277410714_wp , 0.357633929_wp , 0.491339286_wp , 0.571562500_wp , & & 0.651785714_wp , 0.758750000_wp , 0.063482143_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.330892857_wp , 0.277410714_wp , 0.304151786_wp , 0.357633929_wp , & & 0.437857143_wp , 0.491339286_wp , 0.544821429_wp , 0.598303571_wp , & & 0.036741071_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.223928571_wp , 0.116964286_wp , 0.197187500_wp , & & 0.197187500_wp , 0.250669643_wp , 0.330892857_wp , 0.277410714_wp , & & 0.250669643_wp , 0.304151786_wp , 0.357633929_wp , 0.411116071_wp , & & 0.437857143_wp , 0.464598214_wp , 0.036741071_wp , 0.143705357_wp , & & 0.116964286_wp , 0.384375000_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.223928571_wp , & & 0.250669643_wp , 0.357633929_wp , 0.411116071_wp , 0.330892857_wp , & & 0.250669643_wp , 0.277410714_wp , 0.330892857_wp , 0.357633929_wp , & & 0.411116071_wp , 0.411116071_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , 0.170446429_wp , & & 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 21 ) / & & 0.732008929_wp , 1.213348214_wp , 0.170446429_wp , 0.250669643_wp , & & 0.330892857_wp , 0.518080357_wp , 0.625044643_wp , 0.678526786_wp , & & 0.785491071_wp , 0.919196429_wp , 0.170446429_wp , 0.143705357_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 0.357633929_wp , & & 0.411116071_wp , 0.464598214_wp , 0.090223214_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , 0.384375000_wp , & & 0.090223214_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.063482143_wp , 0.143705357_wp , & & 0.116964286_wp , 0.250669643_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.250669643_wp , 0.277410714_wp , 0.250669643_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , & & 0.250669643_wp , 0.277410714_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 22 ) / & & 0.812232143_wp , 1.320312500_wp , 0.143705357_wp , 0.277410714_wp , & & 0.384375000_wp , 0.625044643_wp , 0.705267857_wp , 0.785491071_wp , & & 0.892455357_wp , 1.026160714_wp , 0.143705357_wp , 0.143705357_wp , & & 0.223928571_wp , 0.277410714_wp , 0.357633929_wp , 0.411116071_wp , & & 0.464598214_wp , 0.544821429_wp , 0.090223214_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , & & 0.170446429_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , 0.277410714_wp , & & 0.330892857_wp , 0.357633929_wp , 0.384375000_wp , 0.437857143_wp , & & 0.090223214_wp , 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.063482143_wp , 0.143705357_wp , & & 0.143705357_wp , 0.277410714_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.277410714_wp , 0.304151786_wp , 0.277410714_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.116964286_wp , 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 23 ) / & & 0.785491071_wp , 1.347053571_wp , 0.143705357_wp , 0.223928571_wp , & & 0.304151786_wp , 0.491339286_wp , 0.625044643_wp , 0.705267857_wp , & & 0.838973214_wp , 0.999419643_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , & & 0.357633929_wp , 0.411116071_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.250669643_wp , 0.250669643_wp , 0.304151786_wp , 0.330892857_wp , & & 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.250669643_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.197187500_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 24 ) / & & 0.919196429_wp , 1.266830357_wp , 0.277410714_wp , 0.277410714_wp , & & 0.544821429_wp , 0.651785714_wp , 0.678526786_wp , 0.758750000_wp , & & 0.919196429_wp , 1.079642857_wp , 0.250669643_wp , 0.116964286_wp , & & 0.357633929_wp , 0.411116071_wp , 0.411116071_wp , 0.437857143_wp , & & 0.491339286_wp , 0.544821429_wp , 0.090223214_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.304151786_wp , & & 0.223928571_wp , 0.223928571_wp , 0.277410714_wp , 0.304151786_wp , & & 0.384375000_wp , 0.330892857_wp , 0.357633929_wp , 0.411116071_wp , & & 0.384375000_wp , 0.411116071_wp , 0.437857143_wp , 0.464598214_wp , & & 0.063482143_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.277410714_wp , 0.143705357_wp , 0.223928571_wp , & & 0.250669643_wp , 0.304151786_wp , 0.384375000_wp , 0.330892857_wp , & & 0.330892857_wp , 0.357633929_wp , 0.357633929_wp , 0.357633929_wp , & & 0.357633929_wp , 0.384375000_wp , 0.063482143_wp , 0.223928571_wp , & & 0.170446429_wp , 0.330892857_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.223928571_wp , & & 0.250669643_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.304151786_wp , 0.384375000_wp , 0.384375000_wp , 0.384375000_wp , & & 0.330892857_wp , 0.357633929_wp , 0.330892857_wp , 0.330892857_wp , & & 0.357633929_wp , 0.357633929_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.197187500_wp , 0.170446429_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.277410714_wp , 0.250669643_wp , & & 0.170446429_wp , 0.250669643_wp , 0.197187500_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 25 ) / & & 0.544821429_wp , 0.732008929_wp , 0.277410714_wp , 0.223928571_wp , & & 0.357633929_wp , 0.384375000_wp , 0.411116071_wp , 0.437857143_wp , & & 0.518080357_wp , 0.598303571_wp , 0.250669643_wp , 0.143705357_wp , & & 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , & & 0.277410714_wp , 0.330892857_wp , 0.143705357_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.250669643_wp , & & 0.223928571_wp , 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.116964286_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.143705357_wp , 0.170446429_wp , & & 0.223928571_wp , 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.090223214_wp , 0.143705357_wp , & & 0.170446429_wp , 0.197187500_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.197187500_wp , 0.143705357_wp , 0.170446429_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.143705357_wp , 0.143705357_wp , & & 0.116964286_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 26 ) / & & 0.571562500_wp , 0.732008929_wp , 0.304151786_wp , 0.250669643_wp , & & 0.357633929_wp , 0.384375000_wp , 0.411116071_wp , 0.437857143_wp , & & 0.518080357_wp , 0.571562500_wp , 0.250669643_wp , 0.143705357_wp , & & 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.143705357_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.277410714_wp , 0.277410714_wp , & & 0.250669643_wp , 0.277410714_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , 0.277410714_wp , & & 0.116964286_wp , 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.250669643_wp , 0.143705357_wp , 0.197187500_wp , & & 0.223928571_wp , 0.250669643_wp , 0.223928571_wp , 0.250669643_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.250669643_wp , 0.090223214_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , & & 0.250669643_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 27 ) / & & 1.079642857_wp , 1.774910714_wp , 0.277410714_wp , 0.330892857_wp , & & 0.491339286_wp , 0.812232143_wp , 0.919196429_wp , 0.999419643_wp , & & 1.159866071_wp , 1.347053571_wp , 0.250669643_wp , 0.143705357_wp , & & 0.304151786_wp , 0.384375000_wp , 0.464598214_wp , 0.544821429_wp , & & 0.598303571_wp , 0.678526786_wp , 0.116964286_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.277410714_wp , & & 0.250669643_wp , 0.277410714_wp , 0.277410714_wp , 0.277410714_wp , & & 0.357633929_wp , 0.330892857_wp , 0.330892857_wp , 0.384375000_wp , & & 0.437857143_wp , 0.464598214_wp , 0.518080357_wp , 0.544821429_wp , & & 0.090223214_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.250669643_wp , 0.170446429_wp , 0.277410714_wp , & & 0.250669643_wp , 0.277410714_wp , 0.357633929_wp , 0.304151786_wp , & & 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , 0.384375000_wp , & & 0.411116071_wp , 0.437857143_wp , 0.063482143_wp , 0.197187500_wp , & & 0.170446429_wp , 0.384375000_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.223928571_wp , 0.250669643_wp , 0.223928571_wp , 0.304151786_wp , & & 0.304151786_wp , 0.357633929_wp , 0.411116071_wp , 0.357633929_wp , & & 0.304151786_wp , 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , & & 0.384375000_wp , 0.411116071_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.277410714_wp , 0.223928571_wp , & & 0.170446429_wp , 0.250669643_wp , 0.197187500_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 28 ) / & & 1.079642857_wp , 1.721428571_wp , 0.277410714_wp , 0.330892857_wp , & & 0.518080357_wp , 0.812232143_wp , 0.919196429_wp , 0.999419643_wp , & & 1.159866071_wp , 1.320312500_wp , 0.250669643_wp , 0.143705357_wp , & & 0.330892857_wp , 0.437857143_wp , 0.518080357_wp , 0.571562500_wp , & & 0.625044643_wp , 0.705267857_wp , 0.090223214_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.304151786_wp , & & 0.250669643_wp , 0.277410714_wp , 0.277410714_wp , 0.304151786_wp , & & 0.411116071_wp , 0.330892857_wp , 0.384375000_wp , 0.411116071_wp , & & 0.464598214_wp , 0.518080357_wp , 0.544821429_wp , 0.598303571_wp , & & 0.090223214_wp , 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , & & 0.197187500_wp , 0.277410714_wp , 0.170446429_wp , 0.250669643_wp , & & 0.250669643_wp , 0.304151786_wp , 0.384375000_wp , 0.330892857_wp , & & 0.330892857_wp , 0.357633929_wp , 0.411116071_wp , 0.437857143_wp , & & 0.464598214_wp , 0.491339286_wp , 0.063482143_wp , 0.223928571_wp , & & 0.197187500_wp , 0.411116071_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , 0.277410714_wp , & & 0.304151786_wp , 0.411116071_wp , 0.437857143_wp , 0.411116071_wp , & & 0.330892857_wp , 0.330892857_wp , 0.384375000_wp , 0.411116071_wp , & & 0.411116071_wp , 0.437857143_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.197187500_wp , 0.170446429_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 0.250669643_wp , & & 0.170446429_wp , 0.277410714_wp , 0.223928571_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 29 ) / & & 1.667946429_wp , 4.074642857_wp , 0.411116071_wp , 0.304151786_wp , & & 0.972678571_wp , 1.560982143_wp , 1.908616071_wp , 2.256250000_wp , & & 2.630625000_wp , 3.058482143_wp , 0.223928571_wp , 0.116964286_wp , & & 0.571562500_wp , 0.812232143_wp , 1.106383929_wp , 1.293571429_wp , & & 1.480758929_wp , 1.614464286_wp , 0.090223214_wp , 0.330892857_wp , & & 0.250669643_wp , 0.250669643_wp , 0.197187500_wp , 0.384375000_wp , & & 0.223928571_wp , 0.250669643_wp , 0.357633929_wp , 0.411116071_wp , & & 0.678526786_wp , 0.464598214_wp , 0.651785714_wp , 0.812232143_wp , & & 1.026160714_wp , 1.159866071_wp , 1.293571429_wp , 1.320312500_wp , & & 0.063482143_wp , 0.304151786_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.384375000_wp , 0.170446429_wp , 0.250669643_wp , & & 0.357633929_wp , 0.411116071_wp , 0.678526786_wp , 0.464598214_wp , & & 0.571562500_wp , 0.705267857_wp , 0.838973214_wp , 0.945937500_wp , & & 1.026160714_wp , 1.079642857_wp , 0.063482143_wp , 0.304151786_wp , & & 0.223928571_wp , 0.892455357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.357633929_wp , & & 0.357633929_wp , 0.197187500_wp , 0.197187500_wp , 0.250669643_wp , & & 0.464598214_wp , 0.732008929_wp , 0.892455357_wp , 2.069062500_wp , & & 0.571562500_wp , 0.598303571_wp , 0.758750000_wp , 0.865714286_wp , & & 0.945937500_wp , 0.972678571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.250669643_wp , 0.223928571_wp , 0.304151786_wp , & & 0.250669643_wp , 0.250669643_wp , 0.464598214_wp , 0.304151786_wp , & & 0.223928571_wp , 0.357633929_wp , 0.250669643_wp , 0.223928571_wp , & & 0.250669643_wp , 0.277410714_wp , 0.330892857_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 30 ) / & & 1.293571429_wp , 1.881875000_wp , 0.330892857_wp , 0.330892857_wp , & & 0.598303571_wp , 0.892455357_wp , 0.999419643_wp , 1.079642857_wp , & & 1.240089286_wp , 1.427276786_wp , 0.277410714_wp , 0.143705357_wp , & & 0.384375000_wp , 0.491339286_wp , 0.571562500_wp , 0.625044643_wp , & & 0.705267857_wp , 0.785491071_wp , 0.090223214_wp , 0.277410714_wp , & & 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , 0.330892857_wp , & & 0.250669643_wp , 0.277410714_wp , 0.330892857_wp , 0.330892857_wp , & & 0.464598214_wp , 0.384375000_wp , 0.437857143_wp , 0.464598214_wp , & & 0.518080357_wp , 0.571562500_wp , 0.598303571_wp , 0.651785714_wp , & & 0.090223214_wp , 0.250669643_wp , 0.250669643_wp , 0.223928571_wp , & & 0.250669643_wp , 0.304151786_wp , 0.170446429_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.437857143_wp , 0.384375000_wp , & & 0.357633929_wp , 0.411116071_wp , 0.464598214_wp , 0.491339286_wp , & & 0.518080357_wp , 0.544821429_wp , 0.063482143_wp , 0.250669643_wp , & & 0.223928571_wp , 0.464598214_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.277410714_wp , & & 0.277410714_wp , 0.223928571_wp , 0.223928571_wp , 0.277410714_wp , & & 0.357633929_wp , 0.464598214_wp , 0.491339286_wp , 0.437857143_wp , & & 0.357633929_wp , 0.384375000_wp , 0.437857143_wp , 0.437857143_wp , & & 0.464598214_wp , 0.491339286_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.223928571_wp , 0.197187500_wp , 0.277410714_wp , & & 0.223928571_wp , 0.250669643_wp , 0.330892857_wp , 0.277410714_wp , & & 0.197187500_wp , 0.304151786_wp , 0.250669643_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.304151786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 31 ) / & & 1.694687500_wp , 5.277991071_wp , 0.384375000_wp , 0.277410714_wp , & & 1.052901786_wp , 1.507500000_wp , 2.256250000_wp , 3.218928571_wp , & & 3.780491071_wp , 4.181607143_wp , 0.197187500_wp , 0.116964286_wp , & & 1.801651786_wp , 1.801651786_wp , 2.015580357_wp , 2.122544643_wp , & & 2.309732143_wp , 2.550401786_wp , 0.063482143_wp , 0.304151786_wp , & & 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , 0.357633929_wp , & & 0.223928571_wp , 0.223928571_wp , 0.330892857_wp , 0.384375000_wp , & & 0.651785714_wp , 0.437857143_wp , 1.694687500_wp , 1.828392857_wp , & & 1.855133929_wp , 1.962098214_wp , 2.042321429_wp , 2.229508929_wp , & & 0.063482143_wp , 0.277410714_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.357633929_wp , 0.143705357_wp , 0.223928571_wp , & & 0.304151786_wp , 0.384375000_wp , 0.651785714_wp , 0.437857143_wp , & & 1.560982143_wp , 0.758750000_wp , 1.774910714_wp , 1.801651786_wp , & & 1.801651786_wp , 1.962098214_wp , 0.063482143_wp , 0.277410714_wp , & & 0.197187500_wp , 1.801651786_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.330892857_wp , & & 0.304151786_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.411116071_wp , 0.705267857_wp , 1.801651786_wp , 0.625044643_wp , & & 0.544821429_wp , 0.571562500_wp , 1.774910714_wp , 1.721428571_wp , & & 1.748169643_wp , 1.881875000_wp , 0.250669643_wp , 0.250669643_wp , & & 0.250669643_wp , 0.223928571_wp , 0.197187500_wp , 0.304151786_wp , & & 1.855133929_wp , 0.223928571_wp , 0.437857143_wp , 0.277410714_wp , & & 0.197187500_wp , 0.330892857_wp , 0.223928571_wp , 0.197187500_wp , & & 0.223928571_wp , 1.908616071_wp , 0.304151786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 32 ) / & & 1.828392857_wp , 6.000000000_wp , 0.437857143_wp , 0.304151786_wp , & & 1.320312500_wp , 1.480758929_wp , 2.282991071_wp , 3.940937500_wp , & & 4.368794643_wp , 5.652366071_wp , 0.223928571_wp , 0.116964286_wp , & & 0.945937500_wp , 1.186607143_wp , 1.962098214_wp , 2.657366071_wp , & & 3.085223214_wp , 2.898035714_wp , 0.090223214_wp , 0.357633929_wp , & & 0.250669643_wp , 0.277410714_wp , 0.197187500_wp , 0.411116071_wp , & & 0.223928571_wp , 0.250669643_wp , 0.384375000_wp , 0.411116071_wp , & & 0.812232143_wp , 0.464598214_wp , 1.828392857_wp , 1.320312500_wp , & & 1.988839286_wp , 2.577142857_wp , 2.764330357_wp , 2.416696429_wp , & & 0.063482143_wp , 0.330892857_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.411116071_wp , 0.170446429_wp , 0.250669643_wp , & & 0.357633929_wp , 0.411116071_wp , 0.812232143_wp , 0.491339286_wp , & & 1.855133929_wp , 1.026160714_wp , 1.560982143_wp , 1.908616071_wp , & & 2.363214286_wp , 1.988839286_wp , 0.063482143_wp , 0.304151786_wp , & & 0.223928571_wp , 1.774910714_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.384375000_wp , & & 0.357633929_wp , 0.223928571_wp , 0.197187500_wp , 0.277410714_wp , & & 0.491339286_wp , 0.785491071_wp , 1.427276786_wp , 0.732008929_wp , & & 1.694687500_wp , 0.838973214_wp , 1.373794643_wp , 1.801651786_wp , & & 2.256250000_wp , 1.855133929_wp , 0.277410714_wp , 0.304151786_wp , & & 0.277410714_wp , 0.892455357_wp , 0.865714286_wp , 0.330892857_wp , & & 0.277410714_wp , 0.250669643_wp , 0.625044643_wp , 0.330892857_wp , & & 0.223928571_wp , 0.411116071_wp , 0.250669643_wp , 0.223928571_wp , & & 0.250669643_wp , 0.277410714_wp , 0.357633929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 33 ) / & & 2.069062500_wp , 6.000000000_wp , 0.464598214_wp , 0.277410714_wp , & & 1.721428571_wp , 1.614464286_wp , 2.496919643_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.223928571_wp , 0.116964286_wp , & & 2.069062500_wp , 1.962098214_wp , 2.630625000_wp , 3.860714286_wp , & & 4.208348214_wp , 4.636205357_wp , 0.090223214_wp , 0.437857143_wp , & & 0.277410714_wp , 0.330892857_wp , 0.250669643_wp , 0.384375000_wp , & & 0.223928571_wp , 0.250669643_wp , 0.437857143_wp , 0.464598214_wp , & & 1.026160714_wp , 0.518080357_wp , 1.855133929_wp , 1.988839286_wp , & & 2.684107143_wp , 3.486339286_wp , 3.700267857_wp , 3.994419643_wp , & & 0.063482143_wp , 0.384375000_wp , 0.277410714_wp , 0.330892857_wp , & & 0.304151786_wp , 0.464598214_wp , 0.170446429_wp , 0.223928571_wp , & & 0.411116071_wp , 0.464598214_wp , 1.052901786_wp , 0.571562500_wp , & & 1.828392857_wp , 1.641205357_wp , 2.523660714_wp , 3.111964286_wp , & & 3.218928571_wp , 3.406116071_wp , 0.063482143_wp , 0.384375000_wp , & & 0.250669643_wp , 3.085223214_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.277410714_wp , 0.250669643_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.464598214_wp , & & 0.437857143_wp , 0.223928571_wp , 0.197187500_wp , 0.250669643_wp , & & 0.598303571_wp , 0.758750000_wp , 2.389955357_wp , 0.838973214_wp , & & 1.667946429_wp , 1.507500000_wp , 2.496919643_wp , 2.951517857_wp , & & 3.031741071_wp , 3.192187500_wp , 0.357633929_wp , 2.176026786_wp , & & 0.330892857_wp , 0.919196429_wp , 0.945937500_wp , 0.384375000_wp , & & 0.411116071_wp , 0.304151786_wp , 0.838973214_wp , 0.384375000_wp , & & 0.999419643_wp , 0.464598214_wp , 0.277410714_wp , 0.277410714_wp , & & 1.935357143_wp , 0.357633929_wp , 0.411116071_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 34 ) / & & 2.229508929_wp , 6.000000000_wp , 0.437857143_wp , 0.304151786_wp , & & 1.988839286_wp , 1.694687500_wp , 2.710848214_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.223928571_wp , 0.116964286_wp , & & 2.176026786_wp , 2.389955357_wp , 3.218928571_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.090223214_wp , 0.491339286_wp , & & 0.304151786_wp , 0.357633929_wp , 0.250669643_wp , 0.411116071_wp , & & 0.223928571_wp , 0.250669643_wp , 0.464598214_wp , 0.518080357_wp , & & 1.159866071_wp , 0.571562500_wp , 1.962098214_wp , 2.577142857_wp , & & 3.486339286_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.090223214_wp , 0.464598214_wp , 0.304151786_wp , 0.357633929_wp , & & 0.330892857_wp , 0.491339286_wp , 0.170446429_wp , 0.250669643_wp , & & 0.437857143_wp , 0.518080357_wp , 1.213348214_wp , 0.598303571_wp , & & 1.935357143_wp , 2.176026786_wp , 3.325892857_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.491339286_wp , & & 0.250669643_wp , 6.000000000_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.304151786_wp , 0.277410714_wp , & & 0.223928571_wp , 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , 0.544821429_wp , & & 0.464598214_wp , 0.223928571_wp , 0.197187500_wp , 0.250669643_wp , & & 0.625044643_wp , 0.758750000_wp , 3.833973214_wp , 0.892455357_wp , & & 1.774910714_wp , 1.881875000_wp , 3.379375000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.411116071_wp , 0.464598214_wp , & & 0.384375000_wp , 0.892455357_wp , 0.892455357_wp , 0.411116071_wp , & & 0.571562500_wp , 0.330892857_wp , 0.919196429_wp , 0.411116071_wp , & & 1.026160714_wp , 0.491339286_wp , 0.304151786_wp , 0.330892857_wp , & & 1.881875000_wp , 1.694687500_wp , 0.464598214_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 35 ) / & & 2.416696429_wp , 6.000000000_wp , 0.491339286_wp , 0.330892857_wp , & & 2.202767857_wp , 1.855133929_wp , 3.058482143_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.250669643_wp , 0.143705357_wp , & & 2.256250000_wp , 2.523660714_wp , 3.432857143_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.090223214_wp , 0.544821429_wp , & & 0.330892857_wp , 0.384375000_wp , 0.304151786_wp , 0.437857143_wp , & & 0.250669643_wp , 0.277410714_wp , 0.518080357_wp , 0.544821429_wp , & & 1.293571429_wp , 0.598303571_wp , 2.042321429_wp , 2.764330357_wp , & & 3.700267857_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.090223214_wp , 0.491339286_wp , 0.330892857_wp , 0.384375000_wp , & & 0.384375000_wp , 0.518080357_wp , 0.170446429_wp , 0.250669643_wp , & & 0.491339286_wp , 0.544821429_wp , 1.320312500_wp , 0.651785714_wp , & & 1.988839286_wp , 2.577142857_wp , 3.539821429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.598303571_wp , & & 0.277410714_wp , 6.000000000_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.330892857_wp , 0.277410714_wp , & & 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , & & 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , 0.571562500_wp , & & 0.518080357_wp , 0.223928571_wp , 0.223928571_wp , 0.277410714_wp , & & 0.705267857_wp , 0.838973214_wp , 5.572142857_wp , 0.972678571_wp , & & 1.855133929_wp , 2.149285714_wp , 3.620044643_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.464598214_wp , 0.518080357_wp , & & 0.411116071_wp , 0.945937500_wp , 0.999419643_wp , 0.464598214_wp , & & 0.678526786_wp , 0.357633929_wp , 0.999419643_wp , 0.464598214_wp , & & 0.999419643_wp , 0.544821429_wp , 0.330892857_wp , 0.384375000_wp , & & 1.828392857_wp , 1.694687500_wp , 0.518080357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 36 ) / & & 2.523660714_wp , 6.000000000_wp , 0.571562500_wp , 0.357633929_wp , & & 2.176026786_wp , 1.935357143_wp , 3.031741071_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.277410714_wp , 0.143705357_wp , & & 2.389955357_wp , 2.309732143_wp , 3.727008929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.116964286_wp , 0.598303571_wp , & & 0.384375000_wp , 0.437857143_wp , 0.330892857_wp , 0.464598214_wp , & & 0.277410714_wp , 0.277410714_wp , 0.544821429_wp , 0.598303571_wp , & & 1.320312500_wp , 0.651785714_wp , 2.229508929_wp , 2.416696429_wp , & & 3.994419643_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.090223214_wp , 0.544821429_wp , 0.357633929_wp , 0.437857143_wp , & & 0.411116071_wp , 0.571562500_wp , 0.197187500_wp , 0.277410714_wp , & & 0.544821429_wp , 0.598303571_wp , 1.347053571_wp , 0.705267857_wp , & & 2.176026786_wp , 2.095803571_wp , 3.833973214_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.090223214_wp , 0.838973214_wp , & & 0.304151786_wp , 6.000000000_wp , 0.250669643_wp , 0.250669643_wp , & & 0.250669643_wp , 0.250669643_wp , 0.357633929_wp , 0.304151786_wp , & & 0.277410714_wp , 0.277410714_wp , 0.277410714_wp , 0.277410714_wp , & & 0.277410714_wp , 0.277410714_wp , 0.304151786_wp , 0.598303571_wp , & & 0.544821429_wp , 0.250669643_wp , 0.223928571_wp , 0.304151786_wp , & & 0.758750000_wp , 0.892455357_wp , 3.058482143_wp , 1.052901786_wp , & & 2.015580357_wp , 1.908616071_wp , 3.192187500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.518080357_wp , 2.282991071_wp , & & 0.464598214_wp , 1.026160714_wp , 1.240089286_wp , 0.464598214_wp , & & 0.838973214_wp , 0.384375000_wp , 0.999419643_wp , 0.518080357_wp , & & 1.159866071_wp , 0.651785714_wp , 0.384375000_wp , 0.598303571_wp , & & 2.069062500_wp , 1.855133929_wp , 0.571562500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 37 ) / & & 0.250669643_wp , 0.464598214_wp , 0.090223214_wp , 0.170446429_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , & & 0.250669643_wp , 0.357633929_wp , 0.143705357_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.116964286_wp , 0.036741071_wp , 0.036741071_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.063482143_wp , & & 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , 0.090223214_wp , & & 0.063482143_wp , 0.090223214_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.036741071_wp , 0.036741071_wp , 0.063482143_wp , 0.090223214_wp , & & 0.063482143_wp , 0.063482143_wp , 0.116964286_wp , 0.090223214_wp , & & 0.063482143_wp , 0.090223214_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.036741071_wp , 0.036741071_wp , & & 0.036741071_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , & & 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.036741071_wp , 0.036741071_wp , & & 0.036741071_wp , 0.036741071_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.036741071_wp , 0.036741071_wp , & & 0.063482143_wp , 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , & & 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 38 ) / & & 0.865714286_wp , 2.764330357_wp , 0.170446429_wp , 0.223928571_wp , & & 0.411116071_wp , 0.865714286_wp , 0.919196429_wp , 1.052901786_wp , & & 1.293571429_wp , 2.149285714_wp , 0.197187500_wp , 0.090223214_wp , & & 0.250669643_wp , 0.330892857_wp , 0.437857143_wp , 0.518080357_wp , & & 0.598303571_wp , 0.678526786_wp , 0.063482143_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.304151786_wp , 0.250669643_wp , 0.277410714_wp , 0.330892857_wp , & & 0.384375000_wp , 0.464598214_wp , 0.491339286_wp , 0.544821429_wp , & & 0.036741071_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.197187500_wp , 0.116964286_wp , 0.197187500_wp , & & 0.170446429_wp , 0.223928571_wp , 0.304151786_wp , 0.250669643_wp , & & 0.223928571_wp , 0.277410714_wp , 0.330892857_wp , 0.357633929_wp , & & 0.384375000_wp , 0.411116071_wp , 0.036741071_wp , 0.143705357_wp , & & 0.116964286_wp , 0.357633929_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.090223214_wp , 0.116964286_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.197187500_wp , & & 0.223928571_wp , 0.330892857_wp , 0.357633929_wp , 0.304151786_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 0.330892857_wp , & & 0.357633929_wp , 0.384375000_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 39 ) / & & 0.598303571_wp , 1.026160714_wp , 0.197187500_wp , 0.250669643_wp , & & 0.330892857_wp , 0.464598214_wp , 0.518080357_wp , 0.571562500_wp , & & 0.651785714_wp , 0.758750000_wp , 0.170446429_wp , 0.090223214_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 0.330892857_wp , & & 0.384375000_wp , 0.411116071_wp , 0.063482143_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , & & 0.063482143_wp , 0.143705357_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.197187500_wp , 0.143705357_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.277410714_wp , 0.036741071_wp , 0.116964286_wp , & & 0.116964286_wp , 0.250669643_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.197187500_wp , 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.223928571_wp , & & 0.116964286_wp , 0.116964286_wp , 0.197187500_wp , 0.143705357_wp , & & 0.116964286_wp , 0.250669643_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 40 ) / & & 0.812232143_wp , 1.320312500_wp , 0.170446429_wp , 0.277410714_wp , & & 0.384375000_wp , 0.625044643_wp , 0.705267857_wp , 0.758750000_wp , & & 0.892455357_wp , 1.026160714_wp , 0.170446429_wp , 0.143705357_wp , & & 0.223928571_wp , 0.277410714_wp , 0.357633929_wp , 0.411116071_wp , & & 0.464598214_wp , 0.544821429_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.277410714_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.330892857_wp , 0.357633929_wp , 0.384375000_wp , 0.437857143_wp , & & 0.090223214_wp , 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.063482143_wp , 0.143705357_wp , & & 0.143705357_wp , 0.277410714_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.277410714_wp , 0.304151786_wp , 0.277410714_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , 0.170446429_wp , & & 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 41 ) / & & 0.785491071_wp , 1.320312500_wp , 0.170446429_wp , 0.277410714_wp , & & 0.357633929_wp , 0.571562500_wp , 0.651785714_wp , 0.732008929_wp , & & 0.838973214_wp , 0.999419643_wp , 0.170446429_wp , 0.143705357_wp , & & 0.223928571_wp , 0.277410714_wp , 0.330892857_wp , 0.384375000_wp , & & 0.437857143_wp , 0.491339286_wp , 0.090223214_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.277410714_wp , 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.384375000_wp , 0.411116071_wp , & & 0.063482143_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.197187500_wp , 0.170446429_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.063482143_wp , 0.143705357_wp , & & 0.143705357_wp , 0.277410714_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.277410714_wp , 0.304151786_wp , 0.277410714_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , 0.170446429_wp , & & 0.116964286_wp , 0.197187500_wp , 0.170446429_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 42 ) / & & 1.106383929_wp , 1.587723214_wp , 0.277410714_wp , 0.277410714_wp , & & 0.518080357_wp , 0.785491071_wp , 0.865714286_wp , 0.919196429_wp , & & 1.052901786_wp , 1.186607143_wp , 0.223928571_wp , 0.116964286_wp , & & 0.330892857_wp , 0.411116071_wp , 0.491339286_wp , 0.544821429_wp , & & 0.598303571_wp , 0.678526786_wp , 0.090223214_wp , 0.223928571_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.277410714_wp , & & 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , & & 0.384375000_wp , 0.304151786_wp , 0.357633929_wp , 0.411116071_wp , & & 0.464598214_wp , 0.491339286_wp , 0.518080357_wp , 0.571562500_wp , & & 0.063482143_wp , 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , & & 0.197187500_wp , 0.250669643_wp , 0.143705357_wp , 0.223928571_wp , & & 0.250669643_wp , 0.277410714_wp , 0.384375000_wp , 0.304151786_wp , & & 0.304151786_wp , 0.357633929_wp , 0.384375000_wp , 0.411116071_wp , & & 0.437857143_wp , 0.464598214_wp , 0.063482143_wp , 0.223928571_wp , & & 0.170446429_wp , 0.411116071_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.250669643_wp , & & 0.304151786_wp , 0.384375000_wp , 0.437857143_wp , 0.384375000_wp , & & 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , 0.384375000_wp , & & 0.411116071_wp , 0.437857143_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.170446429_wp , 0.197187500_wp , 0.277410714_wp , 0.250669643_wp , & & 0.170446429_wp , 0.250669643_wp , 0.197187500_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.250669643_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 43 ) / & & 0.384375000_wp , 0.491339286_wp , 0.304151786_wp , 0.170446429_wp , & & 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , & & 0.357633929_wp , 0.384375000_wp , 0.197187500_wp , 0.116964286_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.143705357_wp , 0.116964286_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.143705357_wp , 0.090223214_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.143705357_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 44 ) / & & 0.544821429_wp , 0.705267857_wp , 0.330892857_wp , 0.223928571_wp , & & 0.357633929_wp , 0.384375000_wp , 0.384375000_wp , 0.437857143_wp , & & 0.491339286_wp , 0.544821429_wp , 0.223928571_wp , 0.143705357_wp , & & 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.116964286_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.223928571_wp , & & 0.170446429_wp , 0.197187500_wp , 0.277410714_wp , 0.250669643_wp , & & 0.250669643_wp , 0.277410714_wp , 0.223928571_wp , 0.250669643_wp , & & 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , & & 0.090223214_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.143705357_wp , 0.170446429_wp , & & 0.223928571_wp , 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.063482143_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.250669643_wp , & & 0.250669643_wp , 0.223928571_wp , 0.143705357_wp , 0.170446429_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.197187500_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 45 ) / & & 1.106383929_wp , 1.694687500_wp , 0.250669643_wp , 0.277410714_wp , & & 0.464598214_wp , 0.758750000_wp , 0.865714286_wp , 0.945937500_wp , & & 1.133125000_wp , 1.293571429_wp , 0.223928571_wp , 0.116964286_wp , & & 0.304151786_wp , 0.357633929_wp , 0.437857143_wp , 0.518080357_wp , & & 0.571562500_wp , 0.651785714_wp , 0.090223214_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.250669643_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , & & 0.357633929_wp , 0.304151786_wp , 0.304151786_wp , 0.357633929_wp , & & 0.411116071_wp , 0.437857143_wp , 0.491339286_wp , 0.544821429_wp , & & 0.063482143_wp , 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , & & 0.197187500_wp , 0.250669643_wp , 0.143705357_wp , 0.223928571_wp , & & 0.223928571_wp , 0.277410714_wp , 0.330892857_wp , 0.304151786_wp , & & 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , & & 0.384375000_wp , 0.411116071_wp , 0.063482143_wp , 0.197187500_wp , & & 0.170446429_wp , 0.357633929_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.250669643_wp , & & 0.277410714_wp , 0.357633929_wp , 0.384375000_wp , 0.357633929_wp , & & 0.277410714_wp , 0.277410714_wp , 0.330892857_wp , 0.330892857_wp , & & 0.357633929_wp , 0.384375000_wp , 0.143705357_wp , 0.170446429_wp , & & 0.197187500_wp , 0.170446429_wp , 0.143705357_wp , 0.223928571_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 0.170446429_wp , 0.250669643_wp , 0.197187500_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 46 ) / & & 1.133125000_wp , 1.507500000_wp , 0.304151786_wp , 0.304151786_wp , & & 0.544821429_wp , 0.812232143_wp , 0.892455357_wp , 0.945937500_wp , & & 1.052901786_wp , 1.186607143_wp , 0.250669643_wp , 0.116964286_wp , & & 0.357633929_wp , 0.437857143_wp , 0.518080357_wp , 0.571562500_wp , & & 0.625044643_wp , 0.705267857_wp , 0.090223214_wp , 0.250669643_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.304151786_wp , & & 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , & & 0.411116071_wp , 0.330892857_wp , 0.384375000_wp , 0.411116071_wp , & & 0.464598214_wp , 0.518080357_wp , 0.544821429_wp , 0.598303571_wp , & & 0.090223214_wp , 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , & & 0.223928571_wp , 0.277410714_wp , 0.170446429_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.411116071_wp , 0.330892857_wp , & & 0.330892857_wp , 0.357633929_wp , 0.411116071_wp , 0.437857143_wp , & & 0.464598214_wp , 0.491339286_wp , 0.063482143_wp , 0.223928571_wp , & & 0.197187500_wp , 0.437857143_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.250669643_wp , 0.223928571_wp , 0.197187500_wp , 0.277410714_wp , & & 0.304151786_wp , 0.411116071_wp , 0.437857143_wp , 0.411116071_wp , & & 0.330892857_wp , 0.357633929_wp , 0.384375000_wp , 0.411116071_wp , & & 0.437857143_wp , 0.437857143_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.197187500_wp , 0.223928571_wp , 0.304151786_wp , 0.250669643_wp , & & 0.170446429_wp , 0.277410714_wp , 0.223928571_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 47 ) / & & 1.614464286_wp , 4.101383929_wp , 0.411116071_wp , 0.277410714_wp , & & 0.945937500_wp , 1.454017857_wp , 1.881875000_wp , 2.309732143_wp , & & 2.630625000_wp , 3.085223214_wp , 0.223928571_wp , 0.116964286_wp , & & 0.571562500_wp , 0.812232143_wp , 1.133125000_wp , 1.320312500_wp , & & 1.507500000_wp , 1.614464286_wp , 0.090223214_wp , 0.330892857_wp , & & 0.223928571_wp , 0.250669643_wp , 0.197187500_wp , 0.384375000_wp , & & 0.223928571_wp , 0.223928571_wp , 0.357633929_wp , 0.384375000_wp , & & 0.678526786_wp , 0.437857143_wp , 0.651785714_wp , 0.812232143_wp , & & 1.052901786_wp , 1.213348214_wp , 1.320312500_wp , 1.347053571_wp , & & 0.063482143_wp , 0.304151786_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.384375000_wp , 0.143705357_wp , 0.223928571_wp , & & 0.330892857_wp , 0.411116071_wp , 0.678526786_wp , 0.464598214_wp , & & 0.544821429_wp , 0.705267857_wp , 0.838973214_wp , 0.972678571_wp , & & 1.079642857_wp , 1.106383929_wp , 0.063482143_wp , 0.277410714_wp , & & 0.197187500_wp , 0.919196429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 0.223928571_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.330892857_wp , & & 0.330892857_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.437857143_wp , 0.732008929_wp , 0.919196429_wp , 0.651785714_wp , & & 0.571562500_wp , 0.598303571_wp , 0.785491071_wp , 0.892455357_wp , & & 0.972678571_wp , 0.999419643_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.250669643_wp , 0.223928571_wp , 0.304151786_wp , & & 0.250669643_wp , 0.250669643_wp , 0.437857143_wp , 0.304151786_wp , & & 0.223928571_wp , 0.357633929_wp , 0.223928571_wp , 0.223928571_wp , & & 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 48 ) / & & 2.684107143_wp , 2.015580357_wp , 0.330892857_wp , 0.277410714_wp , & & 0.625044643_wp , 0.972678571_wp , 1.079642857_wp , 1.159866071_wp , & & 1.347053571_wp , 1.534241071_wp , 0.250669643_wp , 0.116964286_wp , & & 0.384375000_wp , 0.491339286_wp , 0.598303571_wp , 0.678526786_wp , & & 0.732008929_wp , 0.838973214_wp , 0.090223214_wp , 0.277410714_wp , & & 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , 0.330892857_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 0.330892857_wp , & & 0.464598214_wp , 0.384375000_wp , 0.437857143_wp , 0.491339286_wp , & & 0.571562500_wp , 0.598303571_wp , 0.651785714_wp , 0.705267857_wp , & & 0.063482143_wp , 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.304151786_wp , 0.170446429_wp , 0.223928571_wp , & & 0.304151786_wp , 0.330892857_wp , 0.464598214_wp , 0.384375000_wp , & & 0.384375000_wp , 0.437857143_wp , 0.464598214_wp , 0.518080357_wp , & & 0.544821429_wp , 0.571562500_wp , 0.063482143_wp , 0.250669643_wp , & & 0.197187500_wp , 0.491339286_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , & & 0.277410714_wp , 0.223928571_wp , 0.197187500_wp , 0.250669643_wp , & & 0.357633929_wp , 0.464598214_wp , 0.518080357_wp , 0.464598214_wp , & & 0.384375000_wp , 0.411116071_wp , 0.437857143_wp , 0.464598214_wp , & & 0.491339286_wp , 0.518080357_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.223928571_wp , 0.197187500_wp , 0.277410714_wp , & & 0.223928571_wp , 0.223928571_wp , 0.330892857_wp , 0.277410714_wp , & & 0.197187500_wp , 0.304151786_wp , 0.223928571_wp , 0.197187500_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 49 ) / & & 1.587723214_wp , 4.903616071_wp , 0.330892857_wp , 0.277410714_wp , & & 0.999419643_wp , 1.427276786_wp , 2.095803571_wp , 3.058482143_wp , & & 3.566562500_wp , 3.940937500_wp , 0.223928571_wp , 0.116964286_wp , & & 1.667946429_wp , 1.855133929_wp , 1.962098214_wp , 2.069062500_wp , & & 2.256250000_wp , 2.470178571_wp , 0.063482143_wp , 0.250669643_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.330892857_wp , & & 0.197187500_wp , 0.223928571_wp , 0.304151786_wp , 0.330892857_wp , & & 0.571562500_wp , 0.357633929_wp , 1.560982143_wp , 1.855133929_wp , & & 1.828392857_wp , 1.935357143_wp , 1.988839286_wp , 2.176026786_wp , & & 0.063482143_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.304151786_wp , 0.143705357_wp , 0.223928571_wp , & & 0.277410714_wp , 0.330892857_wp , 0.544821429_wp , 0.384375000_wp , & & 1.400535714_wp , 1.667946429_wp , 1.694687500_wp , 1.721428571_wp , & & 1.774910714_wp , 1.908616071_wp , 0.063482143_wp , 0.223928571_wp , & & 0.170446429_wp , 1.748169643_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.250669643_wp , & & 0.250669643_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.357633929_wp , 0.625044643_wp , 1.881875000_wp , 0.544821429_wp , & & 0.411116071_wp , 0.464598214_wp , 1.667946429_wp , 1.641205357_wp , & & 1.721428571_wp , 1.801651786_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.892455357_wp , 0.197187500_wp , 0.357633929_wp , 0.250669643_wp , & & 0.170446429_wp , 0.277410714_wp , 0.197187500_wp , 0.170446429_wp , & & 1.908616071_wp , 0.223928571_wp , 0.250669643_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 50 ) / & & 1.587723214_wp , 6.000000000_wp , 0.384375000_wp , 0.277410714_wp , & & 1.106383929_wp , 1.347053571_wp , 1.988839286_wp , 3.459598214_wp , & & 3.753750000_wp , 4.876875000_wp , 0.223928571_wp , 0.116964286_wp , & & 0.625044643_wp , 0.945937500_wp , 1.667946429_wp , 2.256250000_wp , & & 2.630625000_wp , 2.470178571_wp , 0.090223214_wp , 0.304151786_wp , & & 0.223928571_wp , 0.223928571_wp , 0.170446429_wp , 0.357633929_wp , & & 0.197187500_wp , 0.223928571_wp , 0.330892857_wp , 0.357633929_wp , & & 0.705267857_wp , 0.411116071_wp , 0.758750000_wp , 1.026160714_wp , & & 1.641205357_wp , 2.176026786_wp , 2.577142857_wp , 2.095803571_wp , & & 0.063482143_wp , 0.277410714_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.357633929_wp , 0.143705357_wp , 0.223928571_wp , & & 0.304151786_wp , 0.357633929_wp , 0.705267857_wp , 0.437857143_wp , & & 1.667946429_wp , 0.838973214_wp , 1.186607143_wp , 1.560982143_wp , & & 1.881875000_wp , 1.694687500_wp , 0.063482143_wp , 0.250669643_wp , & & 0.197187500_wp , 1.400535714_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.304151786_wp , & & 0.304151786_wp , 0.197187500_wp , 0.170446429_wp , 0.223928571_wp , & & 0.411116071_wp , 0.705267857_wp , 1.159866071_wp , 0.651785714_wp , & & 1.641205357_wp , 0.678526786_wp , 1.079642857_wp , 1.400535714_wp , & & 1.855133929_wp , 1.480758929_wp , 0.223928571_wp , 0.250669643_wp , & & 0.223928571_wp , 0.223928571_wp , 0.785491071_wp , 0.304151786_wp , & & 0.223928571_wp , 0.223928571_wp , 0.571562500_wp , 0.277410714_wp , & & 0.197187500_wp , 0.330892857_wp , 0.223928571_wp , 0.197187500_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 51 ) / & & 1.774910714_wp , 6.000000000_wp , 0.411116071_wp , 0.250669643_wp , & & 1.400535714_wp , 1.400535714_wp , 2.095803571_wp , 5.545401786_wp , & & 6.000000000_wp , 6.000000000_wp , 0.197187500_wp , 0.090223214_wp , & & 1.935357143_wp , 1.427276786_wp , 2.470178571_wp , 3.673526786_wp , & & 4.021160714_wp , 4.475758929_wp , 0.063482143_wp , 0.357633929_wp , & & 0.250669643_wp , 0.250669643_wp , 0.197187500_wp , 0.357633929_wp , & & 0.197187500_wp , 0.223928571_wp , 0.357633929_wp , 0.411116071_wp , & & 0.838973214_wp , 0.464598214_wp , 1.774910714_wp , 1.560982143_wp , & & 2.523660714_wp , 3.325892857_wp , 3.539821429_wp , 3.833973214_wp , & & 0.063482143_wp , 0.330892857_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.384375000_wp , 0.143705357_wp , 0.197187500_wp , & & 0.330892857_wp , 0.411116071_wp , 0.838973214_wp , 0.464598214_wp , & & 1.694687500_wp , 1.186607143_wp , 2.095803571_wp , 2.978258929_wp , & & 3.085223214_wp , 3.272410714_wp , 0.063482143_wp , 0.304151786_wp , & & 0.197187500_wp , 2.791071429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.384375000_wp , & & 0.357633929_wp , 0.197187500_wp , 0.170446429_wp , 0.223928571_wp , & & 0.464598214_wp , 0.678526786_wp , 1.748169643_wp , 0.705267857_wp , & & 1.480758929_wp , 0.919196429_wp , 1.828392857_wp , 2.844553571_wp , & & 2.924776786_wp , 3.058482143_wp , 0.304151786_wp , 0.304151786_wp , & & 0.277410714_wp , 0.838973214_wp , 0.945937500_wp , 0.330892857_wp , & & 0.277410714_wp , 0.250669643_wp , 0.651785714_wp , 0.304151786_wp , & & 0.838973214_wp , 0.384375000_wp , 0.250669643_wp , 0.223928571_wp , & & 0.250669643_wp , 0.277410714_wp , 0.330892857_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 52 ) / & & 1.881875000_wp , 6.000000000_wp , 0.411116071_wp , 0.250669643_wp , & & 1.667946429_wp , 1.454017857_wp , 2.229508929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.197187500_wp , 0.116964286_wp , & & 1.988839286_wp , 1.962098214_wp , 2.844553571_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.411116071_wp , & & 0.250669643_wp , 0.277410714_wp , 0.223928571_wp , 0.357633929_wp , & & 0.197187500_wp , 0.223928571_wp , 0.384375000_wp , 0.437857143_wp , & & 0.945937500_wp , 0.491339286_wp , 1.801651786_wp , 1.908616071_wp , & & 3.111964286_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.063482143_wp , 0.357633929_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.411116071_wp , 0.143705357_wp , 0.223928571_wp , & & 0.357633929_wp , 0.437857143_wp , 0.972678571_wp , 0.518080357_wp , & & 1.721428571_wp , 1.560982143_wp , 2.978258929_wp , 4.422276786_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.357633929_wp , & & 0.223928571_wp , 5.491919643_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.437857143_wp , & & 0.384375000_wp , 0.197187500_wp , 0.170446429_wp , 0.223928571_wp , & & 0.518080357_wp , 0.678526786_wp , 2.336473214_wp , 0.758750000_wp , & & 1.507500000_wp , 1.320312500_wp , 2.791071429_wp , 4.047901786_wp , & & 5.732589286_wp , 6.000000000_wp , 0.330892857_wp , 0.357633929_wp , & & 0.304151786_wp , 0.785491071_wp , 0.250669643_wp , 0.357633929_wp , & & 0.304151786_wp , 0.250669643_wp , 0.758750000_wp , 0.330892857_wp , & & 0.972678571_wp , 0.384375000_wp , 0.250669643_wp , 0.250669643_wp , & & 1.935357143_wp , 0.304151786_wp , 0.357633929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 53 ) / & & 2.042321429_wp , 6.000000000_wp , 0.437857143_wp , 0.277410714_wp , & & 1.748169643_wp , 1.534241071_wp , 2.389955357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.223928571_wp , 0.116964286_wp , & & 2.042321429_wp , 2.202767857_wp , 2.978258929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.090223214_wp , 0.437857143_wp , & & 0.277410714_wp , 0.304151786_wp , 0.223928571_wp , 0.357633929_wp , & & 0.197187500_wp , 0.223928571_wp , 0.411116071_wp , 0.464598214_wp , & & 1.026160714_wp , 0.518080357_wp , 1.801651786_wp , 2.363214286_wp , & & 3.218928571_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.063482143_wp , 0.384375000_wp , 0.277410714_wp , 0.304151786_wp , & & 0.304151786_wp , 0.437857143_wp , 0.143705357_wp , 0.223928571_wp , & & 0.384375000_wp , 0.464598214_wp , 1.079642857_wp , 0.544821429_wp , & & 1.774910714_wp , 1.881875000_wp , 3.085223214_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.384375000_wp , & & 0.223928571_wp , 6.000000000_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.277410714_wp , 0.250669643_wp , & & 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.491339286_wp , & & 0.411116071_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.571562500_wp , 0.705267857_wp , 3.325892857_wp , 0.838973214_wp , & & 1.587723214_wp , 1.774910714_wp , 3.138705357_wp , 5.491919643_wp , & & 6.000000000_wp , 6.000000000_wp , 0.357633929_wp , 0.411116071_wp , & & 0.330892857_wp , 0.812232143_wp , 0.812232143_wp , 0.384375000_wp , & & 0.384375000_wp , 0.277410714_wp , 0.838973214_wp , 0.357633929_wp , & & 0.945937500_wp , 0.437857143_wp , 0.277410714_wp , 0.250669643_wp , & & 1.881875000_wp , 0.330892857_wp , 0.384375000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 54 ) / & & 2.069062500_wp , 6.000000000_wp , 0.437857143_wp , 0.277410714_wp , & & 1.774910714_wp , 1.587723214_wp , 2.443437500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.223928571_wp , 0.116964286_wp , & & 2.149285714_wp , 1.908616071_wp , 3.165446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.090223214_wp , 0.464598214_wp , & & 0.304151786_wp , 0.330892857_wp , 0.250669643_wp , 0.384375000_wp , & & 0.223928571_wp , 0.250669643_wp , 0.437857143_wp , 0.491339286_wp , & & 1.079642857_wp , 0.544821429_wp , 1.962098214_wp , 1.988839286_wp , & & 3.406116071_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.063482143_wp , 0.411116071_wp , 0.277410714_wp , 0.330892857_wp , & & 0.330892857_wp , 0.464598214_wp , 0.170446429_wp , 0.223928571_wp , & & 0.411116071_wp , 0.491339286_wp , 1.106383929_wp , 0.571562500_wp , & & 1.908616071_wp , 1.694687500_wp , 3.272410714_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.437857143_wp , & & 0.250669643_wp , 6.000000000_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.304151786_wp , 0.250669643_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.518080357_wp , & & 0.437857143_wp , 0.223928571_wp , 0.197187500_wp , 0.250669643_wp , & & 0.598303571_wp , 0.758750000_wp , 2.443437500_wp , 0.865714286_wp , & & 1.721428571_wp , 1.427276786_wp , 2.603883929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.411116071_wp , 2.256250000_wp , & & 0.357633929_wp , 0.865714286_wp , 0.945937500_wp , 0.411116071_wp , & & 0.544821429_wp , 0.304151786_wp , 0.945937500_wp , 0.384375000_wp , & & 1.026160714_wp , 0.491339286_wp , 0.304151786_wp , 0.304151786_wp , & & 1.962098214_wp , 0.384375000_wp , 0.437857143_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 55 ) / & & 0.250669643_wp , 0.785491071_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , & & 0.384375000_wp , 1.079642857_wp , 0.143705357_wp , 0.036741071_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.090223214_wp , 0.090223214_wp , 0.036741071_wp , 0.036741071_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.090223214_wp , 0.090223214_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , & & 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.036741071_wp , 0.036741071_wp , & & 0.036741071_wp , 0.063482143_wp , 0.036741071_wp , 0.063482143_wp , & & 0.063482143_wp , 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , & & 0.063482143_wp , 0.036741071_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.036741071_wp , 0.036741071_wp , & & 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , & & 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , & & 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , & & 0.036741071_wp , 0.036741071_wp , 0.036741071_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 56 ) / & & 1.159866071_wp , 1.748169643_wp , 0.197187500_wp , 0.197187500_wp , & & 0.384375000_wp , 0.838973214_wp , 1.106383929_wp , 1.159866071_wp , & & 1.347053571_wp , 1.400535714_wp , 0.170446429_wp , 0.063482143_wp , & & 0.223928571_wp , 0.330892857_wp , 0.437857143_wp , 0.598303571_wp , & & 0.838973214_wp , 0.945937500_wp , 0.036741071_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.223928571_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , & & 0.304151786_wp , 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , & & 0.384375000_wp , 0.491339286_wp , 0.598303571_wp , 0.838973214_wp , & & 0.036741071_wp , 0.143705357_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.223928571_wp , 0.090223214_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 0.250669643_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 0.357633929_wp , & & 0.384375000_wp , 0.437857143_wp , 0.036741071_wp , 0.116964286_wp , & & 0.090223214_wp , 0.330892857_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.143705357_wp , 0.116964286_wp , 0.170446429_wp , & & 0.223928571_wp , 0.330892857_wp , 0.357633929_wp , 0.330892857_wp , & & 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , 0.330892857_wp , & & 0.357633929_wp , 0.384375000_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , & & 0.090223214_wp , 0.170446429_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 57 ) / & & 0.544821429_wp , 0.865714286_wp , 0.170446429_wp , 0.223928571_wp , & & 0.277410714_wp , 0.411116071_wp , 0.464598214_wp , 0.491339286_wp , & & 0.571562500_wp , 0.651785714_wp , 0.143705357_wp , 0.090223214_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , & & 0.330892857_wp , 0.357633929_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , & & 0.036741071_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.116964286_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.250669643_wp , 0.036741071_wp , 0.090223214_wp , & & 0.090223214_wp , 0.223928571_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.197187500_wp , & & 0.170446429_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.090223214_wp , 0.116964286_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.223928571_wp , & & 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , 0.116964286_wp , & & 0.090223214_wp , 0.197187500_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 58 ) / & & 1.881875000_wp , 6.000000000_wp , 0.384375000_wp , 0.250669643_wp , & & 1.560982143_wp , 1.454017857_wp , 2.256250000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.197187500_wp , 0.090223214_wp , & & 1.988839286_wp , 1.667946429_wp , 2.791071429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.384375000_wp , & & 0.250669643_wp , 0.277410714_wp , 0.197187500_wp , 0.330892857_wp , & & 0.197187500_wp , 0.223928571_wp , 0.384375000_wp , 0.411116071_wp , & & 0.892455357_wp , 0.464598214_wp , 1.801651786_wp , 1.774910714_wp , & & 3.085223214_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.063482143_wp , 0.357633929_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.411116071_wp , 0.143705357_wp , 0.197187500_wp , & & 0.357633929_wp , 0.437857143_wp , 0.919196429_wp , 0.491339286_wp , & & 1.748169643_wp , 1.400535714_wp , 2.791071429_wp , 5.491919643_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.330892857_wp , & & 0.223928571_wp , 6.000000000_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.437857143_wp , & & 0.384375000_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.491339286_wp , 0.651785714_wp , 1.988839286_wp , 0.758750000_wp , & & 1.480758929_wp , 1.240089286_wp , 2.309732143_wp , 4.903616071_wp , & & 6.000000000_wp , 6.000000000_wp , 0.304151786_wp , 0.357633929_wp , & & 0.277410714_wp , 0.785491071_wp , 0.250669643_wp , 0.330892857_wp , & & 0.277410714_wp , 0.250669643_wp , 0.705267857_wp , 0.330892857_wp , & & 0.972678571_wp , 0.384375000_wp , 0.250669643_wp , 0.223928571_wp , & & 1.881875000_wp , 0.304151786_wp , 0.357633929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 59 ) / & & 0.464598214_wp , 0.705267857_wp , 0.090223214_wp , 0.197187500_wp , & & 0.250669643_wp , 0.304151786_wp , 0.384375000_wp , 0.411116071_wp , & & 0.464598214_wp , 0.544821429_wp , 0.090223214_wp , 0.090223214_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.304151786_wp , 0.063482143_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , & & 0.063482143_wp , 0.090223214_wp , 0.116964286_wp , 0.090223214_wp , & & 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.036741071_wp , 0.116964286_wp , & & 0.116964286_wp , 0.170446429_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , & & 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , 0.063482143_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.063482143_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.090223214_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 60 ) / & & 0.491339286_wp , 0.732008929_wp , 0.090223214_wp , 0.197187500_wp , & & 0.250669643_wp , 0.304151786_wp , 0.384375000_wp , 0.411116071_wp , & & 0.491339286_wp , 0.544821429_wp , 0.116964286_wp , 0.090223214_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.063482143_wp , 0.090223214_wp , 0.116964286_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.170446429_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , & & 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.063482143_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.090223214_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 61 ) / & & 0.491339286_wp , 0.732008929_wp , 0.090223214_wp , 0.197187500_wp , & & 0.250669643_wp , 0.304151786_wp , 0.384375000_wp , 0.411116071_wp , & & 0.491339286_wp , 0.571562500_wp , 0.116964286_wp , 0.090223214_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.090223214_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.063482143_wp , 0.090223214_wp , 0.143705357_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.170446429_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.063482143_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.090223214_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 62 ) / & & 0.491339286_wp , 0.732008929_wp , 0.090223214_wp , 0.197187500_wp , & & 0.250669643_wp , 0.330892857_wp , 0.384375000_wp , 0.437857143_wp , & & 0.491339286_wp , 0.571562500_wp , 0.116964286_wp , 0.090223214_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.090223214_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.063482143_wp , 0.090223214_wp , 0.143705357_wp , 0.090223214_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.036741071_wp , 0.116964286_wp , & & 0.116964286_wp , 0.170446429_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.063482143_wp , 0.090223214_wp , & & 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.090223214_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 63 ) / & & 0.651785714_wp , 1.052901786_wp , 0.116964286_wp , 0.250669643_wp , & & 0.330892857_wp , 0.491339286_wp , 0.571562500_wp , 0.625044643_wp , & & 0.705267857_wp , 0.812232143_wp , 0.143705357_wp , 0.090223214_wp , & & 0.197187500_wp , 0.250669643_wp , 0.304151786_wp , 0.357633929_wp , & & 0.384375000_wp , 0.437857143_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , & & 0.063482143_wp , 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.036741071_wp , 0.143705357_wp , & & 0.116964286_wp , 0.250669643_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , & & 0.250669643_wp , 0.277410714_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 64 ) / & & 0.625044643_wp , 0.892455357_wp , 0.143705357_wp , 0.250669643_wp , & & 0.304151786_wp , 0.384375000_wp , 0.464598214_wp , 0.518080357_wp , & & 0.598303571_wp , 0.678526786_wp , 0.143705357_wp , 0.090223214_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 0.304151786_wp , & & 0.330892857_wp , 0.384375000_wp , 0.063482143_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.277410714_wp , 0.277410714_wp , 0.304151786_wp , & & 0.063482143_wp , 0.116964286_wp , 0.170446429_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.036741071_wp , 0.143705357_wp , & & 0.143705357_wp , 0.223928571_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.116964286_wp , 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 65 ) / & & 0.544821429_wp , 0.785491071_wp , 0.116964286_wp , 0.197187500_wp , & & 0.277410714_wp , 0.357633929_wp , 0.411116071_wp , 0.464598214_wp , & & 0.544821429_wp , 0.598303571_wp , 0.116964286_wp , 0.116964286_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , & & 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.063482143_wp , 0.090223214_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.197187500_wp , 0.063482143_wp , 0.063482143_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.063482143_wp , 0.090223214_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 66 ) / & & 0.571562500_wp , 0.812232143_wp , 0.116964286_wp , 0.223928571_wp , & & 0.277410714_wp , 0.357633929_wp , 0.437857143_wp , 0.464598214_wp , & & 0.544821429_wp , 0.625044643_wp , 0.116964286_wp , 0.090223214_wp , & & 0.170446429_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , & & 0.063482143_wp , 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.036741071_wp , 0.116964286_wp , & & 0.116964286_wp , 0.197187500_wp , 0.063482143_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.090223214_wp , 0.090223214_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 67 ) / & & 0.518080357_wp , 0.758750000_wp , 0.116964286_wp , 0.197187500_wp , & & 0.250669643_wp , 0.330892857_wp , 0.411116071_wp , 0.437857143_wp , & & 0.518080357_wp , 0.571562500_wp , 0.116964286_wp , 0.116964286_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.330892857_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , & & 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.063482143_wp , 0.090223214_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.197187500_wp , 0.063482143_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.090223214_wp , 0.090223214_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 68 ) / & & 0.518080357_wp , 0.758750000_wp , 0.116964286_wp , 0.197187500_wp , & & 0.277410714_wp , 0.330892857_wp , 0.411116071_wp , 0.437857143_wp , & & 0.518080357_wp , 0.598303571_wp , 0.116964286_wp , 0.116964286_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.330892857_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , & & 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.063482143_wp , 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.197187500_wp , 0.063482143_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.090223214_wp , 0.090223214_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 69 ) / & & 0.544821429_wp , 0.785491071_wp , 0.116964286_wp , 0.223928571_wp , & & 0.277410714_wp , 0.330892857_wp , 0.411116071_wp , 0.464598214_wp , & & 0.518080357_wp , 0.598303571_wp , 0.116964286_wp , 0.116964286_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.330892857_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.063482143_wp , 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.197187500_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.090223214_wp , 0.090223214_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 70 ) / & & 0.571562500_wp , 0.812232143_wp , 0.116964286_wp , 0.223928571_wp , & & 0.277410714_wp , 0.357633929_wp , 0.437857143_wp , 0.464598214_wp , & & 0.544821429_wp , 0.625044643_wp , 0.143705357_wp , 0.116964286_wp , & & 0.170446429_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , & & 0.063482143_wp , 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.197187500_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.090223214_wp , 0.090223214_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 71 ) / & & 0.598303571_wp , 0.838973214_wp , 0.143705357_wp , 0.250669643_wp , & & 0.304151786_wp , 0.384375000_wp , 0.464598214_wp , 0.491339286_wp , & & 0.571562500_wp , 0.651785714_wp , 0.143705357_wp , 0.116964286_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.330892857_wp , 0.357633929_wp , 0.090223214_wp , 0.143705357_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , & & 0.063482143_wp , 0.116964286_wp , 0.170446429_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.250669643_wp , 0.063482143_wp , 0.143705357_wp , & & 0.143705357_wp , 0.223928571_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.116964286_wp , 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 72 ) / & & 0.972678571_wp , 1.667946429_wp , 0.170446429_wp , 0.330892857_wp , & & 0.491339286_wp , 0.838973214_wp , 0.919196429_wp , 0.972678571_wp , & & 1.106383929_wp , 1.240089286_wp , 0.197187500_wp , 0.143705357_wp , & & 0.277410714_wp , 0.411116071_wp , 0.518080357_wp , 0.571562500_wp , & & 0.651785714_wp , 0.705267857_wp , 0.090223214_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.223928571_wp , & & 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , & & 0.357633929_wp , 0.277410714_wp , 0.330892857_wp , 0.384375000_wp , & & 0.464598214_wp , 0.544821429_wp , 0.571562500_wp , 0.598303571_wp , & & 0.090223214_wp , 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , & & 0.143705357_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.197187500_wp , 0.223928571_wp , 0.330892857_wp , 0.250669643_wp , & & 0.250669643_wp , 0.304151786_wp , 0.384375000_wp , 0.437857143_wp , & & 0.491339286_wp , 0.518080357_wp , 0.063482143_wp , 0.143705357_wp , & & 0.143705357_wp , 0.437857143_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.170446429_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.357633929_wp , 0.464598214_wp , 0.357633929_wp , & & 0.250669643_wp , 0.277410714_wp , 0.330892857_wp , 0.411116071_wp , & & 0.464598214_wp , 0.464598214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.170446429_wp , 0.143705357_wp , 0.116964286_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.223928571_wp , 0.197187500_wp , & & 0.116964286_wp , 0.197187500_wp , 0.170446429_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.223928571_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 73 ) / & & 1.026160714_wp , 1.801651786_wp , 0.250669643_wp , 0.304151786_wp , & & 0.464598214_wp , 0.812232143_wp , 0.919196429_wp , 0.999419643_wp , & & 1.159866071_wp , 1.373794643_wp , 0.223928571_wp , 0.143705357_wp , & & 0.277410714_wp , 0.384375000_wp , 0.464598214_wp , 0.518080357_wp , & & 0.598303571_wp , 0.678526786_wp , 0.090223214_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.250669643_wp , & & 0.223928571_wp , 0.250669643_wp , 0.223928571_wp , 0.250669643_wp , & & 0.357633929_wp , 0.277410714_wp , 0.304151786_wp , 0.357633929_wp , & & 0.437857143_wp , 0.464598214_wp , 0.518080357_wp , 0.544821429_wp , & & 0.063482143_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.223928571_wp , 0.170446429_wp , 0.250669643_wp , & & 0.223928571_wp , 0.250669643_wp , 0.330892857_wp , 0.277410714_wp , & & 0.250669643_wp , 0.304151786_wp , 0.357633929_wp , 0.384375000_wp , & & 0.411116071_wp , 0.437857143_wp , 0.063482143_wp , 0.170446429_wp , & & 0.143705357_wp , 0.384375000_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.197187500_wp , 0.250669643_wp , 0.197187500_wp , 0.277410714_wp , & & 0.250669643_wp , 0.357633929_wp , 0.411116071_wp , 0.357633929_wp , & & 0.277410714_wp , 0.277410714_wp , 0.330892857_wp , 0.357633929_wp , & & 0.384375000_wp , 0.411116071_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , & & 0.143705357_wp , 0.170446429_wp , 0.250669643_wp , 0.197187500_wp , & & 0.143705357_wp , 0.223928571_wp , 0.170446429_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 74 ) / & & 0.518080357_wp , 0.705267857_wp , 0.330892857_wp , 0.250669643_wp , & & 0.330892857_wp , 0.357633929_wp , 0.384375000_wp , 0.411116071_wp , & & 0.491339286_wp , 0.544821429_wp , 0.197187500_wp , 0.116964286_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.063482143_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , & & 0.063482143_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.143705357_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.063482143_wp , 0.143705357_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.250669643_wp , 0.143705357_wp , 0.170446429_wp , 0.250669643_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.197187500_wp , 0.197187500_wp , 0.143705357_wp , 0.143705357_wp , & & 0.116964286_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 75 ) / & & 0.464598214_wp , 0.598303571_wp , 0.357633929_wp , 0.197187500_wp , & & 0.304151786_wp , 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , & & 0.437857143_wp , 0.491339286_wp , 0.197187500_wp , 0.116964286_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.277410714_wp , 0.090223214_wp , 0.143705357_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , & & 0.090223214_wp , 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.116964286_wp , 0.143705357_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.063482143_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.197187500_wp , 0.170446429_wp , 0.116964286_wp , 0.143705357_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 76 ) / & & 0.598303571_wp , 0.785491071_wp , 0.330892857_wp , 0.223928571_wp , & & 0.384375000_wp , 0.411116071_wp , 0.437857143_wp , 0.491339286_wp , & & 0.571562500_wp , 0.625044643_wp , 0.223928571_wp , 0.116964286_wp , & & 0.277410714_wp , 0.277410714_wp , 0.277410714_wp , 0.277410714_wp , & & 0.330892857_wp , 0.357633929_wp , 0.090223214_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.170446429_wp , 0.197187500_wp , 0.304151786_wp , 0.277410714_wp , & & 0.250669643_wp , 0.277410714_wp , 0.250669643_wp , 0.277410714_wp , & & 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , & & 0.090223214_wp , 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , & & 0.223928571_wp , 0.250669643_wp , 0.143705357_wp , 0.170446429_wp , & & 0.250669643_wp , 0.277410714_wp , 0.250669643_wp , 0.250669643_wp , & & 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.063482143_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.250669643_wp , & & 0.277410714_wp , 0.250669643_wp , 0.143705357_wp , 0.170446429_wp , & & 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , 0.250669643_wp , & & 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.250669643_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.197187500_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 77 ) / & & 2.202767857_wp , 2.336473214_wp , 0.330892857_wp , 0.277410714_wp , & & 0.651785714_wp , 1.159866071_wp , 1.240089286_wp , 1.347053571_wp , & & 1.560982143_wp , 1.774910714_wp , 0.223928571_wp , 0.116964286_wp , & & 0.384375000_wp , 0.491339286_wp , 0.625044643_wp , 0.732008929_wp , & & 0.838973214_wp , 0.945937500_wp , 0.090223214_wp , 0.250669643_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.304151786_wp , & & 0.223928571_wp , 0.223928571_wp , 0.304151786_wp , 0.304151786_wp , & & 0.464598214_wp , 0.357633929_wp , 0.411116071_wp , 0.491339286_wp , & & 0.598303571_wp , 0.625044643_wp , 0.705267857_wp , 0.758750000_wp , & & 0.063482143_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.304151786_wp , 0.143705357_wp , 0.223928571_wp , & & 0.277410714_wp , 0.304151786_wp , 0.437857143_wp , 0.357633929_wp , & & 0.357633929_wp , 0.411116071_wp , 0.464598214_wp , 0.518080357_wp , & & 0.571562500_wp , 0.598303571_wp , 0.063482143_wp , 0.223928571_wp , & & 0.170446429_wp , 0.491339286_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , & & 0.250669643_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.330892857_wp , 0.464598214_wp , 0.544821429_wp , 0.437857143_wp , & & 0.357633929_wp , 0.384375000_wp , 0.437857143_wp , 0.464598214_wp , & & 0.518080357_wp , 0.544821429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.197187500_wp , 0.170446429_wp , 0.277410714_wp , & & 0.197187500_wp , 0.197187500_wp , 0.330892857_wp , 0.250669643_wp , & & 0.170446429_wp , 0.304151786_wp , 0.223928571_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 78 ) / & & 2.042321429_wp , 3.058482143_wp , 0.437857143_wp , 0.277410714_wp , & & 1.159866071_wp , 1.293571429_wp , 1.320312500_wp , 1.480758929_wp , & & 1.774910714_wp , 2.095803571_wp , 0.223928571_wp , 0.116964286_wp , & & 0.651785714_wp , 0.785491071_wp , 0.812232143_wp , 0.865714286_wp , & & 0.945937500_wp , 1.079642857_wp , 0.090223214_wp , 0.357633929_wp , & & 0.250669643_wp , 0.277410714_wp , 0.223928571_wp , 0.384375000_wp , & & 0.223928571_wp , 0.223928571_wp , 0.357633929_wp , 0.411116071_wp , & & 0.732008929_wp , 0.464598214_wp , 0.705267857_wp , 0.785491071_wp , & & 0.758750000_wp , 0.758750000_wp , 0.838973214_wp , 0.892455357_wp , & & 0.063482143_wp , 0.330892857_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.384375000_wp , 0.143705357_wp , 0.223928571_wp , & & 0.357633929_wp , 0.411116071_wp , 0.732008929_wp , 0.464598214_wp , & & 0.625044643_wp , 0.705267857_wp , 0.678526786_wp , 0.678526786_wp , & & 0.705267857_wp , 0.758750000_wp , 0.063482143_wp , 0.330892857_wp , & & 0.223928571_wp , 0.651785714_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.357633929_wp , & & 0.357633929_wp , 0.197187500_wp , 0.197187500_wp , 0.250669643_wp , & & 0.464598214_wp , 0.544821429_wp , 0.705267857_wp , 0.651785714_wp , & & 0.651785714_wp , 0.678526786_wp , 0.651785714_wp , 0.651785714_wp , & & 0.651785714_wp , 0.705267857_wp , 0.277410714_wp , 0.304151786_wp , & & 0.304151786_wp , 0.277410714_wp , 0.250669643_wp , 0.330892857_wp , & & 0.812232143_wp , 0.250669643_wp , 0.571562500_wp , 0.330892857_wp , & & 0.223928571_wp , 0.384375000_wp , 0.250669643_wp , 0.223928571_wp , & & 0.277410714_wp , 0.277410714_wp , 0.357633929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 79 ) / & & 1.908616071_wp , 6.000000000_wp , 0.437857143_wp , 0.277410714_wp , & & 1.454017857_wp , 1.507500000_wp , 2.256250000_wp , 4.903616071_wp , & & 5.625625000_wp , 6.000000000_wp , 0.223928571_wp , 0.116964286_wp , & & 1.293571429_wp , 1.373794643_wp , 2.309732143_wp , 3.646785714_wp , & & 4.689687500_wp , 3.727008929_wp , 0.090223214_wp , 0.411116071_wp , & & 0.277410714_wp , 0.304151786_wp , 0.223928571_wp , 0.384375000_wp , & & 0.223928571_wp , 0.223928571_wp , 0.411116071_wp , 0.437857143_wp , & & 0.892455357_wp , 0.491339286_wp , 1.801651786_wp , 1.427276786_wp , & & 2.389955357_wp , 3.833973214_wp , 5.572142857_wp , 3.058482143_wp , & & 0.063482143_wp , 0.357633929_wp , 0.250669643_wp , 0.304151786_wp , & & 0.304151786_wp , 0.437857143_wp , 0.143705357_wp , 0.223928571_wp , & & 0.384375000_wp , 0.437857143_wp , 0.919196429_wp , 0.518080357_wp , & & 1.881875000_wp , 1.159866071_wp , 1.748169643_wp , 2.336473214_wp , & & 3.325892857_wp , 2.443437500_wp , 0.063482143_wp , 0.357633929_wp , & & 0.223928571_wp , 1.988839286_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.464598214_wp , & & 0.411116071_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.544821429_wp , 0.705267857_wp , 1.614464286_wp , 0.785491071_wp , & & 1.774910714_wp , 0.972678571_wp , 1.507500000_wp , 2.122544643_wp , & & 3.138705357_wp , 2.229508929_wp , 0.330892857_wp , 0.357633929_wp , & & 0.304151786_wp , 0.838973214_wp , 0.945937500_wp , 0.357633929_wp , & & 0.330892857_wp , 0.277410714_wp , 0.732008929_wp , 0.357633929_wp , & & 0.838973214_wp , 0.437857143_wp , 0.277410714_wp , 0.250669643_wp , & & 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 80 ) / & & 2.256250000_wp , 3.085223214_wp , 0.411116071_wp , 0.277410714_wp , & & 0.919196429_wp , 1.560982143_wp , 1.667946429_wp , 1.801651786_wp , & & 2.095803571_wp , 2.363214286_wp , 0.223928571_wp , 0.116964286_wp , & & 0.544821429_wp , 0.732008929_wp , 0.892455357_wp , 0.999419643_wp , & & 1.133125000_wp , 1.240089286_wp , 0.090223214_wp , 0.330892857_wp , & & 0.250669643_wp , 0.277410714_wp , 0.223928571_wp , 0.384375000_wp , & & 0.223928571_wp , 0.250669643_wp , 0.357633929_wp , 0.411116071_wp , & & 2.069062500_wp , 0.437857143_wp , 0.625044643_wp , 0.732008929_wp , & & 0.838973214_wp , 0.892455357_wp , 0.972678571_wp , 1.052901786_wp , & & 0.063482143_wp , 0.304151786_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.384375000_wp , 0.170446429_wp , 0.223928571_wp , & & 0.357633929_wp , 0.411116071_wp , 0.651785714_wp , 0.464598214_wp , & & 0.544821429_wp , 0.651785714_wp , 0.705267857_wp , 0.758750000_wp , & & 0.838973214_wp , 0.865714286_wp , 0.063482143_wp , 0.330892857_wp , & & 0.223928571_wp , 0.758750000_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.357633929_wp , & & 0.357633929_wp , 0.223928571_wp , 0.197187500_wp , 0.250669643_wp , & & 0.437857143_wp , 0.651785714_wp , 0.785491071_wp , 0.598303571_wp , & & 0.544821429_wp , 0.571562500_wp , 0.678526786_wp , 0.705267857_wp , & & 0.758750000_wp , 0.785491071_wp , 0.277410714_wp , 0.304151786_wp , & & 0.304151786_wp , 0.277410714_wp , 0.250669643_wp , 0.330892857_wp , & & 0.277410714_wp , 0.277410714_wp , 0.518080357_wp , 0.330892857_wp , & & 0.250669643_wp , 0.384375000_wp , 0.250669643_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.357633929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 81 ) / & & 1.614464286_wp , 4.716428571_wp , 0.330892857_wp , 0.277410714_wp , & & 1.855133929_wp , 1.347053571_wp , 2.095803571_wp , 2.951517857_wp , & & 3.406116071_wp , 3.780491071_wp , 0.223928571_wp , 0.116964286_wp , & & 0.437857143_wp , 1.721428571_wp , 1.774910714_wp , 1.881875000_wp , & & 2.069062500_wp , 2.309732143_wp , 0.063482143_wp , 0.250669643_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.330892857_wp , & & 0.197187500_wp , 0.223928571_wp , 0.304151786_wp , 0.330892857_wp , & & 0.571562500_wp , 0.357633929_wp , 0.544821429_wp , 1.694687500_wp , & & 1.667946429_wp , 1.774910714_wp , 1.855133929_wp , 2.015580357_wp , & & 0.063482143_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.223928571_wp , 0.304151786_wp , 0.143705357_wp , 0.223928571_wp , & & 0.277410714_wp , 0.330892857_wp , 0.571562500_wp , 0.384375000_wp , & & 0.411116071_wp , 1.641205357_wp , 1.480758929_wp , 1.507500000_wp , & & 1.587723214_wp , 1.721428571_wp , 0.063482143_wp , 0.223928571_wp , & & 0.170446429_wp , 1.480758929_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.250669643_wp , & & 0.277410714_wp , 0.197187500_wp , 0.170446429_wp , 0.223928571_wp , & & 0.357633929_wp , 0.651785714_wp , 1.774910714_wp , 0.544821429_wp , & & 0.437857143_wp , 1.641205357_wp , 1.454017857_wp , 1.427276786_wp , & & 1.454017857_wp , 1.587723214_wp , 0.197187500_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.197187500_wp , 0.197187500_wp , 0.357633929_wp , 0.250669643_wp , & & 1.828392857_wp , 0.304151786_wp , 0.197187500_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 82 ) / & & 1.507500000_wp , 5.358214286_wp , 0.357633929_wp , 0.250669643_wp , & & 0.945937500_wp , 1.347053571_wp , 1.908616071_wp , 2.924776786_wp , & & 3.165446429_wp , 3.940937500_wp , 0.197187500_wp , 0.090223214_wp , & & 0.491339286_wp , 0.785491071_wp , 1.454017857_wp , 1.988839286_wp , & & 2.256250000_wp , 2.229508929_wp , 0.063482143_wp , 0.277410714_wp , & & 0.197187500_wp , 0.223928571_wp , 0.170446429_wp , 0.357633929_wp , & & 0.197187500_wp , 0.223928571_wp , 0.304151786_wp , 0.330892857_wp , & & 0.598303571_wp , 0.384375000_wp , 0.571562500_wp , 0.838973214_wp , & & 1.507500000_wp , 1.881875000_wp , 2.149285714_wp , 1.908616071_wp , & & 0.063482143_wp , 0.250669643_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.330892857_wp , 0.143705357_wp , 0.197187500_wp , & & 0.277410714_wp , 0.357633929_wp , 0.598303571_wp , 0.411116071_wp , & & 0.464598214_wp , 0.678526786_wp , 0.919196429_wp , 1.320312500_wp , & & 1.774910714_wp , 1.427276786_wp , 0.063482143_wp , 0.250669643_wp , & & 0.170446429_wp , 1.240089286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.277410714_wp , & & 0.277410714_wp , 0.197187500_wp , 0.170446429_wp , 0.223928571_wp , & & 0.384375000_wp , 0.678526786_wp , 0.972678571_wp , 0.571562500_wp , & & 1.641205357_wp , 0.544821429_wp , 0.812232143_wp , 1.106383929_wp , & & 1.560982143_wp , 1.240089286_wp , 0.223928571_wp , 0.223928571_wp , & & 0.223928571_wp , 0.197187500_wp , 0.170446429_wp , 0.277410714_wp , & & 0.838973214_wp , 0.197187500_wp , 0.411116071_wp , 0.250669643_wp , & & 0.170446429_wp , 0.330892857_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 83 ) / & & 1.667946429_wp , 6.000000000_wp , 0.411116071_wp , 0.250669643_wp , & & 1.213348214_wp , 1.347053571_wp , 1.988839286_wp , 4.903616071_wp , & & 5.331473214_wp , 6.000000000_wp , 0.197187500_wp , 0.090223214_wp , & & 1.908616071_wp , 1.213348214_wp , 2.416696429_wp , 3.753750000_wp , & & 4.101383929_wp , 3.807232143_wp , 0.063482143_wp , 0.330892857_wp , & & 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , 0.330892857_wp , & & 0.197187500_wp , 0.197187500_wp , 0.330892857_wp , 0.384375000_wp , & & 0.758750000_wp , 0.437857143_wp , 1.774910714_wp , 1.373794643_wp , & & 2.496919643_wp , 3.379375000_wp , 3.620044643_wp , 3.192187500_wp , & & 0.063482143_wp , 0.304151786_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.357633929_wp , 0.143705357_wp , 0.197187500_wp , & & 0.330892857_wp , 0.384375000_wp , 0.785491071_wp , 0.437857143_wp , & & 1.667946429_wp , 1.079642857_wp , 1.828392857_wp , 2.791071429_wp , & & 3.138705357_wp , 2.603883929_wp , 0.063482143_wp , 0.277410714_wp , & & 0.197187500_wp , 2.309732143_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.330892857_wp , & & 0.330892857_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.437857143_wp , 0.651785714_wp , 1.507500000_wp , 0.678526786_wp , & & 1.454017857_wp , 0.812232143_wp , 1.641205357_wp , 2.523660714_wp , & & 2.951517857_wp , 2.389955357_wp , 0.277410714_wp , 0.277410714_wp , & & 0.250669643_wp , 0.812232143_wp , 0.972678571_wp , 0.304151786_wp , & & 0.250669643_wp , 0.223928571_wp , 0.598303571_wp , 0.277410714_wp , & & 0.197187500_wp , 0.357633929_wp , 0.223928571_wp , 0.197187500_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 84 ) / & & 1.774910714_wp , 6.000000000_wp , 0.384375000_wp , 0.223928571_wp , & & 1.454017857_wp , 1.373794643_wp , 2.069062500_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.197187500_wp , 0.090223214_wp , & & 1.908616071_wp , 1.694687500_wp , 2.710848214_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.357633929_wp , & & 0.223928571_wp , 0.250669643_wp , 0.197187500_wp , 0.330892857_wp , & & 0.197187500_wp , 0.197187500_wp , 0.357633929_wp , 0.411116071_wp , & & 0.865714286_wp , 0.437857143_wp , 1.721428571_wp , 1.801651786_wp , & & 2.951517857_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.063482143_wp , 0.330892857_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.384375000_wp , 0.143705357_wp , 0.197187500_wp , & & 0.330892857_wp , 0.411116071_wp , 0.892455357_wp , 0.464598214_wp , & & 1.641205357_wp , 1.400535714_wp , 2.844553571_wp , 4.047901786_wp , & & 5.491919643_wp , 6.000000000_wp , 0.063482143_wp , 0.330892857_wp , & & 0.197187500_wp , 4.903616071_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.411116071_wp , & & 0.357633929_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.464598214_wp , 0.651785714_wp , 2.122544643_wp , 0.705267857_wp , & & 1.427276786_wp , 1.106383929_wp , 2.523660714_wp , 3.727008929_wp , & & 5.090803571_wp , 5.491919643_wp , 0.304151786_wp , 0.330892857_wp , & & 0.277410714_wp , 0.785491071_wp , 0.223928571_wp , 0.330892857_wp , & & 0.277410714_wp , 0.250669643_wp , 0.758750000_wp , 0.304151786_wp , & & 0.945937500_wp , 0.384375000_wp , 0.223928571_wp , 0.223928571_wp , & & 1.881875000_wp , 0.277410714_wp , 0.330892857_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 85 ) / & & 1.881875000_wp , 6.000000000_wp , 0.384375000_wp , 0.250669643_wp , & & 1.721428571_wp , 1.427276786_wp , 2.176026786_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.197187500_wp , 0.090223214_wp , & & 1.988839286_wp , 2.042321429_wp , 2.791071429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.411116071_wp , & & 0.250669643_wp , 0.277410714_wp , 0.197187500_wp , 0.357633929_wp , & & 0.197187500_wp , 0.223928571_wp , 0.384375000_wp , 0.411116071_wp , & & 0.945937500_wp , 0.464598214_wp , 1.748169643_wp , 2.256250000_wp , & & 3.031741071_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.063482143_wp , 0.357633929_wp , 0.250669643_wp , 0.277410714_wp , & & 0.277410714_wp , 0.411116071_wp , 0.143705357_wp , 0.197187500_wp , & & 0.357633929_wp , 0.437857143_wp , 0.972678571_wp , 0.491339286_wp , & & 1.721428571_wp , 1.855133929_wp , 2.924776786_wp , 5.732589286_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.357633929_wp , & & 0.223928571_wp , 6.000000000_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.464598214_wp , & & 0.384375000_wp , 0.197187500_wp , 0.170446429_wp , 0.223928571_wp , & & 0.518080357_wp , 0.651785714_wp , 3.138705357_wp , 0.758750000_wp , & & 1.454017857_wp , 1.560982143_wp , 2.951517857_wp , 5.090803571_wp , & & 6.000000000_wp , 6.000000000_wp , 0.330892857_wp , 0.357633929_wp , & & 0.304151786_wp , 0.785491071_wp , 0.250669643_wp , 0.357633929_wp , & & 0.304151786_wp , 0.250669643_wp , 0.838973214_wp , 0.330892857_wp , & & 0.892455357_wp , 0.411116071_wp , 0.250669643_wp , 0.250669643_wp , & & 1.801651786_wp , 0.304151786_wp , 0.357633929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 86 ) / & & 1.935357143_wp , 6.000000000_wp , 0.437857143_wp , 0.250669643_wp , & & 1.641205357_wp , 1.507500000_wp , 2.229508929_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.223928571_wp , 0.116964286_wp , & & 2.069062500_wp , 1.801651786_wp , 2.951517857_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.090223214_wp , 0.411116071_wp , & & 0.277410714_wp , 0.304151786_wp , 0.223928571_wp , 0.357633929_wp , & & 0.197187500_wp , 0.223928571_wp , 0.411116071_wp , 0.437857143_wp , & & 0.972678571_wp , 0.491339286_wp , 1.881875000_wp , 1.855133929_wp , & & 3.192187500_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 0.063482143_wp , 0.384375000_wp , 0.250669643_wp , 0.304151786_wp , & & 0.304151786_wp , 0.437857143_wp , 0.143705357_wp , 0.223928571_wp , & & 0.384375000_wp , 0.437857143_wp , 0.999419643_wp , 0.518080357_wp , & & 1.801651786_wp , 1.480758929_wp , 3.058482143_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 0.063482143_wp , 0.384375000_wp , & & 0.223928571_wp , 6.000000000_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.197187500_wp , 0.277410714_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.464598214_wp , & & 0.411116071_wp , 0.197187500_wp , 0.170446429_wp , 0.250669643_wp , & & 0.544821429_wp , 0.705267857_wp , 2.229508929_wp , 0.785491071_wp , & & 1.587723214_wp , 1.240089286_wp , 2.389955357_wp , 5.491919643_wp , & & 6.000000000_wp , 6.000000000_wp , 0.357633929_wp , 2.229508929_wp , & & 0.304151786_wp , 0.812232143_wp , 0.865714286_wp , 0.384375000_wp , & & 0.357633929_wp , 0.277410714_wp , 0.838973214_wp , 0.357633929_wp , & & 0.972678571_wp , 0.437857143_wp , 0.277410714_wp , 0.250669643_wp , & & 1.962098214_wp , 0.330892857_wp , 0.384375000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 87 ) / & & 0.785491071_wp , 1.748169643_wp , 0.090223214_wp , 0.197187500_wp , & & 0.357633929_wp , 0.838973214_wp , 0.865714286_wp , 0.945937500_wp , & & 1.106383929_wp , 1.320312500_wp , 0.170446429_wp , 0.090223214_wp , & & 0.197187500_wp , 0.304151786_wp , 0.411116071_wp , 0.491339286_wp , & & 0.571562500_wp , 0.651785714_wp , 0.036741071_wp , 0.116964286_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.250669643_wp , 0.197187500_wp , 0.250669643_wp , 0.277410714_wp , & & 0.357633929_wp , 0.411116071_wp , 0.464598214_wp , 0.518080357_wp , & & 0.036741071_wp , 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , & & 0.116964286_wp , 0.170446429_wp , 0.090223214_wp , 0.170446429_wp , & & 0.143705357_wp , 0.197187500_wp , 0.250669643_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.304151786_wp , 0.330892857_wp , & & 0.357633929_wp , 0.411116071_wp , 0.036741071_wp , 0.116964286_wp , & & 0.090223214_wp , 0.304151786_wp , 0.063482143_wp , 0.063482143_wp , & & 0.063482143_wp , 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , & & 0.063482143_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.170446429_wp , & & 0.197187500_wp , 0.277410714_wp , 0.330892857_wp , 0.277410714_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 0.304151786_wp , & & 0.330892857_wp , 0.357633929_wp , 0.063482143_wp , 0.090223214_wp , & & 0.116964286_wp , 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , & & 0.090223214_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.090223214_wp , 0.143705357_wp , 0.116964286_wp , 0.090223214_wp , & & 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 88 ) / & & 0.812232143_wp , 3.218928571_wp , 0.116964286_wp , 0.197187500_wp , & & 0.384375000_wp , 0.999419643_wp , 0.999419643_wp , 2.496919643_wp , & & 2.496919643_wp , 2.871294643_wp , 0.170446429_wp , 0.090223214_wp , & & 0.223928571_wp , 0.304151786_wp , 0.437857143_wp , 0.518080357_wp , & & 2.176026786_wp , 2.363214286_wp , 0.036741071_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , 0.197187500_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.277410714_wp , 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , & & 2.176026786_wp , 0.464598214_wp , 0.518080357_wp , 2.282991071_wp , & & 0.036741071_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.197187500_wp , 0.090223214_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.277410714_wp , 0.223928571_wp , & & 0.197187500_wp , 0.250669643_wp , 0.304151786_wp , 0.357633929_wp , & & 0.411116071_wp , 2.256250000_wp , 0.036741071_wp , 0.116964286_wp , & & 0.116964286_wp , 0.357633929_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.170446429_wp , & & 0.197187500_wp , 0.304151786_wp , 0.357633929_wp , 0.304151786_wp , & & 0.223928571_wp , 0.223928571_wp , 0.277410714_wp , 0.330892857_wp , & & 0.357633929_wp , 2.229508929_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , & & 0.090223214_wp , 0.143705357_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 89 ) / & & 0.785491071_wp , 1.988839286_wp , 0.223928571_wp , 0.170446429_wp , & & 0.357633929_wp , 0.705267857_wp , 0.838973214_wp , 1.052901786_wp , & & 1.400535714_wp , 1.534241071_wp , 0.170446429_wp , 0.090223214_wp , & & 0.223928571_wp , 0.277410714_wp , 0.357633929_wp , 0.437857143_wp , & & 0.518080357_wp , 0.598303571_wp , 0.036741071_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.223928571_wp , & & 0.116964286_wp , 0.143705357_wp , 0.197187500_wp , 0.223928571_wp , & & 0.277410714_wp , 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , & & 0.330892857_wp , 0.384375000_wp , 0.411116071_wp , 0.464598214_wp , & & 0.036741071_wp , 0.143705357_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.223928571_wp , 0.090223214_wp , 0.143705357_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 0.250669643_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 0.304151786_wp , & & 0.330892857_wp , 0.357633929_wp , 0.036741071_wp , 0.116964286_wp , & & 0.090223214_wp , 0.277410714_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.223928571_wp , 0.304151786_wp , 0.304151786_wp , 0.304151786_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.304151786_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.197187500_wp , & & 0.116964286_wp , 0.116964286_wp , 0.197187500_wp , 0.143705357_wp , & & 0.116964286_wp , 0.223928571_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 90 ) / & & 1.106383929_wp , 2.791071429_wp , 0.197187500_wp , 0.223928571_wp , & & 0.437857143_wp , 0.919196429_wp , 1.427276786_wp , 1.587723214_wp , & & 1.855133929_wp , 2.095803571_wp , 0.170446429_wp , 0.090223214_wp , & & 0.197187500_wp , 0.277410714_wp , 0.972678571_wp , 0.999419643_wp , & & 1.052901786_wp , 1.159866071_wp , 0.063482143_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.197187500_wp , & & 0.250669643_wp , 0.223928571_wp , 0.223928571_wp , 0.892455357_wp , & & 0.919196429_wp , 0.892455357_wp , 0.945937500_wp , 1.026160714_wp , & & 0.036741071_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.170446429_wp , 0.116964286_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.838973214_wp , 0.785491071_wp , & & 0.812232143_wp , 0.865714286_wp , 0.036741071_wp , 0.116964286_wp , & & 0.090223214_wp , 0.785491071_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.197187500_wp , & & 0.197187500_wp , 0.277410714_wp , 0.838973214_wp , 0.277410714_wp , & & 0.197187500_wp , 0.197187500_wp , 0.812232143_wp , 0.785491071_wp , & & 0.785491071_wp , 0.812232143_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.090223214_wp , 0.170446429_wp , & & 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , & & 0.090223214_wp , 0.170446429_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 91 ) / & & 1.079642857_wp , 3.780491071_wp , 0.170446429_wp , 0.223928571_wp , & & 0.357633929_wp , 0.838973214_wp , 1.694687500_wp , 2.042321429_wp , & & 2.389955357_wp , 2.737589286_wp , 0.143705357_wp , 0.090223214_wp , & & 0.197187500_wp , 0.732008929_wp , 0.919196429_wp , 1.186607143_wp , & & 1.293571429_wp , 1.454017857_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.865714286_wp , & & 0.945937500_wp , 0.892455357_wp , 0.999419643_wp , 1.240089286_wp , & & 0.063482143_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.170446429_wp , 0.116964286_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.223928571_wp , 0.197187500_wp , & & 0.170446429_wp , 0.785491071_wp , 0.945937500_wp , 0.250669643_wp , & & 0.812232143_wp , 0.945937500_wp , 0.036741071_wp , 0.090223214_wp , & & 0.090223214_wp , 0.250669643_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.250669643_wp , 0.945937500_wp , 0.250669643_wp , & & 0.170446429_wp , 0.170446429_wp , 0.972678571_wp , 0.223928571_wp , & & 0.250669643_wp , 0.865714286_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.090223214_wp , 0.090223214_wp , 0.170446429_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , & & 0.090223214_wp , 0.170446429_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 92 ) / & & 0.892455357_wp , 1.240089286_wp , 0.197187500_wp , 0.223928571_wp , & & 0.411116071_wp , 0.518080357_wp , 0.678526786_wp , 0.732008929_wp , & & 0.865714286_wp , 0.919196429_wp , 0.197187500_wp , 0.090223214_wp , & & 0.250669643_wp , 0.357633929_wp , 0.384375000_wp , 0.437857143_wp , & & 0.518080357_wp , 0.544821429_wp , 0.063482143_wp , 0.170446429_wp , & & 0.170446429_wp , 0.143705357_wp , 0.170446429_wp , 0.223928571_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , & & 0.304151786_wp , 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , & & 0.384375000_wp , 0.411116071_wp , 0.464598214_wp , 0.464598214_wp , & & 0.063482143_wp , 0.143705357_wp , 0.223928571_wp , 0.170446429_wp , & & 0.170446429_wp , 0.223928571_wp , 0.143705357_wp , 0.197187500_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 0.277410714_wp , & & 0.250669643_wp , 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , & & 0.384375000_wp , 0.411116071_wp , 0.036741071_wp , 0.143705357_wp , & & 0.223928571_wp , 0.330892857_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.277410714_wp , 0.330892857_wp , 0.357633929_wp , 0.330892857_wp , & & 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , & & 0.357633929_wp , 0.384375000_wp , 0.116964286_wp , 0.143705357_wp , & & 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.170446429_wp , 0.277410714_wp , 0.250669643_wp , 0.223928571_wp , & & 0.170446429_wp , 0.223928571_wp , 0.411116071_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 93 ) / & & 1.293571429_wp , 3.245669643_wp , 0.170446429_wp , 0.223928571_wp , & & 0.919196429_wp , 0.812232143_wp , 1.480758929_wp , 1.828392857_wp , & & 2.149285714_wp , 2.470178571_wp , 0.143705357_wp , 0.090223214_wp , & & 1.079642857_wp , 0.785491071_wp , 0.625044643_wp , 0.758750000_wp , & & 0.865714286_wp , 1.026160714_wp , 0.063482143_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.250669643_wp , 0.223928571_wp , 1.855133929_wp , 0.277410714_wp , & & 0.411116071_wp , 0.571562500_wp , 0.678526786_wp , 0.838973214_wp , & & 0.063482143_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.116964286_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 0.892455357_wp , 0.223928571_wp , 0.277410714_wp , 0.304151786_wp , & & 0.384375000_wp , 0.544821429_wp , 0.036741071_wp , 0.116964286_wp , & & 0.116964286_wp , 0.277410714_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.197187500_wp , & & 0.197187500_wp , 0.812232143_wp , 0.330892857_wp , 0.277410714_wp , & & 0.197187500_wp , 0.838973214_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.357633929_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , & & 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , & & 0.116964286_wp , 0.197187500_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 94 ) / & & 0.758750000_wp , 2.710848214_wp , 0.197187500_wp , 0.197187500_wp , & & 0.330892857_wp , 0.544821429_wp , 0.678526786_wp , 0.812232143_wp , & & 1.801651786_wp , 2.042321429_wp , 0.170446429_wp , 0.090223214_wp , & & 0.197187500_wp , 0.250669643_wp , 0.330892857_wp , 0.357633929_wp , & & 0.437857143_wp , 0.491339286_wp , 0.063482143_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.223928571_wp , 0.250669643_wp , & & 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , 0.384375000_wp , & & 0.063482143_wp , 0.143705357_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.197187500_wp , 0.116964286_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.036741071_wp , 0.116964286_wp , & & 0.116964286_wp , 0.250669643_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , & & 0.197187500_wp , 0.250669643_wp , 0.277410714_wp , 0.277410714_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.277410714_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.277410714_wp , & & 0.116964286_wp , 0.116964286_wp , 0.197187500_wp , 0.143705357_wp , & & 0.116964286_wp , 0.250669643_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 95 ) / & & 1.828392857_wp , 2.443437500_wp , 0.277410714_wp , 0.197187500_wp , & & 0.732008929_wp , 1.347053571_wp , 1.240089286_wp , 1.400535714_wp , & & 1.748169643_wp , 1.935357143_wp , 0.197187500_wp , 0.090223214_wp , & & 0.357633929_wp , 0.625044643_wp , 0.838973214_wp , 0.919196429_wp , & & 1.133125000_wp , 1.159866071_wp , 0.063482143_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.277410714_wp , & & 0.143705357_wp , 0.170446429_wp , 0.277410714_wp , 0.277410714_wp , & & 0.464598214_wp , 0.330892857_wp , 0.437857143_wp , 0.625044643_wp , & & 0.838973214_wp , 0.919196429_wp , 0.999419643_wp , 0.999419643_wp , & & 0.036741071_wp , 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , & & 0.197187500_wp , 0.277410714_wp , 0.116964286_wp , 0.170446429_wp , & & 0.250669643_wp , 0.304151786_wp , 0.437857143_wp , 0.330892857_wp , & & 0.357633929_wp , 0.571562500_wp , 0.651785714_wp , 0.758750000_wp , & & 0.838973214_wp , 0.945937500_wp , 0.036741071_wp , 0.170446429_wp , & & 0.170446429_wp , 0.705267857_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.250669643_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.330892857_wp , 0.571562500_wp , 0.732008929_wp , 0.518080357_wp , & & 0.357633929_wp , 0.411116071_wp , 0.598303571_wp , 0.758750000_wp , & & 0.838973214_wp , 0.838973214_wp , 0.143705357_wp , 0.170446429_wp , & & 0.197187500_wp , 0.170446429_wp , 0.143705357_wp , 0.250669643_wp , & & 0.170446429_wp , 0.197187500_wp , 0.277410714_wp , 0.223928571_wp , & & 0.143705357_wp , 0.277410714_wp , 0.197187500_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 96 ) / & & 0.945937500_wp , 2.550401786_wp , 0.250669643_wp , 0.197187500_wp , & & 0.411116071_wp , 1.186607143_wp , 1.266830357_wp , 1.507500000_wp , & & 1.694687500_wp , 1.935357143_wp , 0.197187500_wp , 0.090223214_wp , & & 0.250669643_wp , 0.330892857_wp , 0.411116071_wp , 0.491339286_wp , & & 0.571562500_wp , 0.651785714_wp , 0.063482143_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.143705357_wp , 0.250669643_wp , & & 0.143705357_wp , 0.170446429_wp , 0.223928571_wp , 0.250669643_wp , & & 0.304151786_wp , 0.277410714_wp , 0.277410714_wp , 0.330892857_wp , & & 0.384375000_wp , 0.411116071_wp , 0.464598214_wp , 0.518080357_wp , & & 0.036741071_wp , 0.170446429_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.250669643_wp , 0.116964286_wp , 0.170446429_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 0.277410714_wp , & & 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , & & 0.357633929_wp , 0.384375000_wp , 0.036741071_wp , 0.143705357_wp , & & 0.116964286_wp , 0.330892857_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.197187500_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.250669643_wp , 0.330892857_wp , 0.357633929_wp , 0.330892857_wp , & & 0.250669643_wp , 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , & & 0.330892857_wp , 0.357633929_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.223928571_wp , & & 0.143705357_wp , 0.143705357_wp , 0.223928571_wp , 0.143705357_wp , & & 0.116964286_wp , 0.277410714_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 97 ) / & & 1.079642857_wp , 3.593303571_wp , 0.143705357_wp , 0.223928571_wp , & & 0.357633929_wp , 1.026160714_wp , 1.587723214_wp , 2.149285714_wp , & & 2.309732143_wp , 2.844553571_wp , 0.143705357_wp , 0.090223214_wp , & & 0.197187500_wp , 0.250669643_wp , 0.999419643_wp , 1.133125000_wp , & & 1.266830357_wp , 1.373794643_wp , 0.063482143_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.170446429_wp , 0.170446429_wp , & & 0.223928571_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.999419643_wp , 1.026160714_wp , 0.999419643_wp , 1.159866071_wp , & & 0.063482143_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.838973214_wp , 0.972678571_wp , & & 0.945937500_wp , 1.026160714_wp , 0.036741071_wp , 0.090223214_wp , & & 0.090223214_wp , 0.972678571_wp , 0.090223214_wp , 0.090223214_wp , & & 0.090223214_wp , 0.090223214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.223928571_wp , 0.838973214_wp , 0.250669643_wp , & & 1.828392857_wp , 0.170446429_wp , 0.197187500_wp , 0.945937500_wp , & & 0.892455357_wp , 0.972678571_wp , 0.090223214_wp , 0.090223214_wp , & & 0.116964286_wp , 0.090223214_wp , 0.090223214_wp , 0.170446429_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.116964286_wp , & & 0.090223214_wp , 0.170446429_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 98 ) / & & 2.924776786_wp , 3.459598214_wp , 0.250669643_wp , 0.197187500_wp , & & 0.705267857_wp , 0.812232143_wp , 1.774910714_wp , 2.042321429_wp , & & 2.336473214_wp , 2.710848214_wp , 0.197187500_wp , 0.090223214_wp , & & 0.304151786_wp , 0.437857143_wp , 0.518080357_wp , 0.598303571_wp , & & 0.732008929_wp , 0.892455357_wp , 0.063482143_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.250669643_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.277410714_wp , & & 0.357633929_wp , 0.304151786_wp , 0.330892857_wp , 0.411116071_wp , & & 0.464598214_wp , 0.491339286_wp , 0.544821429_wp , 0.651785714_wp , & & 0.036741071_wp , 0.170446429_wp , 0.250669643_wp , 0.170446429_wp , & & 0.197187500_wp , 0.250669643_wp , 0.116964286_wp , 0.170446429_wp , & & 0.250669643_wp , 0.277410714_wp , 0.357633929_wp , 0.304151786_wp , & & 0.277410714_wp , 0.330892857_wp , 0.384375000_wp , 0.384375000_wp , & & 0.437857143_wp , 0.491339286_wp , 0.036741071_wp , 0.170446429_wp , & & 0.197187500_wp , 0.384375000_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , & & 0.304151786_wp , 0.384375000_wp , 0.437857143_wp , 0.384375000_wp , & & 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , 0.384375000_wp , & & 0.411116071_wp , 0.437857143_wp , 0.143705357_wp , 0.143705357_wp , & & 0.223928571_wp , 0.170446429_wp , 0.170446429_wp , 0.223928571_wp , & & 0.197187500_wp , 0.250669643_wp , 0.277410714_wp , 0.277410714_wp , & & 0.170446429_wp , 0.223928571_wp , 0.223928571_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.384375000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 99 ) / & & 0.732008929_wp , 2.764330357_wp , 0.197187500_wp , 0.197187500_wp , & & 0.330892857_wp , 1.774910714_wp , 2.042321429_wp , 0.732008929_wp , & & 2.122544643_wp , 2.336473214_wp , 0.170446429_wp , 0.090223214_wp , & & 0.223928571_wp , 0.250669643_wp , 0.304151786_wp , 0.357633929_wp , & & 0.411116071_wp , 0.464598214_wp , 0.063482143_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.197187500_wp , & & 0.143705357_wp , 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.223928571_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , 0.384375000_wp , & & 0.036741071_wp , 0.143705357_wp , 0.116964286_wp , 0.143705357_wp , & & 0.170446429_wp , 0.197187500_wp , 0.116964286_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , 0.223928571_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , & & 0.277410714_wp , 0.304151786_wp , 0.036741071_wp , 0.116964286_wp , & & 0.116964286_wp , 0.250669643_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , 0.250669643_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 0.223928571_wp , & & 0.250669643_wp , 0.277410714_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.411116071_wp , & & 0.143705357_wp , 0.116964286_wp , 0.197187500_wp , 0.143705357_wp , & & 0.116964286_wp , 0.223928571_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 100 ) / & & 1.052901786_wp , 3.620044643_wp , 0.170446429_wp , 0.197187500_wp , & & 0.357633929_wp , 1.454017857_wp , 1.881875000_wp , 2.550401786_wp , & & 2.550401786_wp , 3.031741071_wp , 0.143705357_wp , 0.090223214_wp , & & 0.197187500_wp , 0.250669643_wp , 0.304151786_wp , 0.411116071_wp , & & 0.945937500_wp , 1.320312500_wp , 0.063482143_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.223928571_wp , 0.223928571_wp , 0.197187500_wp , 0.223928571_wp , & & 0.277410714_wp , 0.330892857_wp , 0.384375000_wp , 0.598303571_wp , & & 0.036741071_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.116964286_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , & & 0.250669643_wp , 0.304151786_wp , 0.036741071_wp , 0.116964286_wp , & & 0.116964286_wp , 0.223928571_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , & & 0.197187500_wp , 0.223928571_wp , 0.250669643_wp , 0.250669643_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , & & 0.250669643_wp , 0.250669643_wp , 0.090223214_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.197187500_wp , & & 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , & & 0.116964286_wp , 0.170446429_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 101 ) / & & 1.079642857_wp , 3.673526786_wp , 0.197187500_wp , 0.197187500_wp , & & 0.384375000_wp , 1.427276786_wp , 1.855133929_wp , 2.523660714_wp , & & 2.523660714_wp , 3.031741071_wp , 0.170446429_wp , 0.090223214_wp , & & 0.223928571_wp , 0.277410714_wp , 0.357633929_wp , 1.962098214_wp , & & 1.988839286_wp , 2.149285714_wp , 0.063482143_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.116964286_wp , 0.197187500_wp , & & 0.170446429_wp , 0.197187500_wp , 0.197187500_wp , 0.197187500_wp , & & 0.250669643_wp , 0.250669643_wp , 0.223928571_wp , 0.250669643_wp , & & 1.935357143_wp , 1.881875000_wp , 1.828392857_wp , 2.069062500_wp , & & 0.036741071_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.197187500_wp , 0.116964286_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.250669643_wp , 0.223928571_wp , & & 1.908616071_wp , 0.223928571_wp , 0.250669643_wp , 1.935357143_wp , & & 1.881875000_wp , 1.962098214_wp , 0.036741071_wp , 0.116964286_wp , & & 0.116964286_wp , 1.881875000_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.143705357_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , & & 0.170446429_wp , 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , & & 0.197187500_wp , 0.277410714_wp , 0.304151786_wp , 0.277410714_wp , & & 0.197187500_wp , 0.197187500_wp , 0.223928571_wp , 1.881875000_wp , & & 1.801651786_wp , 1.962098214_wp , 0.116964286_wp , 0.116964286_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.197187500_wp , & & 0.116964286_wp , 0.116964286_wp , 0.170446429_wp , 0.143705357_wp , & & 0.116964286_wp , 0.197187500_wp , 0.143705357_wp , 0.116964286_wp , & & 0.116964286_wp , 0.143705357_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 102 ) / & & 1.106383929_wp , 3.700267857_wp , 0.223928571_wp , 0.197187500_wp , & & 0.411116071_wp , 1.507500000_wp , 1.881875000_wp , 2.470178571_wp , & & 2.603883929_wp , 3.005000000_wp , 0.143705357_wp , 0.090223214_wp , & & 0.223928571_wp , 0.304151786_wp , 0.384375000_wp , 1.721428571_wp , & & 1.881875000_wp , 1.935357143_wp , 0.063482143_wp , 0.170446429_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 0.223928571_wp , & & 0.143705357_wp , 0.170446429_wp , 0.223928571_wp , 0.223928571_wp , & & 0.277410714_wp , 0.250669643_wp , 1.908616071_wp , 0.277410714_wp , & & 0.357633929_wp , 1.694687500_wp , 1.694687500_wp , 1.855133929_wp , & & 0.036741071_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.116964286_wp , 0.170446429_wp , & & 0.197187500_wp , 0.223928571_wp , 0.277410714_wp , 0.250669643_wp , & & 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , & & 0.330892857_wp , 0.384375000_wp , 0.036741071_wp , 0.143705357_wp , & & 0.116964286_wp , 0.304151786_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.143705357_wp , 0.116964286_wp , 0.170446429_wp , & & 0.223928571_wp , 0.277410714_wp , 0.330892857_wp , 0.304151786_wp , & & 0.223928571_wp , 0.223928571_wp , 0.250669643_wp , 0.277410714_wp , & & 0.304151786_wp , 0.330892857_wp , 0.143705357_wp , 0.143705357_wp , & & 0.116964286_wp , 0.116964286_wp , 0.116964286_wp , 0.223928571_wp , & & 0.143705357_wp , 0.143705357_wp , 0.197187500_wp , 0.143705357_wp , & & 0.116964286_wp , 0.223928571_wp , 0.143705357_wp , 0.116964286_wp , & & 0.143705357_wp , 0.143705357_wp , 0.170446429_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 103 ) / & & 1.079642857_wp , 2.550401786_wp , 0.223928571_wp , 0.170446429_wp , & & 0.464598214_wp , 1.106383929_wp , 1.320312500_wp , 1.507500000_wp , & & 1.774910714_wp , 1.935357143_wp , 0.170446429_wp , 0.090223214_wp , & & 0.277410714_wp , 0.357633929_wp , 0.437857143_wp , 0.518080357_wp , & & 0.625044643_wp , 0.732008929_wp , 0.036741071_wp , 0.170446429_wp , & & 0.170446429_wp , 0.197187500_wp , 0.143705357_wp , 0.250669643_wp , & & 0.143705357_wp , 0.170446429_wp , 0.250669643_wp , 0.277410714_wp , & & 0.330892857_wp , 0.304151786_wp , 0.304151786_wp , 0.357633929_wp , & & 0.411116071_wp , 0.464598214_wp , 0.518080357_wp , 0.571562500_wp , & & 0.036741071_wp , 0.170446429_wp , 0.143705357_wp , 0.197187500_wp , & & 0.170446429_wp , 0.250669643_wp , 0.116964286_wp , 0.170446429_wp , & & 0.223928571_wp , 0.277410714_wp , 0.304151786_wp , 0.304151786_wp , & & 0.250669643_wp , 0.304151786_wp , 0.330892857_wp , 0.357633929_wp , & & 0.384375000_wp , 0.437857143_wp , 0.036741071_wp , 0.143705357_wp , & & 0.116964286_wp , 0.357633929_wp , 0.143705357_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , & & 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , 0.170446429_wp , & & 0.170446429_wp , 0.170446429_wp , 0.197187500_wp , 0.223928571_wp , & & 0.223928571_wp , 0.143705357_wp , 0.116964286_wp , 0.170446429_wp , & & 0.277410714_wp , 0.357633929_wp , 0.357633929_wp , 0.357633929_wp , & & 0.250669643_wp , 0.277410714_wp , 0.304151786_wp , 0.330892857_wp , & & 0.357633929_wp , 0.384375000_wp , 0.116964286_wp , 0.143705357_wp , & & 0.143705357_wp , 0.143705357_wp , 0.143705357_wp , 0.250669643_wp , & & 0.143705357_wp , 0.143705357_wp , 0.250669643_wp , 0.170446429_wp , & & 0.143705357_wp , 0.384375000_wp , 0.143705357_wp , 0.143705357_wp , & & 0.143705357_wp , 0.170446429_wp , 0.143705357_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 104 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 105 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 106 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 107 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 108 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 109 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 110 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 111 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 112 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 113 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 114 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 115 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 116 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 117 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / data weight_factors (:, 118 ) / & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , 6.000000000_wp , & & 6.000000000_wp , 6.000000000_wp / contains !> Get pairwise CN weighting factor for a given element symbol pair elemental function get_wfpair_val_sym ( symi , symj ) result ( wfpair ) !> Element symbol i character ( len =* ), intent ( in ) :: symi !> Element symbol j character ( len =* ), intent ( in ) :: symj !> Pairwise CN weighting factor real ( wp ) :: wfpair wfpair = get_wfpair_val ( to_number ( symi ), to_number ( symj )) end function get_wfpair_val_sym !> Get pairwise CN weighting factor for a given atomic number pair elemental function get_wfpair_val_num ( numi , numj ) result ( wfpair ) !> Atomic number i integer , intent ( in ) :: numi !> Atomic number i integer , intent ( in ) :: numj !> Pairwise CN weighting factor real ( wp ) :: wfpair wfpair = weight_factors ( numi , numj ) end function get_wfpair_val_num end module dftd4_data_wfpair","tags":"","url":"sourcefile/wfpair.f90.html"},{"title":"compat.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> This is a compatibility module for dftd4 2.5.0 reproducing enough of the old !> API to compile the interface with Vasp. module dftd4_compat use mctc_env , only : wp use mctc_io_math , only : matdet_3x3 , matinv_3x3 use dftd4 , only : structure_type , new , d4_model , new_d4_model , rational_damping_param , & & damping_param , get_rational_damping , get_dispersion , realspace_cutoff implicit none private public :: dftd_options , dftd_parameter , dftd_results , molecule , mctc_logger , ws_cell public :: dlat_to_cell , dlat_to_dvol , dlat_to_rlat , d4par , d4_calculation type :: dftd_options integer :: lmbd = 3 integer :: refq = 5 real ( wp ) :: wf = 6.0_wp real ( wp ) :: g_a real ( wp ) :: g_c logical :: lmolpol logical :: lenergy logical :: lgradient logical :: lhessian integer :: print_level end type type :: dftd_parameter real ( wp ) :: s6 real ( wp ) :: s8 real ( wp ) :: s9 = 1.0_wp real ( wp ) :: a1 real ( wp ) :: a2 real ( wp ) :: alp = 1 6.0_wp end type type :: dftd_results real ( wp ), allocatable :: energy real ( wp ), allocatable :: gradient (:, :) real ( wp ), allocatable :: lattice_gradient (:, :) end type type :: ws_cell end type type :: molecule integer , allocatable :: at (:) real ( wp ), allocatable :: xyz (:, :) real ( wp ), allocatable :: lattice (:, :) real ( wp ), allocatable :: chrg integer , allocatable :: npbc logical , allocatable :: pbc real ( wp ), allocatable :: volume real ( wp ), allocatable :: cellpar (:) real ( wp ), allocatable :: rec_lat (:, :) type ( ws_cell ) :: wsc contains procedure :: allocate procedure :: wrap_back procedure :: calculate_distances end type type :: mctc_logger logical :: sane = . true . end type contains subroutine allocate ( self , n , l ) class ( molecule ), intent ( inout ) :: self integer , intent ( in ) :: n logical , intent ( in ) :: l end subroutine allocate subroutine wrap_back ( self ) class ( molecule ), intent ( inout ) :: self end subroutine wrap_back subroutine calculate_distances ( self ) class ( molecule ), intent ( inout ) :: self end subroutine calculate_distances subroutine d4_calculation ( io , env , options , mol_ , param_ , res ) integer , intent ( in ) :: io type ( mctc_logger ), intent ( inout ) :: env type ( dftd_options ), intent ( in ) :: options type ( molecule ), intent ( in ) :: mol_ type ( dftd_parameter ), intent ( in ) :: param_ type ( dftd_results ), intent ( out ) :: res type ( structure_type ) :: mol type ( d4_model ) :: d4 type ( rational_damping_param ) :: param real ( wp ), allocatable :: energy , gradient (:, :), sigma (:, :) call new ( mol , mol_ % at , mol_ % xyz , lattice = mol_ % lattice ) call new_d4_model ( d4 , mol , ga = options % g_a , gc = options % g_c , wf = options % wf ) param = rational_damping_param (& & s6 = param_ % s6 , & & s8 = param_ % s8 , & & s9 = param_ % s9 , & & a1 = param_ % a1 , & & a2 = param_ % a2 , & & alp = param_ % alp ) allocate ( energy , gradient ( 3 , mol % nat ), sigma ( 3 , 3 )) call get_dispersion ( mol , d4 , param , realspace_cutoff (), energy , gradient , sigma ) call move_alloc ( energy , res % energy ) call move_alloc ( gradient , res % gradient ) res % lattice_gradient = matmul ( sigma , transpose ( matinv_3x3 ( mol % lattice ))) end subroutine d4_calculation subroutine d4par ( fname , param_ , lmbd , env ) character ( len =* ), intent ( in ) :: fname type ( dftd_parameter ), intent ( out ) :: param_ integer , intent ( in ) :: lmbd type ( mctc_logger ) :: env class ( damping_param ), allocatable :: param call get_rational_damping ( fname , param , merge ( 1.0_wp , 0.0_wp , lmbd == 3 )) if ( allocated ( param )) then select type ( param ) type is ( rational_damping_param ) env % sane = . true . param_ % s6 = param % s6 param_ % s8 = param % s8 param_ % s9 = param % s9 param_ % a1 = param % a1 param_ % a2 = param % a2 param_ % alp = param % alp class default env % sane = . false . end select else env % sane = . false . end if end subroutine d4par subroutine dlat_to_cell ( lattice , cellpar ) real ( wp ), intent ( in ) :: lattice ( 3 , 3 ) real ( wp ), intent ( out ), optional :: cellpar ( 6 ) end subroutine dlat_to_cell subroutine dlat_to_rlat ( lattice , reclatt ) real ( wp ), intent ( in ) :: lattice ( 3 , 3 ) real ( wp ), intent ( out ), optional :: reclatt ( 3 , 3 ) end subroutine dlat_to_rlat function dlat_to_dvol ( lattice ) result ( vol ) real ( wp ), intent ( in ) :: lattice ( 3 , 3 ) real ( wp ) :: vol vol = matdet_3x3 ( lattice ) end function dlat_to_dvol end module dftd4_compat subroutine generate_wsc ( mol , wsc ) use dftd4_compat , only : molecule , ws_cell type ( molecule ), intent ( inout ) :: mol type ( ws_cell ), intent ( inout ) :: wsc end subroutine generate_wsc module class_set use dftd4_compat , only : dftd_options end module class_set module class_param use dftd4_compat , only : dftd_parameter end module class_param module class_molecule use dftd4_compat , only : molecule end module class_molecule module class_results use dftd4_compat , only : dftd_results end module class_results module class_wsc use dftd4_compat , only : ws_cell end module class_wsc module mctc_environment use dftd4_compat , only : mctc_logger end module mctc_environment module dispersion_calculator use dftd4_compat , only : d4_calculation end module dispersion_calculator module pbc_tools use dftd4_compat , only : dlat_to_cell , dlat_to_dvol , dlat_to_rlat end module pbc_tools module dfuncpar use dftd4_compat , only : d4par end module dfuncpar","tags":"","url":"sourcefile/compat.f90.html"},{"title":"output.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_output use mctc_env , only : wp use mctc_io , only : structure_type use mctc_io_convert , only : autoaa , autokcal , autoev use mctc_io_math , only : matinv_3x3 use dftd4_damping , only : damping_param use dftd4_damping_rational , only : rational_damping_param use dftd4_model , only : dispersion_model use dftd4_version , only : get_dftd4_version implicit none private public :: ascii_atomic_radii , ascii_atomic_references , ascii_system_properties public :: ascii_results , ascii_damping_param , ascii_pairwise public :: turbomole_gradient , turbomole_gradlatt public :: json_results , tagged_result contains subroutine ascii_atomic_radii ( unit , mol , disp ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_atomic_radii !> Unit for output integer , intent ( in ) :: unit !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp integer :: isp write ( unit , '(a,\":\")' ) \"Atomic data, radii in Ångström\" write ( unit , '(54(\"-\"))' ) write ( unit , '(a4,5x,*(1x,a10))' ) & \"Z\" , \"R(cov)\" , \"r4/r2\" , \"hardness\" , \"EN\" write ( unit , '(54(\"-\"))' ) do isp = 1 , mol % nid write ( unit , '(i4, 1x, a4, *(1x,f10.4))' ) & & mol % num ( isp ), mol % sym ( isp ), & & disp % rcov ( isp ) * autoaa , & & disp % r4r2 ( isp ) * autoaa , & & disp % eta ( isp ), & & disp % en ( isp ) end do write ( unit , '(54(\"-\"))' ) write ( unit , '(a)' ) end subroutine ascii_atomic_radii subroutine ascii_atomic_references ( unit , mol , disp ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_atomic_references !> Unit for output integer , intent ( in ) :: unit !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp integer :: isp , iref , mref mref = maxval ( disp % ref ) write ( unit , '(a,\":\")' ) \"Atomic reference systems (in atomic units)\" write ( unit , '(70(\"-\"))' ) write ( unit , '(a4, 5x)' , advance = 'no' ) \"Z\" do iref = 1 , 2 write ( unit , '(a4, 2(1x, a7), 1x, a9)' , advance = 'no' ) & \"#\" , \"CN\" , \"q+Z\" , \"C6(AA)\" end do write ( unit , '(a)' ) write ( unit , '(70(\"-\"))' ) do isp = 1 , mol % nid write ( unit , '(i4, 1x, a4)' , advance = 'no' ) & & mol % num ( isp ), mol % sym ( isp ) do iref = 1 , disp % ref ( isp ) write ( unit , '(i4, 2(1x, f7.4), 1x, f9.4)' , advance = 'no' ) & iref , disp % cn ( iref , isp ), disp % q ( iref , isp ) + disp % zeff ( isp ), & disp % c6 ( iref , iref , isp , isp ) if ( iref == 2 . and . disp % ref ( isp ) > 2 ) then write ( unit , '(/,9x)' , advance = 'no' ) end if if ( iref == 4 . and . disp % ref ( isp ) > 4 ) then write ( unit , '(/,9x)' , advance = 'no' ) end if if ( iref == 6 . and . disp % ref ( isp ) > 6 ) then write ( unit , '(/,9x)' , advance = 'no' ) end if end do write ( unit , '(a)' ) end do write ( unit , '(70(\"-\"))' ) write ( unit , '(a)' ) end subroutine ascii_atomic_references subroutine ascii_system_properties ( unit , mol , disp , cn , q , c6 , alpha ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_system_properties !> Unit for output integer , intent ( in ) :: unit !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp !> Coordination numbers real ( wp ), intent ( in ) :: cn (:) !> Atomic partial charges real ( wp ), intent ( in ) :: q (:) !> Atomic dispersion coefficients real ( wp ), intent ( in ) :: c6 (:, :) !> Atomic static polarizabilities real ( wp ), intent ( in ) :: alpha (:) integer :: iat , isp , jat real ( wp ) :: sum_c8 sum_c8 = 0.0_wp write ( unit , '(a,\":\")' ) \"Atomic properties (in atomic units)\" write ( unit , '(71(\"-\"))' ) write ( unit , '(a6,1x,a4,5x,*(1x,a10))' ) \"#\" , \"Z\" , \"CN\" , \"q\" , \"C6(AA)\" , & & \"C8(AA)\" , \"alpha(0)\" write ( unit , '(71(\"-\"))' ) do iat = 1 , mol % nat isp = mol % id ( iat ) write ( unit , '(i6,1x,i4,1x,a4,*(1x,f10.4))' ) & & iat , mol % num ( isp ), mol % sym ( isp ), cn ( iat ), q ( iat ), c6 ( iat , iat ), & & c6 ( iat , iat ) * 3 * disp % r4r2 ( isp ) ** 2 , alpha ( iat ) do jat = 1 , mol % nat sum_c8 = sum_c8 + 3 * c6 ( jat , iat ) * disp % r4r2 ( mol % id ( jat )) * disp % r4r2 ( isp ) end do end do write ( unit , '(71(\"-\"))' ) write ( unit , '(a)' ) write ( unit , '(a,\":\")' ) \"Molecular properties (in atomic units)\" write ( unit , '(40(\"-\"))' ) write ( unit , '(1x, a, t20, f19.4)' ) & \"molecular C6\" , sum ( c6 ), & \"molecular C8\" , sum_c8 write ( unit , '(40(\"-\"))' ) write ( unit , '(a)' ) end subroutine ascii_system_properties subroutine ascii_results ( unit , mol , energy , gradient , sigma ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_results !> Unit for output integer , intent ( in ) :: unit !> Molecular structure data class ( structure_type ), intent ( in ) :: mol real ( wp ), intent ( in ) :: energy real ( wp ), intent ( in ), optional :: gradient (:, :) real ( wp ), intent ( in ), optional :: sigma (:, :) integer :: iat , isp logical :: grad character ( len = 1 ), parameter :: comp ( 3 ) = [ \"x\" , \"y\" , \"z\" ] grad = present ( gradient ) . and . present ( sigma ) write ( unit , '(a,\":\", t25, es20.13, 1x, a)' ) & & \"Dispersion energy\" , energy , \"Eh\" write ( unit , '(a)' ) if ( grad ) then write ( unit , '(a,\":\", t25, es20.13, 1x, a)' ) & & \"Gradient norm\" , norm2 ( gradient ), \"Eh/a0\" write ( unit , '(50(\"-\"))' ) write ( unit , '(a6,1x,a4,5x,*(1x,a10))' ) \"#\" , \"Z\" , \"dE/dx\" , \"dE/dy\" , \"dE/dz\" write ( unit , '(50(\"-\"))' ) do iat = 1 , mol % nat isp = mol % id ( iat ) write ( unit , '(i6,1x,i4,1x,a4,*(es11.3))' ) & & iat , mol % num ( isp ), mol % sym ( isp ), gradient (:, iat ) end do write ( unit , '(50(\"-\"))' ) write ( unit , '(a)' ) write ( unit , '(a,\":\")' ) & & \"Virial\" write ( unit , '(50(\"-\"))' ) write ( unit , '(a15,1x,*(1x,a10))' ) \"component\" , \"x\" , \"y\" , \"z\" write ( unit , '(50(\"-\"))' ) do iat = 1 , 3 write ( unit , '(2x,4x,1x,a4,1x,4x,*(es11.3))' ) & & comp ( iat ), sigma (:, iat ) end do write ( unit , '(50(\"-\"))' ) write ( unit , '(a)' ) end if end subroutine ascii_results subroutine ascii_pairwise ( unit , mol , pair_disp2 , pair_disp3 ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_pairwise !> Unit for output integer , intent ( in ) :: unit !> Molecular structure data class ( structure_type ), intent ( in ) :: mol real ( wp ), intent ( in ) :: pair_disp2 (:, :) real ( wp ), intent ( in ) :: pair_disp3 (:, :) integer :: iat , jat , isp , jsp real ( wp ) :: disp , e2 , e3 e2 = 0.0_wp e3 = 0.0_wp write ( unit , '(a,\":\")' ) \"Pairwise representation of dispersion (in kcal/mol)\" write ( unit , '(82(\"-\"))' ) write ( unit , '(2(a6,1x,a4,5x),*(1x,a10:,1x,a7))' ) & \"#\" , \"Z\" , \"#\" , \"Z\" , \"additive\" , \"(rel.)\" , \"non-add.\" , \"(rel.)\" , \"total\" write ( unit , '(82(\"-\"))' ) do iat = 1 , mol % nat isp = mol % id ( iat ) do jat = 1 , mol % nat jsp = mol % id ( jat ) e2 = e2 + pair_disp2 ( jat , iat ) e3 = e3 + pair_disp3 ( jat , iat ) disp = pair_disp2 ( jat , iat ) + pair_disp3 ( jat , iat ) if ( abs ( disp ) < epsilon ( disp )) cycle write ( unit , '(2(i6,1x,i4,1x,a4),*(1x,es10.2:,1x,\"(\",i4,\"%)\"))' ) & & iat , mol % num ( isp ), mol % sym ( isp ), & & jat , mol % num ( jsp ), mol % sym ( jsp ), & & pair_disp2 ( jat , iat ) * autokcal , nint ( pair_disp2 ( jat , iat ) / disp * 100 ), & & pair_disp3 ( jat , iat ) * autokcal , nint ( pair_disp3 ( jat , iat ) / disp * 100 ), & & disp * autokcal end do end do write ( unit , '(82(\"-\"))' ) disp = e2 + e3 write ( unit , '(1x, a, t33,*(1x,es10.2:,1x,\"(\",i4,\"%)\"))' ) & & \"total dispersion energy\" , & & e2 * autokcal , nint ( e2 / disp * 100 ), & & e3 * autokcal , nint ( e3 / disp * 100 ), & & disp * autokcal write ( unit , '(82(\"-\"))' ) write ( unit , '(a)' ) end subroutine ascii_pairwise subroutine ascii_damping_param ( unit , param , method ) !DEC$ ATTRIBUTES DLLEXPORT :: ascii_damping_param !> Unit for output integer , intent ( in ) :: unit !> Damping parameters class ( damping_param ), intent ( in ) :: param !> Method name character ( len =* ), intent ( in ), optional :: method select type ( param ) type is ( rational_damping_param ) write ( unit , '(a, \":\", 1x)' , advance = \"no\" ) \"Rational (Becke-Johnson) damping\" if ( present ( method )) then write ( unit , '(a, \"-\")' , advance = \"no\" ) method end if if ( abs ( param % s9 ) > 0 ) then write ( unit , '(a)' ) \"D4-ATM\" else write ( unit , '(a)' ) \"D4\" end if write ( unit , '(21(\"-\"))' ) write ( unit , '(a4, t10, f10.4)' ) & & \"s6\" , param % s6 , & & \"s8\" , param % s8 , & & \"s9\" , param % s9 , & & \"a1\" , param % a1 , & & \"a2\" , param % a2 , & & \"alp\" , param % alp write ( unit , '(20(\"-\"))' ) write ( unit , '(a)' ) end select end subroutine ascii_damping_param subroutine turbomole_gradlatt ( mol , fname , energy , sigma , stat ) !DEC$ ATTRIBUTES DLLEXPORT :: turbomole_gradlatt type ( structure_type ), intent ( in ) :: mol character ( len =* ), intent ( in ) :: fname real ( wp ), intent ( in ) :: energy real ( wp ), intent ( in ) :: sigma ( 3 , 3 ) integer , intent ( out ) :: stat character ( len = :), allocatable :: line integer :: i , j , icycle , line_number integer :: err integer :: igrad ! file handle logical :: exist real ( wp ) :: escf real ( wp ) :: glat ( 3 , 3 ), inv_lat ( 3 , 3 ), gradlatt ( 3 , 3 ) real ( wp ) :: dlat ( 3 , 3 ) stat = 0 inv_lat = matinv_3x3 ( mol % lattice ) do i = 1 , 3 do j = 1 , 3 gradlatt ( i , j ) = sigma ( i , 1 ) * inv_lat ( j , 1 ) & & + sigma ( i , 2 ) * inv_lat ( j , 2 ) & & + sigma ( i , 3 ) * inv_lat ( j , 3 ) enddo enddo icycle = 1 i = 0 escf = 0.0_wp inquire ( file = fname , exist = exist ) if ( exist ) then open ( newunit = igrad , file = fname ) read_file : do call getline ( igrad , line , iostat = err ) if ( err . ne . 0 ) exit read_file i = i + 1 if ( index ( line , 'cycle' ) > 0 ) line_number = i enddo read_file if ( line_number < 2 ) then stat = 1 return endif rewind ( igrad ) skip_lines : do i = 1 , line_number - 1 read ( igrad , '(a)' ) enddo skip_lines call getline ( igrad , line ) read ( line ( 10 : 17 ), * , iostat = err ) icycle read ( line ( 33 : 51 ), * , iostat = err ) escf do i = 1 , 3 call getline ( igrad , line ) read ( line , * , iostat = err ) dlat ( 1 , i ), dlat ( 2 , i ), dlat ( 3 , i ) enddo if ( any ( abs ( dlat - mol % lattice ) > 1.0e-8_wp )) then stat = 1 return endif do i = 1 , 3 call getline ( igrad , line ) read ( line , * , iostat = err ) glat ( 1 , i ), glat ( 2 , i ), glat ( 3 , i ) enddo do i = 1 , 3 backspace ( igrad ) backspace ( igrad ) enddo backspace ( igrad ) else open ( newunit = igrad , file = fname ) write ( igrad , '(\"$gradlatt\")' ) endif write ( igrad , '(2x,\"cycle =\",1x,i6,4x,\"SCF energy =\",f18.11,3x,' // & '\"|dE/dlatt| =\",f10.6)' ) & icycle , energy + escf , norm2 ( gradlatt + glat ) do i = 1 , 3 write ( igrad , '(3(F20.14,2x))' ) mol % lattice ( 1 , i ), mol % lattice ( 2 , i ), mol % lattice ( 3 , i ) enddo do i = 1 , 3 write ( igrad , '(3D22.13)' ) gradlatt ( 1 , i ) + glat ( 1 , i ), gradlatt ( 2 , i ) + glat ( 2 , i ), gradlatt ( 3 , i ) + glat ( 3 , i ) enddo write ( igrad , '(\"$end\")' ) close ( igrad ) end subroutine turbomole_gradlatt subroutine turbomole_gradient ( mol , fname , energy , gradient , stat ) !DEC$ ATTRIBUTES DLLEXPORT :: turbomole_gradient type ( structure_type ), intent ( in ) :: mol character ( len =* ), intent ( in ) :: fname real ( wp ), intent ( in ) :: energy real ( wp ), intent ( in ) :: gradient (:, :) integer , intent ( out ) :: stat character ( len = :), allocatable :: line integer :: i , icycle , line_number integer :: err integer :: igrad ! file handle logical :: exist real ( wp ) :: escf real ( wp ), allocatable :: gscf (:,:) real ( wp ), allocatable :: xyz (:,:) allocate ( gscf ( 3 , mol % nat ), source = 0.0_wp ) stat = 0 icycle = 1 i = 0 escf = 0.0_wp inquire ( file = fname , exist = exist ) if ( exist ) then open ( newunit = igrad , file = fname ) read_file : do call getline ( igrad , line , iostat = err ) if ( err . ne . 0 ) exit read_file i = i + 1 if ( index ( line , 'cycle' ) > 0 ) line_number = i enddo read_file if ( line_number < 2 ) then stat = 1 return endif rewind ( igrad ) skip_lines : do i = 1 , line_number - 1 read ( igrad , '(a)' ) enddo skip_lines call getline ( igrad , line ) read ( line ( 10 : 17 ), * , iostat = err ) icycle read ( line ( 33 : 51 ), * , iostat = err ) escf allocate ( xyz ( 3 , mol % nat )) do i = 1 , mol % nat call getline ( igrad , line ) read ( line , * , iostat = err ) xyz ( 1 , i ), xyz ( 2 , i ), xyz ( 3 , i ) enddo if ( any ( abs ( xyz - mol % xyz ) > 1.0e-8_wp )) then stat = 1 return endif do i = 1 , mol % nat call getline ( igrad , line ) read ( line , * , iostat = err ) gscf ( 1 , i ), gscf ( 2 , i ), gscf ( 3 , i ) enddo do i = 1 , mol % nat backspace ( igrad ) backspace ( igrad ) enddo backspace ( igrad ) else open ( newunit = igrad , file = fname ) write ( igrad , '(\"$grad\")' ) endif write ( igrad , '(2x,\"cycle =\",1x,i6,4x,\"SCF energy =\",f18.11,3x,' // & '\"|dE/dxyz| =\",f10.6)' ) & icycle , energy + escf , norm2 ( gradient + gscf ) do i = 1 , mol % nat write ( igrad , '(3(F20.14,2x),4x,a2)' ) mol % xyz ( 1 , i ), mol % xyz ( 2 , i ), mol % xyz ( 3 , i ), mol % sym ( i ) enddo do i = 1 , mol % nat write ( igrad , '(3D22.13)' ) gradient ( 1 , i ) + gscf ( 1 , i ), gradient ( 2 , i ) + gscf ( 2 , i ), gradient ( 3 , i ) + gscf ( 3 , i ) enddo write ( igrad , '(\"$end\")' ) close ( igrad ) end subroutine turbomole_gradient !> reads a line from unit into an allocatable character subroutine getline ( unit , line , iostat ) integer , intent ( in ) :: unit character ( len = :), allocatable , intent ( out ) :: line integer , intent ( out ), optional :: iostat integer , parameter :: buffersize = 256 character ( len = buffersize ) :: buffer integer :: size integer :: stat line = '' do read ( unit , '(a)' , advance = 'no' , iostat = stat , size = size ) & & buffer if ( stat . gt . 0 ) then if ( present ( iostat )) iostat = stat return ! an error occurred endif line = line // buffer (: size ) if ( stat . lt . 0 ) then if ( is_iostat_eor ( stat )) stat = 0 if ( present ( iostat )) iostat = stat return endif enddo end subroutine getline subroutine json_results ( unit , indentation , energy , gradient , sigma , hessian , & & cn , q , c6 , alpha , pairwise_energy2 , pairwise_energy3 ) !DEC$ ATTRIBUTES DLLEXPORT :: json_results integer , intent ( in ) :: unit character ( len =* ), intent ( in ), optional :: indentation real ( wp ), intent ( in ), optional :: energy real ( wp ), intent ( in ), optional :: gradient (:, :) real ( wp ), intent ( in ), optional :: sigma (:, :) real ( wp ), intent ( in ), optional :: hessian (:, :, :, :) real ( wp ), intent ( in ), optional :: cn (:) real ( wp ), intent ( in ), optional :: q (:) real ( wp ), intent ( in ), optional :: c6 (:, :) real ( wp ), intent ( in ), optional :: alpha (:) real ( wp ), intent ( in ), optional :: pairwise_energy2 (:, :) real ( wp ), intent ( in ), optional :: pairwise_energy3 (:, :) character ( len = :), allocatable :: indent , version_string character ( len =* ), parameter :: jsonkey = \"('\"\"',a,'\"\":',1x)\" real ( wp ), allocatable :: array (:) call get_dftd4_version ( string = version_string ) if ( present ( indentation )) then indent = indentation end if write ( unit , '(\"{\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'version' write ( unit , '(1x,a)' , advance = 'no' ) '\"' // version_string // '\"' if ( present ( energy )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'energy' write ( unit , '(1x,es25.16)' , advance = 'no' ) energy end if if ( present ( sigma )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'virial' array = reshape ( sigma , [ size ( sigma )]) call write_json_array ( unit , array , indent ) end if if ( present ( gradient )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'gradient' array = reshape ( gradient , [ size ( gradient )]) call write_json_array ( unit , array , indent ) end if if ( present ( hessian )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'hessian' array = reshape ( hessian , [ size ( hessian )]) call write_json_array ( unit , array , indent ) end if if ( present ( cn )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'coordination numbers' call write_json_array ( unit , cn , indent ) end if if ( present ( q )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'partial charges' call write_json_array ( unit , q , indent ) end if if ( present ( c6 )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'c6 coefficients' array = reshape ( c6 , [ size ( c6 )]) call write_json_array ( unit , array , indent ) end if if ( present ( alpha )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'polarizabilities' call write_json_array ( unit , alpha , indent ) end if if ( present ( pairwise_energy2 )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'additive pairwise energy' array = reshape ( pairwise_energy2 , [ size ( pairwise_energy2 )]) call write_json_array ( unit , array , indent ) end if if ( present ( pairwise_energy3 )) then write ( unit , '(\",\")' , advance = 'no' ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , jsonkey , advance = 'no' ) 'non-additive pairwise energy' array = reshape ( pairwise_energy3 , [ size ( pairwise_energy3 )]) call write_json_array ( unit , array , indent ) end if if ( allocated ( indent )) write ( unit , '(/)' , advance = 'no' ) write ( unit , '(\"}\")' ) end subroutine json_results subroutine write_json_array ( unit , array , indent ) integer , intent ( in ) :: unit real ( wp ), intent ( in ) :: array (:) character ( len = :), allocatable , intent ( in ) :: indent integer :: i write ( unit , '(\"[\")' , advance = 'no' ) do i = 1 , size ( array ) if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 2 ) write ( unit , '(es23.16)' , advance = 'no' ) array ( i ) if ( i /= size ( array )) write ( unit , '(\",\")' , advance = 'no' ) end do if ( allocated ( indent )) write ( unit , '(/,a)' , advance = 'no' ) repeat ( indent , 1 ) write ( unit , '(\"]\")' , advance = 'no' ) end subroutine write_json_array subroutine tagged_result ( unit , energy , gradient , sigma , hessian ) !DEC$ ATTRIBUTES DLLEXPORT :: tagged_result integer , intent ( in ) :: unit real ( wp ), intent ( in ), optional :: energy real ( wp ), intent ( in ), optional :: gradient (:, :) real ( wp ), intent ( in ), optional :: sigma (:, :) real ( wp ), intent ( in ), optional :: hessian (:, :, :, :) character ( len =* ), parameter :: tag_header = & & '(a,t20,\":\",a,\":\",i0,\":\",*(i0:,\",\"))' if ( present ( energy )) then write ( unit , tag_header ) \"energy\" , \"real\" , 0 write ( unit , '(3es24.16)' ) energy end if if ( present ( gradient )) then write ( unit , tag_header ) \"gradient\" , \"real\" , 2 , shape ( gradient ) write ( unit , '(3es24.16)' ) gradient end if if ( present ( sigma )) then write ( unit , tag_header ) \"virial\" , \"real\" , 2 , shape ( sigma ) write ( unit , '(3es24.16)' ) sigma end if if ( present ( hessian )) then write ( unit , tag_header ) \"hessian\" , \"real\" , 4 , shape ( hessian ) write ( unit , '(3es24.16)' ) hessian end if end subroutine tagged_result end module dftd4_output","tags":"","url":"sourcefile/output.f90.html"},{"title":"cutoff.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Realspace cutoff and lattice point generator utilities module dftd4_cutoff use mctc_env , only : wp implicit none private public :: realspace_cutoff , get_lattice_points !> Coordination number cutoff real ( wp ), parameter :: cn_default = 3 0.0_wp !> Two-body interaction cutoff real ( wp ), parameter :: disp2_default = 6 0.0_wp !> Three-body interaction cutoff real ( wp ), parameter :: disp3_default = 4 0.0_wp !> Collection of real space cutoffs type :: realspace_cutoff sequence !> Coordination number cutoff real ( wp ) :: cn = cn_default !> Two-body interaction cutoff real ( wp ) :: disp2 = disp2_default !> Three-body interaction cutoff real ( wp ) :: disp3 = disp3_default end type realspace_cutoff interface get_lattice_points module procedure :: get_lattice_points_cutoff module procedure :: get_lattice_points_rep_3d end interface get_lattice_points contains !> Generate lattice points from repeatitions subroutine get_lattice_points_rep_3d ( lat , rep , origin , trans ) !> Lattice vectors real ( wp ), intent ( in ) :: lat (:, :) !> Repeatitions of lattice points to generate integer , intent ( in ) :: rep (:) !> Include the origin in the generated lattice points logical , intent ( in ) :: origin !> Generated lattice points real ( wp ), allocatable , intent ( out ) :: trans (:, :) integer :: itr , ix , iy , iz , jx , jy , jz itr = 0 if ( origin ) then allocate ( trans ( 3 , product ( 2 * rep + 1 ))) do ix = 0 , rep ( 1 ) do iy = 0 , rep ( 2 ) do iz = 0 , rep ( 3 ) do jx = 1 , merge ( - 1 , 1 , ix > 0 ), - 2 do jy = 1 , merge ( - 1 , 1 , iy > 0 ), - 2 do jz = 1 , merge ( - 1 , 1 , iz > 0 ), - 2 itr = itr + 1 trans (:, itr ) = lat (:, 1 ) * ix * jx & & + lat (:, 2 ) * iy * jy + lat (:, 3 ) * iz * jz end do end do end do end do end do end do else allocate ( trans ( 3 , product ( 2 * rep + 1 ) - 1 )) do ix = 0 , rep ( 1 ) do iy = 0 , rep ( 2 ) do iz = 0 , rep ( 3 ) if ( ix == 0 . and . iy == 0 . and . iz == 0 ) cycle do jx = 1 , merge ( - 1 , 1 , ix > 0 ), - 2 do jy = 1 , merge ( - 1 , 1 , iy > 0 ), - 2 do jz = 1 , merge ( - 1 , 1 , iz > 0 ), - 2 itr = itr + 1 trans (:, itr ) = lat (:, 1 ) * ix * jx & & + lat (:, 2 ) * iy * jy + lat (:, 3 ) * iz * jz end do end do end do end do end do end do end if end subroutine get_lattice_points_rep_3d !> Create lattice points within a given cutoff subroutine get_lattice_points_cutoff ( periodic , lat , rthr , trans ) !DEC$ ATTRIBUTES DLLEXPORT :: get_lattice_points_cutoff !> Periodic dimensions logical , intent ( in ) :: periodic (:) !> Real space cutoff real ( wp ), intent ( in ) :: rthr !> Lattice parameters real ( wp ), intent ( in ) :: lat (:, :) !> Generated lattice points real ( wp ), allocatable , intent ( out ) :: trans (:, :) integer :: rep ( 3 ) if (. not . any ( periodic )) then allocate ( trans ( 3 , 1 )) trans (:, :) = 0.0_wp else call get_translations ( lat , rthr , rep ) call get_lattice_points ( lat , rep , . true ., trans ) end if end subroutine get_lattice_points_cutoff !> Generate a supercell based on a realspace cutoff, this subroutine !> doesn't know anything about the convergence behaviour of the !> associated property. pure subroutine get_translations ( lat , rthr , rep ) real ( wp ), intent ( in ) :: rthr real ( wp ), intent ( in ) :: lat ( 3 , 3 ) integer , intent ( out ) :: rep ( 3 ) real ( wp ) :: normx ( 3 ), normy ( 3 ), normz ( 3 ) real ( wp ) :: cos10 , cos21 , cos32 ! find normal to the plane... call crossproduct ( lat (:, 2 ), lat (:, 3 ), normx ) call crossproduct ( lat (:, 3 ), lat (:, 1 ), normy ) call crossproduct ( lat (:, 1 ), lat (:, 2 ), normz ) ! ...normalize it... normx = normx / norm2 ( normx ) normy = normy / norm2 ( normy ) normz = normz / norm2 ( normz ) ! cos angles between normals and lattice vectors cos10 = sum ( normx * lat (:, 1 )) cos21 = sum ( normy * lat (:, 2 )) cos32 = sum ( normz * lat (:, 3 )) rep ( 1 ) = ceiling ( abs ( rthr / cos10 )) rep ( 2 ) = ceiling ( abs ( rthr / cos21 )) rep ( 3 ) = ceiling ( abs ( rthr / cos32 )) contains pure subroutine crossproduct ( a , b , c ) real ( wp ), intent ( in ) :: a ( 3 ) real ( wp ), intent ( in ) :: b ( 3 ) real ( wp ), intent ( out ) :: c ( 3 ) c ( 1 ) = a ( 2 ) * b ( 3 ) - b ( 2 ) * a ( 3 ) c ( 2 ) = a ( 3 ) * b ( 1 ) - b ( 3 ) * a ( 1 ) c ( 3 ) = a ( 1 ) * b ( 2 ) - b ( 1 ) * a ( 2 ) end subroutine crossproduct end subroutine get_translations end module dftd4_cutoff","tags":"","url":"sourcefile/cutoff.f90.html"},{"title":"covrad.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_data_covrad use mctc_env , only : wp use mctc_io_convert , only : aatoau use mctc_io_symbols , only : to_number implicit none private public :: get_covalent_rad !> Covalent radii for DFT-D3 coordination number interface get_covalent_rad module procedure :: get_covalent_rad_num module procedure :: get_covalent_rad_sym end interface get_covalent_rad integer , parameter :: max_elem = 118 !> Covalent radii (taken from Pyykko and Atsumi, Chem. Eur. J. 15, 2009, !  188-197), values for metals decreased by 10 % real ( wp ), parameter :: covalent_rad_2009 ( max_elem ) = aatoau * [ & & 0.32_wp , 0.46_wp , & ! H,He & 1.20_wp , 0.94_wp , 0.77_wp , 0.75_wp , 0.71_wp , 0.63_wp , 0.64_wp , 0.67_wp , & ! Li-Ne & 1.40_wp , 1.25_wp , 1.13_wp , 1.04_wp , 1.10_wp , 1.02_wp , 0.99_wp , 0.96_wp , & ! Na-Ar & 1.76_wp , 1.54_wp , & ! K,Ca & 1.33_wp , 1.22_wp , 1.21_wp , 1.10_wp , 1.07_wp , & ! Sc- & 1.04_wp , 1.00_wp , 0.99_wp , 1.01_wp , 1.09_wp , & ! -Zn & 1.12_wp , 1.09_wp , 1.15_wp , 1.10_wp , 1.14_wp , 1.17_wp , & ! Ga-Kr & 1.89_wp , 1.67_wp , & ! Rb,Sr & 1.47_wp , 1.39_wp , 1.32_wp , 1.24_wp , 1.15_wp , & ! Y- & 1.13_wp , 1.13_wp , 1.08_wp , 1.15_wp , 1.23_wp , & ! -Cd & 1.28_wp , 1.26_wp , 1.26_wp , 1.23_wp , 1.32_wp , 1.31_wp , & ! In-Xe & 2.09_wp , 1.76_wp , & ! Cs,Ba & 1.62_wp , 1.47_wp , 1.58_wp , 1.57_wp , 1.56_wp , 1.55_wp , 1.51_wp , & ! La-Eu & 1.52_wp , 1.51_wp , 1.50_wp , 1.49_wp , 1.49_wp , 1.48_wp , 1.53_wp , & ! Gd-Yb & 1.46_wp , 1.37_wp , 1.31_wp , 1.23_wp , 1.18_wp , & ! Lu- & 1.16_wp , 1.11_wp , 1.12_wp , 1.13_wp , 1.32_wp , & ! -Hg & 1.30_wp , 1.30_wp , 1.36_wp , 1.31_wp , 1.38_wp , 1.42_wp , & ! Tl-Rn & 2.01_wp , 1.81_wp , & ! Fr,Ra & 1.67_wp , 1.58_wp , 1.52_wp , 1.53_wp , 1.54_wp , 1.55_wp , 1.49_wp , & ! Ac-Am & 1.49_wp , 1.51_wp , 1.51_wp , 1.48_wp , 1.50_wp , 1.56_wp , 1.58_wp , & ! Cm-No & 1.45_wp , 1.41_wp , 1.34_wp , 1.29_wp , 1.27_wp , & ! Lr- & 1.21_wp , 1.16_wp , 1.15_wp , 1.09_wp , 1.22_wp , & ! -Cn & 1.36_wp , 1.43_wp , 1.46_wp , 1.58_wp , 1.48_wp , 1.57_wp ] ! Nh-Og !> D3 covalent radii used to construct the coordination number real ( wp ), parameter :: covalent_rad_d3 ( max_elem ) = & & 4.0_wp / 3.0_wp * covalent_rad_2009 contains !> Get covalent radius for a given element symbol elemental function get_covalent_rad_sym ( sym ) result ( rad ) !DEC$ ATTRIBUTES DLLEXPORT :: get_covalent_rad_sym !> Element symbol character ( len =* ), intent ( in ) :: sym !> Covalent radius real ( wp ) :: rad rad = get_covalent_rad ( to_number ( sym )) end function get_covalent_rad_sym !> Get covalent radius for a given atomic number elemental function get_covalent_rad_num ( num ) result ( rad ) !DEC$ ATTRIBUTES DLLEXPORT :: get_covalent_rad_num !> Atomic number integer , intent ( in ) :: num !> Covalent radius real ( wp ) :: rad if ( num > 0 . and . num <= size ( covalent_rad_d3 )) then rad = covalent_rad_d3 ( num ) else rad = 0.0_wp end if end function get_covalent_rad_num end module dftd4_data_covrad","tags":"","url":"sourcefile/covrad.f90.html"},{"title":"numdiff.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Numerical differentation of DFT-D4 model module dftd4_numdiff use dftd4_cutoff , only : realspace_cutoff use dftd4_damping , only : damping_param use dftd4_disp , only : get_dispersion use dftd4_model , only : dispersion_model use mctc_env , only : wp use mctc_io , only : structure_type implicit none private public :: get_dispersion_hessian contains !> Evaluate hessian matrix by numerical differention subroutine get_dispersion_hessian ( mol , disp , param , cutoff , hessian ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dispersion_hessian !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Dispersion model class ( dispersion_model ), intent ( in ) :: disp !> Damping parameters class ( damping_param ), intent ( in ) :: param !> Realspace cutoffs type ( realspace_cutoff ), intent ( in ) :: cutoff !> Dispersion hessian real ( wp ), intent ( out ) :: hessian (:, :, :, :) integer :: iat , ix real ( wp ), parameter :: step = 1.0e-4_wp type ( structure_type ) :: displ real ( wp ) :: el , er real ( wp ), allocatable :: gl (:, :), gr (:, :), sl (:, :), sr (:, :) hessian (:, :, :, :) = 0.0_wp !$omp parallel default(none) & !$omp private(iat, ix, displ, er, el, gr, gl, sr, sl) & !$omp shared(mol, disp, param, cutoff, hessian) displ = mol allocate ( gl ( 3 , mol % nat ), gr ( 3 , mol % nat ), sl ( 3 , 3 ), sr ( 3 , 3 )) !$omp do schedule(dynamic) collapse(2) do iat = 1 , mol % nat do ix = 1 , 3 displ % xyz ( ix , iat ) = mol % xyz ( ix , iat ) + step call get_dispersion ( displ , disp , param , cutoff , el , gl , sl ) displ % xyz ( ix , iat ) = mol % xyz ( ix , iat ) - step call get_dispersion ( displ , disp , param , cutoff , er , gr , sr ) displ % xyz ( ix , iat ) = mol % xyz ( ix , iat ) hessian (:, :, ix , iat ) = ( gl - gr ) / ( 2 * step ) end do end do !$omp end parallel end subroutine get_dispersion_hessian end module dftd4_numdiff","tags":"","url":"sourcefile/numdiff.f90.html"},{"title":"dftd4.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4 use mctc_io , only : structure_type , new use dftd4_cutoff , only : realspace_cutoff , get_lattice_points use dftd4_disp , only : get_dispersion , get_properties , get_pairwise_dispersion use dftd4_ncoord , only : get_coordination_number use dftd4_numdiff , only : get_dispersion_hessian use dftd4_damping , only : damping_param use dftd4_damping_rational , only : rational_damping_param use dftd4_model , only : dispersion_model , new_dispersion_model use dftd4_model_d4 , only : d4_model , new_d4_model use dftd4_model_d4s , only : d4s_model , new_d4s_model use dftd4_param , only : get_rational_damping use dftd4_version , only : get_dftd4_version implicit none public end module dftd4","tags":"","url":"sourcefile/dftd4.f90.html"},{"title":"damping.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Generic interface to define damping functions for the DFT-D4 model module dftd4_damping use mctc_env , only : wp use mctc_io , only : structure_type implicit none public :: damping_param , dispersion_interface type , abstract :: damping_param contains procedure ( dispersion_interface ), deferred :: get_dispersion2 procedure ( dispersion_interface ), deferred :: get_dispersion3 procedure ( pairwise_dispersion_interface ), deferred :: get_pairwise_dispersion2 procedure ( pairwise_dispersion_interface ), deferred :: get_pairwise_dispersion3 end type damping_param abstract interface !> Evaluation of the dispersion energy expression subroutine dispersion_interface ( self , mol , trans , cutoff , r4r2 , & & c6 , dc6dcn , dc6dq , energy , dEdcn , dEdq , gradient , sigma ) import :: structure_type , damping_param , wp !> Damping parameters class ( damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( in ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charges real ( wp ), intent ( in ), optional :: dc6dq (:, :) !> Dispersion energy real ( wp ), intent ( inout ) :: energy (:) !> Derivative of the energy w.r.t. the coordination number real ( wp ), intent ( inout ), optional :: dEdcn (:) !> Derivative of the energy w.r.t. the partial charges real ( wp ), intent ( inout ), optional :: dEdq (:) !> Dispersion gradient real ( wp ), intent ( inout ), optional :: gradient (:, :) !> Dispersion virial real ( wp ), intent ( inout ), optional :: sigma (:, :) end subroutine dispersion_interface !> Evaluation of the pairwise representation of the dispersion energy subroutine pairwise_dispersion_interface ( self , mol , trans , cutoff , r4r2 , c6 , energy ) import :: structure_type , damping_param , wp !> Damping parameters class ( damping_param ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Lattice points real ( wp ), intent ( in ) :: trans (:, :) !> Real space cutoff real ( wp ), intent ( in ) :: cutoff !> Expectation values for r4 over r2 operator real ( wp ), intent ( in ) :: r4r2 (:) !> C6 coefficients for all atom pairs. real ( wp ), intent ( in ) :: c6 (:, :) !> Pairwise representation of the dispersion energy real ( wp ), intent ( inout ) :: energy (:, :) end subroutine pairwise_dispersion_interface end interface end module dftd4_damping","tags":"","url":"sourcefile/damping.f90.html"},{"title":"api.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Definition of the public C-API of dftd4 !> !>```c !>{!./include/dftd4.h!} !>``` module dftd4_api use iso_c_binding use mctc_env , only : wp , error_type , fatal_error use mctc_io_structure , only : structure_type , new use dftd4_cutoff , only : realspace_cutoff use dftd4_damping , only : damping_param use dftd4_damping_rational , only : rational_damping_param use dftd4_disp , only : get_dispersion , get_pairwise_dispersion , get_properties use dftd4_model , only : dispersion_model use dftd4_model_d4 , only : d4_model , new_d4_model use dftd4_model_d4s , only : d4s_model , new_d4s_model use dftd4_numdiff , only : get_dispersion_hessian use dftd4_param , only : get_rational_damping use dftd4_utils , only : wrap_to_central_cell use dftd4_version , only : get_dftd4_version implicit none private public :: get_version_api public :: vp_error public :: new_error_api , check_error_api , get_error_api , delete_error_api public :: vp_structure public :: new_structure_api , delete_structure_api , update_structure_api public :: vp_model public :: new_d4_model_api , custom_d4_model_api , delete_model_api public :: new_d4s_model_api , custom_d4s_model_api public :: vp_param public :: new_rational_damping_api , load_rational_damping_api public :: delete_param_api public :: get_dispersion_api , get_pairwise_dispersion_api , get_properties_api !> Namespace for C routines character ( len =* ), parameter :: namespace = \"dftd4_\" !> Void pointer to error handle type :: vp_error !> Actual payload type ( error_type ), allocatable :: ptr end type vp_error !> Void pointer to molecular structure data type :: vp_structure !> Actual payload type ( structure_type ) :: ptr end type vp_structure !> Void pointer to dispersion model type :: vp_model !> Actual payload class ( dispersion_model ), allocatable :: ptr end type vp_model !> Void pointer to damping parameters type :: vp_param !> Actual payload class ( damping_param ), allocatable :: ptr end type vp_param logical , parameter :: debug = . false . contains !> Obtain library version as major * 10000 + minor + 100 + patch function get_version_api () result ( version ) & & bind ( C , name = namespace // \"get_version\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_version_api integer ( c_int ) :: version integer :: major , minor , patch call get_dftd4_version ( major , minor , patch ) version = 10000_c_int * major + 100_c_int * minor + patch end function get_version_api !> Create new error handle object function new_error_api () & & result ( verror ) & & bind ( C , name = namespace // \"new_error\" ) !DEC$ ATTRIBUTES DLLEXPORT :: new_error_api type ( vp_error ), pointer :: error type ( c_ptr ) :: verror if ( debug ) print '(\"[Info]\",1x, a)' , \"new_error\" allocate ( error ) verror = c_loc ( error ) end function new_error_api !> Delete error handle object subroutine delete_error_api ( verror ) & & bind ( C , name = namespace // \"delete_error\" ) !DEC$ ATTRIBUTES DLLEXPORT :: delete_error_api type ( c_ptr ), intent ( inout ) :: verror type ( vp_error ), pointer :: error if ( debug ) print '(\"[Info]\",1x, a)' , \"delete_error\" if ( c_associated ( verror )) then call c_f_pointer ( verror , error ) deallocate ( error ) verror = c_null_ptr end if end subroutine delete_error_api !> Check error handle status function check_error_api ( verror ) result ( status ) & & bind ( C , name = namespace // \"check_error\" ) !DEC$ ATTRIBUTES DLLEXPORT :: check_error_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error integer ( c_int ) :: status if ( debug ) print '(\"[Info]\",1x, a)' , \"check_error\" if ( c_associated ( verror )) then call c_f_pointer ( verror , error ) if ( allocated ( error % ptr )) then status = 1 else status = 0 end if else status = 2 end if end function check_error_api !> Get error message from error handle subroutine get_error_api ( verror , charptr , buffersize ) & & bind ( C , name = namespace // \"get_error\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_error_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error character ( kind = c_char ), intent ( inout ) :: charptr ( * ) integer ( c_int ), intent ( in ), optional :: buffersize integer :: max_length if ( debug ) print '(\"[Info]\",1x, a)' , \"get_error\" if ( c_associated ( verror )) then call c_f_pointer ( verror , error ) if ( present ( buffersize )) then max_length = buffersize else max_length = huge ( max_length ) - 2 end if if ( allocated ( error % ptr )) then call f_c_character ( error % ptr % message , charptr , max_length ) end if end if end subroutine get_error_api !> Create new molecular structure data (quantities in Bohr) function new_structure_api ( verror , natoms , numbers , positions , c_charge , & & c_lattice , c_periodic ) result ( vmol ) & & bind ( C , name = namespace // \"new_structure\" ) !DEC$ ATTRIBUTES DLLEXPORT :: new_structure_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error integer ( c_int ), value , intent ( in ) :: natoms integer ( c_int ), intent ( in ) :: numbers ( natoms ) real ( c_double ), intent ( in ) :: positions ( 3 , natoms ) real ( c_double ), intent ( in ), optional :: c_charge real ( wp ), allocatable :: charge real ( c_double ), intent ( in ), optional :: c_lattice ( 3 , 3 ) real ( wp ), allocatable :: lattice (:, :) logical ( c_bool ), intent ( in ), optional :: c_periodic ( 3 ) logical , allocatable :: periodic (:) type ( vp_structure ), pointer :: mol type ( c_ptr ) :: vmol if ( debug ) print '(\"[Info]\",1x, a)' , \"new_structure\" vmol = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if ( present ( c_lattice )) then allocate ( lattice ( 3 , 3 )) lattice (:, :) = c_lattice end if if ( present ( c_periodic )) then allocate ( periodic ( 3 )) periodic (:) = c_periodic end if if ( present ( c_charge )) then charge = c_charge end if allocate ( mol ) call new ( mol % ptr , numbers , positions , lattice = lattice , periodic = periodic , & charge = charge ) vmol = c_loc ( mol ) call wrap_to_central_cell ( mol % ptr % xyz , mol % ptr % lattice , mol % ptr % periodic ) call verify_structure ( error % ptr , mol % ptr ) end function new_structure_api !> Delete molecular structure data subroutine delete_structure_api ( vmol ) & & bind ( C , name = namespace // \"delete_structure\" ) !DEC$ ATTRIBUTES DLLEXPORT :: delete_structure_api type ( c_ptr ), intent ( inout ) :: vmol type ( vp_structure ), pointer :: mol if ( debug ) print '(\"[Info]\",1x, a)' , \"delete_structure\" if ( c_associated ( vmol )) then call c_f_pointer ( vmol , mol ) deallocate ( mol ) vmol = c_null_ptr end if end subroutine delete_structure_api !> Update coordinates and lattice parameters (quantities in Bohr) subroutine update_structure_api ( verror , vmol , positions , lattice ) & & bind ( C , name = namespace // \"update_structure\" ) !DEC$ ATTRIBUTES DLLEXPORT :: update_structure_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol real ( c_double ), intent ( in ) :: positions ( 3 , * ) real ( c_double ), intent ( in ), optional :: lattice ( 3 , 3 ) if ( debug ) print '(\"[Info]\",1x, a)' , \"update_structure\" if (. not . c_associated ( verror )) then return end if call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) if ( mol % ptr % nat <= 0 . or . mol % ptr % nid <= 0 . or . . not . allocated ( mol % ptr % num ) & & . or . . not . allocated ( mol % ptr % id ) . or . . not . allocated ( mol % ptr % xyz )) then call fatal_error ( error % ptr , \"Invalid molecular structure data provided\" ) return end if mol % ptr % xyz (:, :) = positions (: 3 , : mol % ptr % nat ) if ( present ( lattice )) then mol % ptr % lattice (:, :) = lattice (: 3 , : 3 ) end if call wrap_to_central_cell ( mol % ptr % xyz , mol % ptr % lattice , mol % ptr % periodic ) call verify_structure ( error % ptr , mol % ptr ) end subroutine update_structure_api !> Create new D4 dispersion model function new_d4_model_api ( verror , vmol ) & & result ( vdisp ) & & bind ( C , name = namespace // \"new_d4_model\" ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ) :: vdisp type ( vp_model ), pointer :: disp type ( d4_model ), allocatable :: tmp if ( debug ) print '(\"[Info]\",1x, a)' , \"new_d4_model\" vdisp = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) allocate ( tmp ) call new_d4_model ( error % ptr , tmp , mol % ptr ) if ( allocated ( error % ptr )) then deallocate ( tmp ) else allocate ( disp ) call move_alloc ( tmp , disp % ptr ) vdisp = c_loc ( disp ) end if end function new_d4_model_api !> Create new D4S dispersion model function new_d4s_model_api ( verror , vmol ) & & result ( vdisp ) & & bind ( C , name = namespace // \"new_d4s_model\" ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4s_model_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ) :: vdisp type ( vp_model ), pointer :: disp type ( d4s_model ), allocatable :: tmp if ( debug ) print '(\"[Info]\",1x, a)' , \"new_d4s_model\" vdisp = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) allocate ( tmp ) call new_d4s_model ( error % ptr , tmp , mol % ptr ) if ( allocated ( error % ptr )) then deallocate ( tmp ) else allocate ( disp ) call move_alloc ( tmp , disp % ptr ) vdisp = c_loc ( disp ) end if end function new_d4s_model_api !> Create new custom D4 dispersion model function custom_d4_model_api ( verror , vmol , ga , gc , wf ) & & result ( vdisp ) & & bind ( C , name = namespace // \"custom_d4_model\" ) !DEC$ ATTRIBUTES DLLEXPORT :: custom_d4_model_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ) :: vdisp type ( vp_model ), pointer :: disp real ( c_double ), value , intent ( in ) :: ga real ( c_double ), value , intent ( in ) :: gc real ( c_double ), value , intent ( in ) :: wf type ( d4_model ), allocatable :: tmp if ( debug ) print '(\"[Info]\",1x, a)' , \"custom_d4_model\" vdisp = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) allocate ( tmp ) call new_d4_model ( error % ptr , tmp , mol % ptr , ga = ga , gc = gc , wf = wf ) if ( allocated ( error % ptr )) then deallocate ( tmp ) else allocate ( disp ) call move_alloc ( tmp , disp % ptr ) vdisp = c_loc ( disp ) end if end function custom_d4_model_api !> Create new custom D4S dispersion model function custom_d4s_model_api ( verror , vmol , ga , gc ) & & result ( vdisp ) & & bind ( C , name = namespace // \"custom_d4s_model\" ) !DEC$ ATTRIBUTES DLLEXPORT :: custom_d4s_model_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ) :: vdisp type ( vp_model ), pointer :: disp real ( c_double ), value , intent ( in ) :: ga real ( c_double ), value , intent ( in ) :: gc type ( d4s_model ), allocatable :: tmp if ( debug ) print '(\"[Info]\",1x, a)' , \"custom_d4s_model\" vdisp = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) allocate ( tmp ) call new_d4s_model ( error % ptr , tmp , mol % ptr , ga = ga , gc = gc ) if ( allocated ( error % ptr )) then deallocate ( tmp ) else allocate ( disp ) call move_alloc ( tmp , disp % ptr ) vdisp = c_loc ( disp ) end if end function custom_d4s_model_api !> Delete dispersion model subroutine delete_model_api ( vdisp ) & & bind ( C , name = namespace // \"delete_model\" ) !DEC$ ATTRIBUTES DLLEXPORT :: delete_model_api type ( c_ptr ), intent ( inout ) :: vdisp type ( vp_model ), pointer :: disp if ( debug ) print '(\"[Info]\",1x, a)' , \"delete_model\" if ( c_associated ( vdisp )) then call c_f_pointer ( vdisp , disp ) deallocate ( disp ) vdisp = c_null_ptr end if end subroutine delete_model_api !> Create new rational damping parameters function new_rational_damping_api ( verror , s6 , s8 , s9 , a1 , a2 , alp ) & & result ( vparam ) & & bind ( C , name = namespace // \"new_rational_damping\" ) !DEC$ ATTRIBUTES DLLEXPORT :: new_rational_damping_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error real ( c_double ), value , intent ( in ) :: s6 real ( c_double ), value , intent ( in ) :: s8 real ( c_double ), value , intent ( in ) :: s9 real ( c_double ), value , intent ( in ) :: a1 real ( c_double ), value , intent ( in ) :: a2 real ( c_double ), value , intent ( in ) :: alp type ( c_ptr ) :: vparam type ( rational_damping_param ), allocatable :: tmp type ( vp_param ), pointer :: param if ( debug ) print '(\"[Info]\",1x, a)' , \"new_rational_damping\" vparam = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) allocate ( tmp ) tmp = rational_damping_param ( s6 = s6 , s8 = s8 , s9 = s9 , a1 = a1 , a2 = a2 , alp = alp ) allocate ( param ) call move_alloc ( tmp , param % ptr ) vparam = c_loc ( param ) end function new_rational_damping_api !> Load rational damping parameters from internal storage function load_rational_damping_api ( verror , charptr , atm ) & & result ( vparam ) & & bind ( C , name = namespace // \"load_rational_damping\" ) !DEC$ ATTRIBUTES DLLEXPORT :: load_rational_damping_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error character ( kind = c_char ), intent ( in ) :: charptr ( * ) logical ( c_bool ), value , intent ( in ) :: atm character ( len = :, kind = c_char ), allocatable :: method type ( c_ptr ) :: vparam type ( vp_param ), pointer :: param real ( wp ), allocatable :: s9 class ( damping_param ), allocatable :: tmp if ( debug ) print '(\"[Info]\",1x, a)' , \"load_rational_damping\" vparam = c_null_ptr if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) call c_f_character ( charptr , method ) if ( atm ) s9 = 1.0_wp call get_rational_damping ( method , tmp , s9 ) if (. not . allocated ( tmp )) then call fatal_error ( error % ptr , \"Functional '\" // method // \"' not known\" ) return end if allocate ( param ) call move_alloc ( tmp , param % ptr ) vparam = c_loc ( param ) end function load_rational_damping_api !> Delete damping parameters subroutine delete_param_api ( vparam ) & & bind ( C , name = namespace // \"delete_param\" ) !DEC$ ATTRIBUTES DLLEXPORT :: delete_param_api type ( c_ptr ), intent ( inout ) :: vparam type ( vp_param ), pointer :: param if ( debug ) print '(\"[Info]\",1x, a)' , \"delete_param\" if ( c_associated ( vparam )) then call c_f_pointer ( vparam , param ) deallocate ( param ) vparam = c_null_ptr end if end subroutine delete_param_api !> Calculate dispersion subroutine get_dispersion_api ( verror , vmol , vdisp , vparam , & & energy , c_gradient , c_sigma ) & & bind ( C , name = namespace // \"get_dispersion\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_dispersion_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ), value :: vdisp type ( vp_model ), pointer :: disp type ( c_ptr ), value :: vparam type ( vp_param ), pointer :: param real ( c_double ), intent ( out ) :: energy real ( c_double ), intent ( out ), optional :: c_gradient ( 3 , * ) real ( wp ), allocatable :: gradient (:, :) real ( c_double ), intent ( out ), optional :: c_sigma ( 3 , 3 ) real ( wp ), allocatable :: sigma (:, :) logical :: has_grad , has_sigma if ( debug ) print '(\"[Info]\",1x, a)' , \"get_dispersion\" if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) if (. not . c_associated ( vdisp )) then call fatal_error ( error % ptr , \"Dispersion model is missing\" ) return end if call c_f_pointer ( vdisp , disp ) if (. not . c_associated ( vparam )) then call fatal_error ( error % ptr , \"Damping parameters are missing\" ) return end if call c_f_pointer ( vparam , param ) if (. not . allocated ( param % ptr )) then call fatal_error ( error % ptr , \"Damping parameters are not initialized\" ) return end if has_grad = present ( c_gradient ) if ( has_grad ) then gradient = c_gradient (: 3 , : mol % ptr % nat ) endif has_sigma = present ( c_sigma ) if ( has_sigma ) then sigma = c_sigma (: 3 , : 3 ) ! Still needs to be passed into dispersion subroutines, ! just won't be returned through the API. ! Would need to refactor disperision ! subroutines to make sigma truly optional. else if ( has_grad ) then allocate ( sigma ( 3 , 3 )) endif ! Evaluate energy, gradient (optional), and ! sigma (optional) analytically call get_dispersion ( mol % ptr , disp % ptr , param % ptr , realspace_cutoff (), & & energy , gradient , sigma ) if ( has_grad ) then c_gradient (: 3 , : mol % ptr % nat ) = gradient endif if ( has_sigma ) then c_sigma (: 3 , : 3 ) = sigma endif end subroutine get_dispersion_api !> Calculate hessian numerically subroutine get_numerical_hessian_api ( verror , vmol , vdisp , & & vparam , c_hessian ) & & bind ( C , name = namespace // \"get_numerical_hessian\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_numerical_hessian_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ), value :: vdisp type ( vp_model ), pointer :: disp type ( c_ptr ), value :: vparam type ( vp_param ), pointer :: param real ( c_double ), intent ( out ) :: c_hessian ( * ) real ( wp ), allocatable :: hessian (:, :, :, :) integer :: nat_sq if ( debug ) print '(\"[Info]\",1x, a)' , \"get_numerical_hessian\" if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) nat_sq = mol % ptr % nat * mol % ptr % nat if (. not . c_associated ( vdisp )) then call fatal_error ( error % ptr , \"Dispersion model is missing\" ) return end if call c_f_pointer ( vdisp , disp ) if (. not . c_associated ( vparam )) then call fatal_error ( error % ptr , \"Damping parameters are missing\" ) return end if call c_f_pointer ( vparam , param ) if (. not . allocated ( param % ptr )) then call fatal_error ( error % ptr , \"Damping parameters are not initialized\" ) return end if ! Evaluate hessian numerically hessian = reshape ( c_hessian (: 9 * nat_sq ), & &( / 3 , mol % ptr % nat , 3 , mol % ptr % nat / )) call get_dispersion_hessian ( mol % ptr , disp % ptr , param % ptr , & & realspace_cutoff (), hessian ) c_hessian (: 9 * nat_sq ) = reshape ( hessian , ( / 9 * nat_sq / )) end subroutine get_numerical_hessian_api !> Calculate pairwise representation of dispersion energy subroutine get_pairwise_dispersion_api ( verror , vmol , vdisp , vparam , & & c_pair_energy2 , c_pair_energy3 ) & & bind ( C , name = namespace // \"get_pairwise_dispersion\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_pairwise_dispersion_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ), value :: vdisp type ( vp_model ), pointer :: disp type ( c_ptr ), value :: vparam type ( vp_param ), pointer :: param type ( c_ptr ), value , intent ( in ) :: c_pair_energy2 real ( wp ), pointer :: pair_energy2 (:, :) type ( c_ptr ), value , intent ( in ) :: c_pair_energy3 real ( wp ), pointer :: pair_energy3 (:, :) if ( debug ) print '(\"[Info]\",1x, a)' , \"get_pairwise_dispersion\" if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) if (. not . c_associated ( vdisp )) then call fatal_error ( error % ptr , \"Dispersion model is missing\" ) return end if call c_f_pointer ( vdisp , disp ) if (. not . c_associated ( vparam )) then call fatal_error ( error % ptr , \"Damping parameters are missing\" ) return end if call c_f_pointer ( vparam , param ) if (. not . allocated ( param % ptr )) then call fatal_error ( error % ptr , \"Damping parameters are not initialized\" ) return end if call c_f_pointer ( c_pair_energy2 , pair_energy2 , [ mol % ptr % nat , mol % ptr % nat ]) call c_f_pointer ( c_pair_energy3 , pair_energy3 , [ mol % ptr % nat , mol % ptr % nat ]) call get_pairwise_dispersion ( mol % ptr , disp % ptr , param % ptr , realspace_cutoff (), & & pair_energy2 , pair_energy3 ) end subroutine get_pairwise_dispersion_api !> Calculate dispersion subroutine get_properties_api ( verror , vmol , vdisp , & & c_cn , c_charges , c_c6 , c_alpha ) & & bind ( C , name = namespace // \"get_properties\" ) !DEC$ ATTRIBUTES DLLEXPORT :: get_properties_api type ( c_ptr ), value :: verror type ( vp_error ), pointer :: error type ( c_ptr ), value :: vmol type ( vp_structure ), pointer :: mol type ( c_ptr ), value :: vdisp type ( vp_model ), pointer :: disp real ( c_double ), intent ( out ), optional :: c_cn ( * ) real ( wp ), allocatable :: cn (:) real ( c_double ), intent ( out ), optional :: c_charges ( * ) real ( wp ), allocatable :: charges (:) real ( c_double ), intent ( out ), optional :: c_c6 ( * ) real ( wp ), allocatable :: c6 (:, :) real ( c_double ), intent ( out ), optional :: c_alpha ( * ) real ( wp ), allocatable :: alpha (:) if ( debug ) print '(\"[Info]\",1x, a)' , \"get_properties\" if (. not . c_associated ( verror )) return call c_f_pointer ( verror , error ) if (. not . c_associated ( vmol )) then call fatal_error ( error % ptr , \"Molecular structure data is missing\" ) return end if call c_f_pointer ( vmol , mol ) if (. not . c_associated ( vdisp )) then call fatal_error ( error % ptr , \"Dispersion model is missing\" ) return end if call c_f_pointer ( vdisp , disp ) allocate ( cn ( mol % ptr % nat ), charges ( mol % ptr % nat ), alpha ( mol % ptr % nat ), & & c6 ( mol % ptr % nat , mol % ptr % nat )) call get_properties ( mol % ptr , disp % ptr , realspace_cutoff (), cn , charges , c6 , alpha ) if ( present ( c_cn )) then c_cn (: size ( cn )) = cn end if if ( present ( c_charges )) then c_charges (: size ( charges )) = charges end if if ( present ( c_c6 )) then c_c6 (: size ( c6 )) = reshape ( c6 , [ size ( c6 )]) end if if ( present ( c_alpha )) then c_alpha (: size ( alpha )) = alpha end if end subroutine get_properties_api subroutine f_c_character ( rhs , lhs , len ) character ( kind = c_char ), intent ( out ) :: lhs ( * ) character ( len =* ), intent ( in ) :: rhs integer , intent ( in ) :: len integer :: length length = min ( len - 1 , len_trim ( rhs )) lhs ( 1 : length ) = transfer ( rhs ( 1 : length ), lhs ( 1 : length )) lhs ( length + 1 : length + 1 ) = c_null_char end subroutine f_c_character subroutine c_f_character ( rhs , lhs ) character ( kind = c_char ), intent ( in ) :: rhs ( * ) character ( len = :, kind = c_char ), allocatable , intent ( out ) :: lhs integer :: ii do ii = 1 , huge ( ii ) - 1 if ( rhs ( ii ) == c_null_char ) then exit end if end do allocate ( character ( len = ii - 1 ) :: lhs ) lhs = transfer ( rhs ( 1 : ii - 1 ), lhs ) end subroutine c_f_character !> Cold fusion check subroutine verify_structure ( error , mol ) type ( error_type ), allocatable , intent ( out ) :: error type ( structure_type ), intent ( in ) :: mol integer :: iat , jat , stat stat = 0 do iat = 1 , mol % nat do jat = 1 , iat - 1 if ( norm2 ( mol % xyz (:, jat ) - mol % xyz (:, iat )) < 1.0e-9_wp ) stat = stat + 1 end do end do if ( stat > 0 ) then call fatal_error ( error , \"Too close interatomic distances found\" ) end if end subroutine verify_structure end module dftd4_api","tags":"","url":"sourcefile/api.f90.html"},{"title":"reference.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the GNU Lesser General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! GNU Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_reference use mctc_env , only : wp use mctc_io_symbols , only : to_number use dftd4_data , only : get_hardness , get_effective_charge implicit none private public :: get_nref , set_refcn , set_refgw public :: set_refq_eeq , set_refalpha_eeq , set_refq_gfn2 , set_refalpha_gfn2 interface get_nref module procedure :: get_nref_sym module procedure :: get_nref_num end interface get_nref interface set_refcn module procedure :: set_refcn_sym module procedure :: set_refcn_num end interface set_refcn interface set_refgw module procedure :: set_refgw_sym module procedure :: set_refgw_num end interface set_refgw interface set_refq_eeq module procedure :: set_refq_eeq_sym module procedure :: set_refq_eeq_num end interface set_refq_eeq interface set_refalpha_eeq module procedure :: set_refalpha_eeq_sym module procedure :: set_refalpha_eeq_num end interface set_refalpha_eeq interface set_refq_gfn2 module procedure :: set_refq_gfn2_sym module procedure :: set_refq_gfn2_num end interface set_refq_gfn2 interface set_refalpha_gfn2 module procedure :: set_refalpha_gfn2_sym module procedure :: set_refalpha_gfn2_num end interface set_refalpha_gfn2 integer , parameter :: max_elem = 118 integer , dimension ( max_elem ) :: refn ! for D4 real ( wp ), dimension ( 7 , max_elem ) :: refq real ( wp ), dimension ( 7 , max_elem ) :: refh real ( wp ), dimension ( 7 , max_elem ) :: dftq , pbcq , gffq , clsq !solq real ( wp ), dimension ( 7 , max_elem ) :: dfth , pbch , gffh , clsh !solh real ( wp ), dimension ( 7 , max_elem ) :: hcount real ( wp ), dimension ( 7 , max_elem ) :: ascale real ( wp ), dimension ( 7 , max_elem ) :: refcovcn real ( wp ), dimension ( 7 , max_elem ) :: refcn integer , dimension ( 7 , max_elem ) :: refsys real ( wp ), dimension ( 23 , 7 , max_elem ) :: alphaiw real ( wp ), dimension ( 17 ) :: secq real ( wp ), dimension ( 17 ) :: sscale real ( wp ), dimension ( 17 ) :: seccn real ( wp ), dimension ( 17 ) :: seccnd3 real ( wp ), dimension ( 23 , 17 ) :: secaiw include 'reference.inc' contains !> Get number of references for a given element symbol elemental function get_nref_sym ( sym ) result ( n ) !> Element symbol character ( len =* ), intent ( in ) :: sym !> Number of references integer :: n n = get_nref ( to_number ( sym )) end function get_nref_sym !> Get number of references for a given atomic number elemental function get_nref_num ( num ) result ( n ) !> Atomic number integer , intent ( in ) :: num !> Number of references integer :: n if ( num > 0 . and . num <= size ( refn )) then n = refn ( num ) else n = 0 end if end function get_nref_num !> Set the reference coordination numbers for an element symbol pure subroutine set_refcn_sym ( cn , sym ) !> Reference coordination number real ( wp ), intent ( out ) :: cn (:) !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refcn ( cn , to_number ( sym )) end subroutine set_refcn_sym !> Set the reference coordination numbers for an atomic number pure subroutine set_refcn_num ( cn , num ) !> Reference coordination number real ( wp ), intent ( out ) :: cn (:) !> Atomic number integer , intent ( in ) :: num integer :: ref cn (:) = 0.0_wp if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) cn (: ref ) = refcovcn (: ref , num ) end if end subroutine set_refcn_num !> Set the number of gaussian weights for an element symbol pure subroutine set_refgw_sym ( ngw , sym ) !> Number of gaussian weights integer , intent ( out ) :: ngw (:) !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refgw ( ngw , to_number ( sym )) end subroutine set_refgw_sym !> Set the number of gaussian weights for an atomic number pure subroutine set_refgw_num ( ngw , num ) !> Number of gaussian weights integer , intent ( out ) :: ngw (:) !> Atomic number integer , intent ( in ) :: num integer , parameter :: max_cn = 19 integer :: icn , ir , ref integer :: cnc ( 0 : max_cn ) ngw (:) = 1 if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) cnc (:) = [ 1 , spread ( 0 , 1 , max_cn )] do ir = 1 , ref icn = min ( nint ( refcn ( ir , num )), max_cn ) cnc ( icn ) = cnc ( icn ) + 1 end do do ir = 1 , ref icn = cnc ( min ( nint ( refcn ( ir , num )), max_cn )) ngw ( ir ) = icn * ( icn + 1 ) / 2 end do end if end subroutine set_refgw_num !> Set the reference partial charges for an element symbol pure subroutine set_refq_eeq_sym ( q , sym ) !> Reference partial charge real ( wp ), intent ( out ) :: q (:) !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refq_eeq ( q , to_number ( sym )) end subroutine set_refq_eeq_sym !> Set the reference partial charges for an atomic number pure subroutine set_refq_eeq_num ( q , num ) !> Reference partial charge real ( wp ), intent ( out ) :: q (:) !> Atomic number integer , intent ( in ) :: num integer :: ref q (:) = 0.0_wp if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) q (: ref ) = clsq (: ref , num ) end if end subroutine set_refq_eeq_num !> Set the reference partial charges for an element symbol pure subroutine set_refq_gfn2_sym ( q , sym ) !> Reference partial charge real ( wp ), intent ( out ) :: q (:) !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refq_gfn2 ( q , to_number ( sym )) end subroutine set_refq_gfn2_sym !> Set the reference partial charges for an atomic number pure subroutine set_refq_gfn2_num ( q , num ) !> Reference partial charge real ( wp ), intent ( out ) :: q (:) !> Atomic number integer , intent ( in ) :: num integer :: ref q (:) = 0.0_wp if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) q (: ref ) = refq (: ref , num ) end if end subroutine set_refq_gfn2_num !> Set the reference polarizibility for an element symbol pure subroutine set_refalpha_eeq_sym ( alpha , ga , gc , sym ) !> Reference polarizibility real ( wp ), intent ( out ) :: alpha (:, :) !> Maximum charge scaling height real ( wp ), intent ( in ) :: ga !> Charge scaling steepness real ( wp ), intent ( in ) :: gc !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refalpha_eeq ( alpha , ga , gc , to_number ( sym )) end subroutine set_refalpha_eeq_sym !> Set the reference polarizibility for an atomic number pure subroutine set_refalpha_eeq_num ( alpha , ga , gc , num ) !> Reference polarizibility real ( wp ), intent ( out ) :: alpha (:, :) !> Maximum charge scaling height real ( wp ), intent ( in ) :: ga !> Charge scaling steepness real ( wp ), intent ( in ) :: gc !> Atomic number integer , intent ( in ) :: num integer :: ref integer :: ir , is real ( wp ) :: iz real ( wp ) :: aiw ( 23 ) alpha (:, :) = 0.0_wp if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) do ir = 1 , ref is = refsys ( ir , num ) if ( abs ( is ) < 1e-12_wp ) cycle iz = get_effective_charge ( is ) aiw = sscale ( is ) * secaiw (:, is ) & & * zeta ( ga , get_hardness ( is ) * gc , iz , clsh ( ir , num ) + iz ) alpha (:, ir ) = max ( ascale ( ir , num ) * ( alphaiw (:, ir , num ) & & - hcount ( ir , num ) * aiw ), 0.0_wp ) end do end if end subroutine set_refalpha_eeq_num !> Set the reference polarizibility for an element symbol pure subroutine set_refalpha_gfn2_sym ( alpha , ga , gc , sym ) !> Reference polarizibility real ( wp ), intent ( out ) :: alpha (:, :) !> Maximum charge scaling height real ( wp ), intent ( in ) :: ga !> Charge scaling steepness real ( wp ), intent ( in ) :: gc !> Element symbol character ( len =* ), intent ( in ) :: sym call set_refalpha_gfn2 ( alpha , ga , gc , to_number ( sym )) end subroutine set_refalpha_gfn2_sym !> Set the reference polarizibility for an atomic number pure subroutine set_refalpha_gfn2_num ( alpha , ga , gc , num ) !> Reference polarizibility real ( wp ), intent ( out ) :: alpha (:, :) !> Maximum charge scaling height real ( wp ), intent ( in ) :: ga !> Charge scaling steepness real ( wp ), intent ( in ) :: gc !> Atomic number integer , intent ( in ) :: num integer :: ref integer :: ir , is real ( wp ) :: iz real ( wp ) :: aiw ( 23 ) alpha (:, :) = 0.0_wp if ( num > 0 . and . num <= size ( refn )) then ref = get_nref ( num ) do ir = 1 , ref is = refsys ( ir , num ) if ( abs ( is ) < 1e-12_wp ) cycle iz = get_effective_charge ( is ) aiw = sscale ( is ) * secaiw (:, is ) & & * zeta ( ga , get_hardness ( is ) * gc , iz , refh ( ir , num ) + iz ) alpha (:, ir ) = max ( ascale ( ir , num ) * ( alphaiw (:, ir , num ) & & - hcount ( ir , num ) * aiw ), 0.0_wp ) end do end if end subroutine set_refalpha_gfn2_num !> charge scaling function elemental function zeta ( a , c , qref , qmod ) real ( wp ), intent ( in ) :: a real ( wp ), intent ( in ) :: c real ( wp ), intent ( in ) :: qref real ( wp ), intent ( in ) :: qmod real ( wp ) :: zeta intrinsic :: exp if ( qmod < 0.0_wp ) then zeta = exp ( a ) else zeta = exp ( a * ( 1.0_wp - exp ( c * ( 1.0_wp - qref / qmod ) ) ) ) endif end function zeta end module dftd4_reference","tags":"","url":"sourcefile/reference.f90.html"},{"title":"charge.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Interface to the charge model module dftd4_charge use , intrinsic :: iso_fortran_env , only : error_unit use mctc_env , only : error_type , wp use mctc_io , only : structure_type use multicharge , only : mchrg_model_type , new_eeq2019_model implicit none private public :: get_charges contains !> Obtain charges from electronegativity equilibration model subroutine get_charges ( mol , qvec , dqdr , dqdL ) !DEC$ ATTRIBUTES DLLEXPORT :: get_charges !> Molecular structure data type ( structure_type ), intent ( in ) :: mol !> Atomic partial charges real ( wp ), intent ( out ), contiguous :: qvec (:) !> Derivative of the partial charges w.r.t. the Cartesian coordinates real ( wp ), intent ( out ), contiguous , optional :: dqdr (:, :, :) !> Derivative of the partial charges w.r.t. strain deformations real ( wp ), intent ( out ), contiguous , optional :: dqdL (:, :, :) logical :: grad type ( mchrg_model_type ) :: model type ( error_type ), allocatable :: error real ( wp ), parameter :: cn_max = 8.0_wp , cutoff = 2 5.0_wp real ( wp ), allocatable :: cn (:), dcndr (:, :, :), dcndL (:, :, :) real ( wp ), allocatable :: rcov (:), trans (:, :) grad = present ( dqdr ) . and . present ( dqdL ) call new_eeq2019_model ( mol , model , error ) if ( allocated ( error )) then write ( error_unit , '(\"[Error]:\", 1x, a)' ) error % message error stop end if allocate ( cn ( mol % nat )) if ( grad ) then allocate ( dcndr ( 3 , mol % nat , mol % nat ), dcndL ( 3 , 3 , mol % nat )) end if call model % ncoord % get_cn ( mol , cn , dcndr , dcndL ) call model % solve ( mol , error , cn , dcndr , dcndL , qvec = qvec , dqdr = dqdr , dqdL = dqdL ) if ( allocated ( error )) then write ( error_unit , '(\"[Error]:\", 1x, a)' ) error % message error stop end if end subroutine get_charges end module dftd4_charge","tags":"","url":"sourcefile/charge.f90.html"},{"title":"r4r2.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. module dftd4_data_r4r2 use mctc_env , only : wp use mctc_io_convert , only : aatoau use mctc_io_symbols , only : to_number implicit none private public :: get_r4r2_val !> Get r4/r2 expectation value interface get_r4r2_val module procedure :: get_r4r2_val_num module procedure :: get_r4r2_val_sym end interface get_r4r2_val integer , parameter :: max_elem = 118 !  PBE0/def2-QZVP atomic values calculated by S. Grimme in Gaussian (2010) !  rare gases recalculated by J. Mewes with PBE0/aug-cc-pVQZ in Dirac (2018) !  He: 3.4698 -> 3.5544, Ne: 3.1036 -> 3.7943, Ar: 5.6004 -> 5.6638, !  Kr: 6.1971 -> 6.2312, Xe: 7.5152 -> 8.8367 !  not replaced but recalculated (PBE0/cc-pVQZ) were !   H: 8.0589 ->10.9359, Li:29.0974 ->39.7226, Be:14.8517 ->17.7460 !  also new super heavies Cn,Nh,Fl,Lv,Og !  Am-Rg calculated at 4c-PBE/Dyall-AE4Z (Dirac 2022) real ( wp ), parameter :: r4_over_r2 ( max_elem ) = [ & & 8.0589_wp , 3.4698_wp , & ! H,He & 2 9.0974_wp , 1 4.8517_wp , 1 1.8799_wp , 7.8715_wp , 5.5588_wp , 4.7566_wp , 3.8025_wp , 3.1036_wp , & ! Li-Ne & 2 6.1552_wp , 1 7.2304_wp , 1 7.7210_wp , 1 2.7442_wp , 9.5361_wp , 8.1652_wp , 6.7463_wp , 5.6004_wp , & ! Na-Ar & 2 9.2012_wp , 2 2.3934_wp , & ! K,Ca & 1 9.0598_wp , 1 6.8590_wp , 1 5.4023_wp , 1 2.5589_wp , 1 3.4788_wp , & ! Sc- & 1 2.2309_wp , 1 1.2809_wp , 1 0.5569_wp , 1 0.1428_wp , 9.4907_wp , & ! -Zn & 1 3.4606_wp , 1 0.8544_wp , 8.9386_wp , 8.1350_wp , 7.1251_wp , 6.1971_wp , & ! Ga-Kr & 3 0.0162_wp , 2 4.4103_wp , & ! Rb,Sr & 2 0.3537_wp , 1 7.4780_wp , 1 3.5528_wp , 1 1.8451_wp , 1 1.0355_wp , & ! Y- & 1 0.1997_wp , 9.5414_wp , 9.0061_wp , 8.6417_wp , 8.9975_wp , & ! -Cd & 1 4.0834_wp , 1 1.8333_wp , 1 0.0179_wp , 9.3844_wp , 8.4110_wp , 7.5152_wp , & ! In-Xe & 3 2.7622_wp , 2 7.5708_wp , & ! Cs,Ba & 2 3.1671_wp , 2 1.6003_wp , 2 0.9615_wp , 2 0.4562_wp , 2 0.1010_wp , 1 9.7475_wp , 1 9.4828_wp , & ! La-Eu & 1 5.6013_wp , 1 9.2362_wp , 1 7.4717_wp , 1 7.8321_wp , 1 7.4237_wp , 1 7.1954_wp , 1 7.1631_wp , & ! Gd-Yb & 1 4.5716_wp , 1 5.8758_wp , 1 3.8989_wp , 1 2.4834_wp , 1 1.4421_wp , & ! Lu- & 1 0.2671_wp , 8.3549_wp , 7.8496_wp , 7.3278_wp , 7.4820_wp , & ! -Hg & 1 3.5124_wp , 1 1.6554_wp , 1 0.0959_wp , 9.7340_wp , 8.8584_wp , 8.0125_wp , & ! Tl-Rn & 2 9.8135_wp , 2 6.3157_wp , & ! Fr,Ra & 1 9.1885_wp , 1 5.8542_wp , 1 6.1305_wp , 1 5.6161_wp , 1 5.1226_wp , 1 6.1576_wp , 1 4.6510_wp , & ! Ac-Am & 1 4.7178_wp , 1 3.9108_wp , 1 3.5623_wp , 1 3.2326_wp , 1 2.9189_wp , 1 2.6133_wp , 1 2.3142_wp , & ! Cm-No & 1 4.8326_wp , 1 2.3771_wp , 1 0.6378_wp , 9.3638_wp , 8.2297_wp , & ! Lr- & 7.5667_wp , 6.9456_wp , 6.3946_wp , 5.9159_wp , 5.4929_wp , & ! -Cn & 6.7286_wp , 6.5144_wp , 1 0.9169_wp , 1 0.3600_wp , 9.4723_wp , 8.6641_wp ] ! Nh-Og integer :: idum real ( wp ), parameter :: sqrt_z_r4_over_r2 ( max_elem ) = & & sqrt ( 0.5_wp * ( r4_over_r2 * [( sqrt ( real ( idum , wp )), idum = 1 , max_elem )])) contains !> Get r4/r2 expectation value for a given element symbol elemental function get_r4r2_val_sym ( sym ) result ( rad ) !> Element symbol character ( len =* ), intent ( in ) :: sym !> r4/r2 expectation value real ( wp ) :: rad rad = get_r4r2_val ( to_number ( sym )) end function get_r4r2_val_sym !> Get r4/r2 expectation value for a given atomic number elemental function get_r4r2_val_num ( num ) result ( rad ) !> Atomic number integer , intent ( in ) :: num !> r4/r2 expectation value real ( wp ) :: rad if ( num > 0 . and . num <= size ( sqrt_z_r4_over_r2 )) then rad = sqrt_z_r4_over_r2 ( num ) else rad = 0.0_wp end if end function get_r4r2_val_num end module dftd4_data_r4r2","tags":"","url":"sourcefile/r4r2.f90.html"},{"title":"d4s.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Definition of the D4S dispersion model for the evaluation of C6 coefficients. module dftd4_model_d4s use , intrinsic :: iso_fortran_env , only : output_unit use ieee_arithmetic , only : ieee_is_nan use dftd4_model_type , only : dispersion_model , d4_ref use dftd4_data , only : get_covalent_rad , get_r4r2_val , get_wfpair_val , & & get_effective_charge , get_electronegativity , get_hardness use dftd4_reference use dftd4_model_utils use mctc_env , only : error_type , fatal_error , wp use mctc_io , only : structure_type use mctc_io_constants , only : pi implicit none private public :: d4s_model , new_d4s_model , d4_ref !> D4S dispersion model to evaluate C6 coefficients type , extends ( dispersion_model ) :: d4s_model !> Weighting factors for CN interpolation real ( wp ), allocatable :: wf (:, :) contains !> Generate weights for all reference systems procedure :: weight_references !> Evaluate C6 coefficient procedure :: get_atomic_c6 !> Evaluate atomic polarizabilities procedure :: get_polarizabilities end type d4s_model !> Default maximum charge scaling height for partial charge extrapolation real ( wp ), parameter :: ga_default = 3.0_wp !> Default charge scaling steepness for partial charge extrapolation real ( wp ), parameter :: gc_default = 2.0_wp !> Create new D4 dispersion model from molecular structure input interface new_d4s_model module procedure :: new_d4s_model_no_checks module procedure :: new_d4s_model_with_checks end interface new_d4s_model contains !> Create new D4S dispersion model from molecular structure input subroutine new_d4s_model_with_checks ( error , d4 , mol , ga , gc , ref ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_with_checks !> Instance of the dispersion model type ( d4s_model ), intent ( out ) :: d4 !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Error handling type ( error_type ), allocatable , intent ( out ) :: error !> Charge scaling height real ( wp ), intent ( in ), optional :: ga !> Charge scaling steepness real ( wp ), intent ( in ), optional :: gc !> Reference charge selection integer , intent ( in ), optional :: ref integer :: isp , izp , iref , jsp , jzp , jref integer :: mref , ref_charge real ( wp ) :: aiw ( 23 ), c6 real ( wp ), parameter :: thopi = 3.0_wp / pi ! check for unsupported elements (104 (Rf) - 111 (Rg)) do isp = 1 , mol % nid if ( mol % num ( isp ) > 103 . and . mol % num ( isp ) < 112 ) then call fatal_error ( error , \"Structure contains unsupported element '\" // trim ( mol % sym ( isp )) // \"'\" ) return end if end do d4 % ncoup = mol % nat if ( present ( ref )) then ref_charge = ref else ref_charge = d4_ref % eeq end if if ( present ( ga )) then d4 % ga = ga else d4 % ga = ga_default end if if ( present ( gc )) then d4 % gc = gc else d4 % gc = gc_default end if allocate ( d4 % wf ( mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , mol % nid jzp = mol % num ( jsp ) d4 % wf ( isp , jsp ) = get_wfpair_val ( izp , jzp ) end do end do allocate ( d4 % rcov ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % rcov ( isp ) = get_covalent_rad ( izp ) end do allocate ( d4 % en ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % en ( isp ) = get_electronegativity ( izp ) end do allocate ( d4 % zeff ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % zeff ( isp ) = get_effective_charge ( izp ) end do allocate ( d4 % eta ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % eta ( isp ) = get_hardness ( izp ) end do allocate ( d4 % r4r2 ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % r4r2 ( isp ) = get_r4r2_val ( izp ) end do allocate ( d4 % ref ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % ref ( isp ) = get_nref ( izp ) end do mref = maxval ( d4 % ref ) allocate ( d4 % cn ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refcn ( d4 % cn (:, isp ), izp ) end do allocate ( d4 % q ( mref , mol % nid )) allocate ( d4 % aiw ( 23 , mref , mol % nid )) select case ( ref_charge ) case default call fatal_error ( error , \"Unsupported option for reference charges\" ) return case ( d4_ref % eeq ) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_eeq ( d4 % q (:, isp ), izp ) call set_refalpha_eeq ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do case ( d4_ref % gfn2 ) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_gfn2 ( d4 % q (:, isp ), izp ) call set_refalpha_gfn2 ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do end select allocate ( d4 % ngw ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refgw ( d4 % ngw (:, isp ), izp ) end do allocate ( d4 % c6 ( mref , mref , mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , isp jzp = mol % num ( jsp ) do iref = 1 , d4 % ref ( isp ) do jref = 1 , d4 % ref ( jsp ) aiw (:) = d4 % aiw (:, iref , isp ) * d4 % aiw (:, jref , jsp ) c6 = thopi * trapzd ( aiw ) d4 % c6 ( jref , iref , jsp , isp ) = c6 d4 % c6 ( iref , jref , isp , jsp ) = c6 end do end do end do end do end subroutine new_d4s_model_with_checks !> Create new dispersion model from molecular structure input without !> checking for supported elements (old/compatibility version) subroutine new_d4s_model_no_checks ( d4 , mol , ga , gc , ref ) !DEC$ ATTRIBUTES DLLEXPORT :: new_d4_model_no_checks !> Instance of the dispersion model type ( d4s_model ), intent ( out ) :: d4 !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Charge scaling height real ( wp ), intent ( in ), optional :: ga !> Charge scaling steepness real ( wp ), intent ( in ), optional :: gc !> Reference charge selection integer , intent ( in ), optional :: ref integer :: isp , izp , iref , jsp , jzp , jref integer :: mref , ref_charge real ( wp ) :: aiw ( 23 ), c6 real ( wp ), parameter :: thopi = 3.0_wp / pi d4 % ncoup = mol % nat if ( present ( ref )) then ref_charge = ref else ref_charge = d4_ref % eeq end if if ( present ( ga )) then d4 % ga = ga else d4 % ga = ga_default end if if ( present ( gc )) then d4 % gc = gc else d4 % gc = gc_default end if allocate ( d4 % wf ( mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , mol % nid jzp = mol % num ( jsp ) d4 % wf ( isp , jsp ) = get_wfpair_val ( izp , jzp ) end do end do allocate ( d4 % rcov ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % rcov ( isp ) = get_covalent_rad ( izp ) end do allocate ( d4 % en ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % en ( isp ) = get_electronegativity ( izp ) end do allocate ( d4 % zeff ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % zeff ( isp ) = get_effective_charge ( izp ) end do allocate ( d4 % eta ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % eta ( isp ) = get_hardness ( izp ) end do allocate ( d4 % r4r2 ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % r4r2 ( isp ) = get_r4r2_val ( izp ) end do allocate ( d4 % ref ( mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) d4 % ref ( isp ) = get_nref ( izp ) end do mref = maxval ( d4 % ref ) allocate ( d4 % cn ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refcn ( d4 % cn (:, isp ), izp ) end do allocate ( d4 % q ( mref , mol % nid )) allocate ( d4 % aiw ( 23 , mref , mol % nid )) if ( ref_charge == d4_ref % gfn2 ) then do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_gfn2 ( d4 % q (:, isp ), izp ) call set_refalpha_gfn2 ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do else if ( ref_charge /= d4_ref % eeq ) then write ( output_unit , '(a)' ) \"[Info] Unsupported option for reference charge. Defaulting to EEQ charges.\" end if do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refq_eeq ( d4 % q (:, isp ), izp ) call set_refalpha_eeq ( d4 % aiw (:, :, isp ), d4 % ga , d4 % gc , izp ) end do end if allocate ( d4 % ngw ( mref , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) call set_refgw ( d4 % ngw (:, isp ), izp ) end do allocate ( d4 % c6 ( mref , mref , mol % nid , mol % nid )) do isp = 1 , mol % nid izp = mol % num ( isp ) do jsp = 1 , isp jzp = mol % num ( jsp ) do iref = 1 , d4 % ref ( isp ) do jref = 1 , d4 % ref ( jsp ) aiw (:) = d4 % aiw (:, iref , isp ) * d4 % aiw (:, jref , jsp ) c6 = thopi * trapzd ( aiw ) d4 % c6 ( jref , iref , jsp , isp ) = c6 d4 % c6 ( iref , jref , isp , jsp ) = c6 end do end do end do end do end subroutine new_d4s_model_no_checks !> Calculate the weights of the reference system and the derivatives w.r.t. !> coordination number for later use. subroutine weight_references ( self , mol , cn , q , gwvec , gwdcn , gwdq ) !DEC$ ATTRIBUTES DLLEXPORT :: weight_references !> Instance of the dispersion model class ( d4s_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Coordination number of every atom real ( wp ), intent ( in ) :: cn (:) !> Partial charge of every atom real ( wp ), intent ( in ) :: q (:) !> Pairwise weighting for the atomic reference systems real ( wp ), intent ( out ) :: gwvec (:, :, :) !> derivative of the pairwise weighting function w.r.t. the coordination number real ( wp ), intent ( out ), optional :: gwdcn (:, :, :) !> derivative of the pairwise weighting function w.r.t. the charge scaling real ( wp ), intent ( out ), optional :: gwdq (:, :, :) integer :: iat , izp , iref , igw , jat , jzp real ( wp ) :: norm , dnorm , gw , expw , expd , gwk , dgwk , wf , zi , gi , maxcn if ( present ( gwdcn ) . and . present ( gwdq )) then gwvec (:, :, :) = 0.0_wp gwdcn (:, :, :) = 0.0_wp gwdq (:, :, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(gwvec, gwdcn, gwdq, mol, self, cn, q) & !$omp private(iat, izp, iref, igw, zi, gi, jat, jzp) & !$omp private(norm, dnorm, gw, expw, expd, gwk, dgwk, wf, maxcn) do iat = 1 , mol % nat izp = mol % id ( iat ) zi = self % zeff ( izp ) gi = self % eta ( izp ) * self % gc do jat = 1 , mol % nat jzp = mol % id ( jat ) norm = 0.0_wp dnorm = 0.0_wp do iref = 1 , self % ref ( izp ) do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf ( izp , jzp ) gw = weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) norm = norm + gw dnorm = dnorm + 2 * wf * ( self % cn ( iref , izp ) - cn ( iat )) * gw end do end do norm = 1.0_wp / norm do iref = 1 , self % ref ( izp ) expw = 0.0_wp expd = 0.0_wp do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf ( izp , jzp ) gw = weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) expw = expw + gw expd = expd + 2 * wf * ( self % cn ( iref , izp ) - cn ( iat )) * gw end do gwk = expw * norm if ( is_exceptional ( gwk )) then maxcn = maxval ( self % cn (: self % ref ( izp ), izp )) if ( abs ( maxcn - self % cn ( iref , izp )) < 1e-12_wp ) then gwk = 1.0_wp else gwk = 0.0_wp end if end if gwvec ( iref , iat , jat ) = gwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) gwdq ( iref , iat , jat ) = gwk * dzeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) dgwk = norm * ( expd - expw * dnorm * norm ) if ( is_exceptional ( dgwk )) then dgwk = 0.0_wp end if gwdcn ( iref , iat , jat ) = dgwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) end do end do end do else gwvec (:, :, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(gwvec, mol, self, cn, q) & !$omp private(iat, izp, iref, igw, zi, gi, jat, jzp) & !$omp private(norm, gw, expw, gwk, wf, maxcn) do iat = 1 , mol % nat izp = mol % id ( iat ) zi = self % zeff ( izp ) gi = self % eta ( izp ) * self % gc do jat = 1 , mol % nat jzp = mol % id ( jat ) norm = 0.0_wp do iref = 1 , self % ref ( izp ) do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf ( izp , jzp ) norm = norm + weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) end do end do norm = 1.0_wp / norm do iref = 1 , self % ref ( izp ) expw = 0.0_wp do igw = 1 , self % ngw ( iref , izp ) wf = igw * self % wf ( izp , jzp ) expw = expw + weight_cn ( wf , cn ( iat ), self % cn ( iref , izp )) end do gwk = expw * norm if ( is_exceptional ( gwk )) then maxcn = maxval ( self % cn (: self % ref ( izp ), izp )) if ( abs ( maxcn - self % cn ( iref , izp )) < 1e-12_wp ) then gwk = 1.0_wp else gwk = 0.0_wp end if end if gwvec ( iref , iat , jat ) = gwk * zeta ( self % ga , gi , self % q ( iref , izp ) + zi , q ( iat ) + zi ) end do end do end do end if end subroutine weight_references !> Calculate atomic dispersion coefficients and their derivatives w.r.t. !> the coordination numbers and atomic partial charges. subroutine get_atomic_c6 ( self , mol , gwvec , gwdcn , gwdq , c6 , dc6dcn , dc6dq ) !DEC$ ATTRIBUTES DLLEXPORT :: get_atomic_c6 !> Instance of the dispersion model class ( d4s_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Pairwise weighting function for the atomic reference systems real ( wp ), intent ( in ) :: gwvec (:, :, :) !> Derivative of the pairwise weighting function w.r.t. the coordination number real ( wp ), intent ( in ), optional :: gwdcn (:, :, :) !> Derivative of the pairwise weighting function w.r.t. the partial charge real ( wp ), intent ( in ), optional :: gwdq (:, :, :) !> C6 coefficients for all atom pairs. real ( wp ), intent ( out ) :: c6 (:, :) !> Derivative of the C6 w.r.t. the coordination number real ( wp ), intent ( out ), optional :: dc6dcn (:, :) !> Derivative of the C6 w.r.t. the partial charge real ( wp ), intent ( out ), optional :: dc6dq (:, :) integer :: iat , jat , izp , jzp , iref , jref real ( wp ) :: refc6 , dc6 , dc6dcni , dc6dcnj , dc6dqi , dc6dqj if ( present ( gwdcn ). and . present ( dc6dcn ) & & . and . present ( gwdq ). and . present ( dc6dq )) then c6 (:, :) = 0.0_wp dc6dcn (:, :) = 0.0_wp dc6dq (:, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(c6, dc6dcn, dc6dq, mol, self, gwvec, gwdcn, gwdq) & !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6, dc6dqi, dc6dqj, & !$omp& dc6dcni, dc6dcnj) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) dc6 = 0.0_wp dc6dcni = 0.0_wp dc6dcnj = 0.0_wp dc6dqi = 0.0_wp dc6dqj = 0.0_wp do iref = 1 , self % ref ( izp ) do jref = 1 , self % ref ( jzp ) refc6 = self % c6 ( iref , jref , izp , jzp ) dc6 = dc6 + gwvec ( iref , iat , jat ) * gwvec ( jref , jat , iat ) * refc6 dc6dcni = dc6dcni + gwdcn ( iref , iat , jat ) * gwvec ( jref , jat , iat ) * refc6 dc6dcnj = dc6dcnj + gwvec ( iref , iat , jat ) * gwdcn ( jref , jat , iat ) * refc6 dc6dqi = dc6dqi + gwdq ( iref , iat , jat ) * gwvec ( jref , jat , iat ) * refc6 dc6dqj = dc6dqj + gwvec ( iref , iat , jat ) * gwdq ( jref , jat , iat ) * refc6 end do end do c6 ( iat , jat ) = dc6 c6 ( jat , iat ) = dc6 dc6dcn ( iat , jat ) = dc6dcni dc6dcn ( jat , iat ) = dc6dcnj dc6dq ( iat , jat ) = dc6dqi dc6dq ( jat , iat ) = dc6dqj end do end do else c6 (:, :) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(c6, mol, self, gwvec) & !$omp private(iat, jat, izp, jzp, iref, jref, refc6, dc6) do iat = 1 , mol % nat izp = mol % id ( iat ) do jat = 1 , iat jzp = mol % id ( jat ) dc6 = 0.0_wp do iref = 1 , self % ref ( izp ) do jref = 1 , self % ref ( jzp ) refc6 = self % c6 ( iref , jref , izp , jzp ) dc6 = dc6 + gwvec ( iref , iat , jat ) * gwvec ( jref , jat , iat ) * refc6 end do end do c6 ( iat , jat ) = dc6 c6 ( jat , iat ) = dc6 end do end do end if end subroutine get_atomic_c6 !> Calculate atomic polarizabilities and their derivatives w.r.t. !> the coordination numbers and atomic partial charges. subroutine get_polarizabilities ( self , mol , gwvec , gwdcn , gwdq , alpha , dadcn , dadq ) !DEC$ ATTRIBUTES DLLEXPORT :: get_polarizabilities !> Instance of the dispersion model class ( d4s_model ), intent ( in ) :: self !> Molecular structure data class ( structure_type ), intent ( in ) :: mol !> Pairwise weighting function for the atomic reference systems real ( wp ), intent ( in ) :: gwvec (:, :, :) !> Derivative of the pairwise weighting function w.r.t. the coordination number real ( wp ), intent ( in ), optional :: gwdcn (:, :, :) !> Derivative of the pairwise weighting function w.r.t. the partial charge real ( wp ), intent ( in ), optional :: gwdq (:, :, :) !> Static polarizabilities for all atoms. real ( wp ), intent ( out ) :: alpha (:) !> Derivative of the polarizibility w.r.t. the coordination number real ( wp ), intent ( out ), optional :: dadcn (:) !> Derivative of the polarizibility w.r.t. the partial charge real ( wp ), intent ( out ), optional :: dadq (:) integer :: iat , izp , iref real ( wp ) :: refa , da , dadcni , dadqi if ( present ( gwdcn ). and . present ( dadcn ) & & . and . present ( gwdq ). and . present ( dadq )) then alpha (:) = 0.0_wp dadcn (:) = 0.0_wp dadq (:) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(alpha, dadcn, dadq, mol, self, gwvec, gwdcn, gwdq) & !$omp private(iat, izp, iref, refa, da, dadqi, dadcni) do iat = 1 , mol % nat izp = mol % id ( iat ) da = 0.0_wp dadcni = 0.0_wp dadqi = 0.0_wp do iref = 1 , self % ref ( izp ) refa = self % aiw ( 1 , iref , izp ) da = da + gwvec ( iref , iat , iat ) * refa dadcni = dadcni + gwdcn ( iref , iat , iat ) * refa dadqi = dadqi + gwdq ( iref , iat , iat ) * refa end do alpha ( iat ) = da dadcn ( iat ) = dadcni dadq ( iat ) = dadqi end do else alpha (:) = 0.0_wp !$omp parallel do default(none) schedule(runtime) & !$omp shared(alpha, mol, self, gwvec) private(iat, izp, iref, refa, da) do iat = 1 , mol % nat izp = mol % id ( iat ) da = 0.0_wp do iref = 1 , self % ref ( izp ) da = da + gwvec ( iref , iat , iat ) * self % aiw ( 1 , iref , izp ) end do alpha ( iat ) = da end do end if end subroutine get_polarizabilities end module dftd4_model_d4s","tags":"","url":"sourcefile/d4s.f90.html"},{"title":"data.f90 – DFT-D4","text":"Source Code ! This file is part of dftd4. ! SPDX-Identifier: LGPL-3.0-or-later ! ! dftd4 is free software: you can redistribute it and/or modify it under ! the terms of the Lesser GNU General Public License as published by ! the Free Software Foundation, either version 3 of the License, or ! (at your option) any later version. ! ! dftd4 is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ! Lesser GNU General Public License for more details. ! ! You should have received a copy of the Lesser GNU General Public License ! along with dftd4.  If not, see <https://www.gnu.org/licenses/>. !> Element specific data needed for the DFT-D4 model module dftd4_data use dftd4_data_covrad , only : get_covalent_rad use dftd4_data_en , only : get_electronegativity use dftd4_data_hardness , only : get_hardness use dftd4_data_r4r2 , only : get_r4r2_val use dftd4_data_wfpair , only : get_wfpair_val use dftd4_data_zeff , only : get_effective_charge implicit none public end module dftd4_data","tags":"","url":"sourcefile/data.f90.html"}]}